[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "GEOSPATIAL ANALYSIS\nwith R Markdown, R Studio and Quarto\n\n\n\n\n\n\nContent Disclaimer\n\n\n\n\n\nThis micro-site is for academic purposes only. Any views or opinions, or comments represented in this site is personal and belongs solely to the site owner and do not represent those people, institutions or organisations that the owner may or may not be associated professionally or within a personal capacity unless explicitly stated.\nAll content on this site is for informational purposes only. This site’s owner makes no representation of the accuracy or completeness of any display information or any link on this site. The owner will not be liable for any errors, omissions or availability of any information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.\n\n\n\nmodule : ISSS624-AY2022023Nov Applied Geospatial Analytics\ninstructor : Dr. Kam Tin Seong, Associate Professor of Information Systems (Practice)\ninstitute : MITB-Analytics Track , Singapore Management University (SMU)\ntimeline : November 19, 2022 to December 17, 2022\n\n\n\n\n\n\n\n\n\n\ndate\nlesson\nlesson cover\ntopic\n\n\n\n\nNov19, 2022\nLesson 1\nHands-on Ex1\nGeospatial Data Wrangling with R [1]\n\n\nNov19, 2022\nLesson 1\nHands-on Ex1\nChoropleth Mapping with R [2]\n\n\nNov19, 2022\nLesson 1\nIn-class Ex1\nSpatial Weights and Applications [3]\n\n\nNov24, 2022\nLesson 2\nHands-on Ex2\nGlobal & Local Measures of Spatial Autocorrelation [4]\n\n\nDec2, 2022\nLesson 3\nHands-on Ex3\nSpatially Constrained Cluster Analysis [5]\n\n\nDec10, 2022\nLesson 4\nHands-on Ex4\nIn-class Ex4\nGeographically Weighted Regression [6]\n\n\nDec17, 2022\nLesson 5\nHands-on Ex5\nIn-class Ex5\nGeographically Weighted\nLogistc Regression"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html",
    "href": "personal_note/Acronym_Terminology.html",
    "title": "Acronym & Terminology",
    "section": "",
    "text": "ASP = Aspect ratio.\nchr = Character (one of the basic data types in R. Others : integer, complex, logical, and double)\nCRS = Coordinate Reference Systems\nEDA = Exploratory Data Analysis\ndbl = Double (one of the basic data types in R. Others : integer, complex, logical, and character)\nDBF = Dbase Database File\nDSN = Data Source Name\nEDA = Exploratory Data Analysis\nESDA = Exploratory Spatial Data Analysis\nEPSG = European Petroleum Survey Group\nGEOREF = World Geographic Reference system\nGIS = Geographic Information System\nGLSA = Global and Local Measure of Spatial Autocorrelation\nGSA = Global Spatial Autocorrelation\nGWR = Geographically Weighted Regression\nIDW = Inverse Distance Weighting\nJOG = Joint Operations Graphic maps\nknn = k nearest neighbours\nLGA = Local Government Areas\nLISA = Local Indicator of Spatial Association\nMGRS = Military Grid Reference System\nnb = neighbourhood object\nONC = Operational Navigation Chart\nPN = Personal Notes :)\npch = point shapes\nPRJ = Projection Definition File\nqtm = Quick Thematic Map plot\nSFC = Simple Feature Columns\nSFG = Simple Feature Geometries\nSPCS = U.S. State Plane Coordinate System zone\nSRIDs = Spatial Reference System Identifiers\nUSGS = U.S. Geological Survey\nUTM = Universal Transverse Mercator (grids / projection / zone boundaries)\nVIF = Variance Inflation Factors\nWKT = Well Known Text"
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#a",
    "href": "personal_note/Acronym_Terminology.html#a",
    "title": "Acronym & Terminology",
    "section": "A",
    "text": "A\n\n Autocorrelation  = also known as serial correlation in the discrete time case. The analysis of autocorrelation is a mathematical tool for finding repeating patterns, such as the presence of a periodic signal obscured by noise, or identifying the missing fundamental frequency in a signal implied by its harmonic frequencies."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#c",
    "href": "personal_note/Acronym_Terminology.html#c",
    "title": "Acronym & Terminology",
    "section": "C",
    "text": "C\n\n Cardinal directions  = Cardinal directions are the main directions of the compass.\n\nintercardinal directions, or ordinal directions, are the four points in between the cardinal directions.\nSecondary intercardinal directions : north-northeast (NNE), east-northeast (ENE), east-southeast (ESE), etc.\n\n Cartography  = Cartographic (adj). relating to the science or practice of drawing maps.\n Contiguity  = the topological concept that allows the vector data model to determine adjacency. Polygon topology defines contiguity. Polygons are contiguous to each other if they share a common arc.\n>> contiguous = land adjoining or touching by a common corner or a common boundary line."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#d",
    "href": "personal_note/Acronym_Terminology.html#d",
    "title": "Acronym & Terminology",
    "section": "D",
    "text": "D\n\n Datum (geodesy)  = a reference from which spatial measurements are made. In surveying and geodesy, a datum is a set of reference points on the earth’s surface against which position measurements are made, and (often) an associated model of the shape of the earth (reference ellipsoid) to define a geographic coordinate system.\n Delimited = Delimited data is a common format that separates values in each row with specific delimiter characters. Often use commas as the field delimiter to separate data from different columns. However, delimited files can also separate, or delimit, columns with other characters including pipes, colons, semicolons, slashes, and more."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#e",
    "href": "personal_note/Acronym_Terminology.html#e",
    "title": "Acronym & Terminology",
    "section": "E",
    "text": "E\n\n Enumerated data = enumerated type (also called enumeration, enum, or factor in the R programming language, and a categorical variable in statistics) is a data type consisting of a set of named values called elements, members, enumeral, or enumerators of the type.\n\nThe enumerator names are usually identifiers that behave as constants in the language.\nAn enumerated type can be seen as a degenerate tagged union of unit type.\nA variable that has been declared as having an enumerated type can be assigned any of the enumerators as a value.\ne.g.\n>> the four suits in a deck of cards may be four enumerators named Club, Diamond, Heart, and Spade, belonging to an enumerated type named suit.\n>> If a variable V is declared having suit as its data type, one can assign any of those four values to it."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#g",
    "href": "personal_note/Acronym_Terminology.html#g",
    "title": "Acronym & Terminology",
    "section": "G",
    "text": "G\n\n Graduated colour = colour symbology is used to show a quantitative difference between mapped features by varying the color of symbols.\n\nData is classified into ranges that are each assigned a different color from a color scheme to represent the range.\ne.g. if a classification scheme has 5 classes, 5 different symbol colors are assigned.\n>> The size of the symbols stays the same. Maps that vary in color this way are usually called choropleth maps.\n>> choose a continuous color scheme to apply different shades of the same color : lighter shades match lower data values & darker shades match higher data values.\n\n Graticules = are a network of lines on a map that delineate the geographic coordinates (degrees of latitude and longitude).\n\nGraticules can be used to measure distances, while the grid can be used to measure the number of items within a particular area.\nGraticules also helps to indicate cardinal directions and place locations having knowing coordinates."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#h",
    "href": "personal_note/Acronym_Terminology.html#h",
    "title": "Acronym & Terminology",
    "section": "H",
    "text": "H\n\n Hedonic Pricing = identifies the internal and external factors and characteristics that affect an item’s price in the market.\n\nHedonic pricing is most often seen in the housing market, since real estate prices are determined by the characteristics of the property itself as well as the neighborhood or environment within which it exists.\nHedonic pricing captures a consumer’s willingness to pay for what they perceive are environmental differences that add or detract from the intrinsic value of an asset or property."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#p",
    "href": "personal_note/Acronym_Terminology.html#p",
    "title": "Acronym & Terminology",
    "section": "P",
    "text": "P\n\n Proximity Matrix = measures of similarity or dissimilarity. This is the initial step before the combination clustering for Agglomerative clustering method."
  },
  {
    "objectID": "personal_note/Acronym_Terminology.html#s",
    "href": "personal_note/Acronym_Terminology.html#s",
    "title": "Acronym & Terminology",
    "section": "S",
    "text": "S\n\n Shapefile = a format created by ESRI that consists of multiple different parts for vector data. Shapefiles are usually composed of 3-4 mandatory files : .shp, .shx, .dbf and / or .prj.\n Spatial Autocorrelation = Describe the presence of systematic spatial variation in a variable.\n Spatial Dependency = is measured as the existence of statistical dependence in a collection of random variables, each of which is associated with a different geographical location.\n Spatial Heterogeneity = overall parameters estimated for the entire system may not adequately describe the process at any given location."
  },
  {
    "objectID": "personal_note/Personal_notes.html",
    "href": "personal_note/Personal_notes.html",
    "title": "Common Errors and Basic Concepts",
    "section": "",
    "text": "#PERSONAL NOTES"
  },
  {
    "objectID": "personal_note/Personal_notes.html#concept-notes-for-geocomputation-with-r",
    "href": "personal_note/Personal_notes.html#concept-notes-for-geocomputation-with-r",
    "title": "Common Errors and Basic Concepts",
    "section": "CONCEPT NOTES FOR GEOCOMPUTATION WITH R",
    "text": "CONCEPT NOTES FOR GEOCOMPUTATION WITH R\nFollowing notes are quoted from Geocomputation with R\n\nsimple feature geometries (basic) > sfg - objects > sfc - ‘list columns’ of class > sf - (full objects)\nsfg class :\n2.1 - represents the different simple feature geometry types in R : point, linestring, polygon (and their ‘multi’ equivalents, such as multipoints) or geometry collection.\n\nA point: st_point()\nA linestring: st_linestring()\nA polygon: st_polygon()\nA multipoint: st_multipoint()\nA multilinestring: st_multilinestring()\nA multipolygon: st_multipolygon()\nA geometry collection: st_geometrycollection()\n\n2.2 - sfg objects can be created from three base R data types:\n\nA numeric vector: a single point\nA matrix: a set of points, where each row represents a point, a multipoint or linestring\nA list: a collection of objects such as matrices, multilinestrings or geometry collections\n\n#further read-up is required\nsfc class :\n3.1 - sfc is a list of sfg objects, which is additionally able to contain information about the coordinate reference system in use. For instance, to combine two simple features into one object with two features, we can use the st_sfc() function. This is important since sfc represents the geometry column in sf data frames\n#further read up is required\nsf represent a set of data by combining the attributes (data.frame) with the simple feature geometry column (sfc). They are created with st_sf() .\n#further read-up is required\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system ( 0-360 range of decimal degree) to projected coordinate system.\n>> geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nShape objects can be vector or raster data\n\nsf objects for vector data\nstars objects for raster data\nIn tmap, a shape object needs to be defined with the function tm_shape(). When multiple shape objects are used, each has to be defined in a separate tm_shape() call.\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation.tif\", palette = terrain.colors(8)) +\ntm_shape(worldvector) +\n  tm_borders() +\ntm_shape(worldcities) +\n  tm_dots() +\n  tm_text(\"name\")\nthree shapes: worldelevation which is a stars object containing an attribute called \"worldelevation.tif\", worldvector which is an sf object with country borders, and worldcities, which is an sf object that contains metropolitan areas of at least 20 million inhabitants.\nEach tm_shape() function call is succeeded by one or more layer functions.\nThe order of the tm_shape() functions’ calls is crucial. The first tm_shape(), known as the main shape, is not only shown below the following shapes, but also sets the projection and extent of the whole map.\n\n\n\nTobler’s First law of Geography\n” Everything is related to everything else, but near things are more related than distant things.”\nFoundation of :\n\nspatial dependence\nspatial autocorrelation"
  },
  {
    "objectID": "personal_note/Personal_notes.html#code-references",
    "href": "personal_note/Personal_notes.html#code-references",
    "title": "Common Errors and Basic Concepts",
    "section": "CODE REFERENCES",
    "text": "CODE REFERENCES\n\n\n\nEPSG code\ngeodetic CRS\ndatum\nellipsoid\narea of use\n\n\n\n\n3414 - 4326\nSVY21\nSVY21\nWGS 84 (4326)\nSingapore - onshore and offshore"
  },
  {
    "objectID": "personal_note/Personal_notes.html#references",
    "href": "personal_note/Personal_notes.html#references",
    "title": "Common Errors and Basic Concepts",
    "section": "REFERENCES",
    "text": "REFERENCES\n\nwiki.gis.com. Datum (geodesy) - http://wiki.gis.com/wiki/index.php/Datum_(geodesy)\nChapter 4 Specifying Spatial Data - https://r-tmap.github.io/tmap-book/tmshape.html"
  },
  {
    "objectID": "personal_note/Personal_notes.html#quarto-quick-references",
    "href": "personal_note/Personal_notes.html#quarto-quick-references",
    "title": "Common Errors and Basic Concepts",
    "section": "QUARTO QUICK REFERENCES",
    "text": "QUARTO QUICK REFERENCES\n\nHTML Theming - https://quarto.org/docs/output-formats/html-themes.html\nHTML Code Blocks - https://quarto.org/docs/output-formats/html-code.html\nHTML Options - https://quarto.org/docs/reference/formats/html.html\nArticle Layout - https://quarto.org/docs/authoring/article-layout.html\nTables - https://quarto.org/docs/authoring/tables.html\nreStructuredText Options - https://quarto.org/docs/reference/formats/rst.html"
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "",
    "text": "#PERSONAL NOTES"
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#variable-values-assumption",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#variable-values-assumption",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "VARIABLE VALUES ASSUMPTION",
    "text": "VARIABLE VALUES ASSUMPTION\nThe variable can assume values either :\n\nAt any point on a continuous surface (e.g. land use type or annual precipitation levels in a region);\nAt a set of fixed sites located within a region (e.g. prices at a set of retail outlets);\nAcross a set of areas that subdivide a region (e.g. the count or proportion of households with two or more cars in a set of Census tracts that divide an urban region).\n\n\n\ninterpret spatial distribution\n\nclustering spatial distribution = high spatial autocorrelation\ncheckerboard spatial distribution = low spatial autocorrelation\n\n\nTable 1 : Summary of spatial autocorrelation relationship.\n\n\n\n\n\n\n\ntrait\nPositive Spatial Autocorrelation\nNegative Spatial Autocorrelation\n\n\n\n\nclustering\nsimilar values tend to be in similar locations, cluster pattern\ndispersed, regular pattern (** != random pattern)\n\n\nneighbours similarity\nhigh similarity than under spatial randomness.\nlow similarity than under spatial randomness.\n\n\ncompatibility\ncompatible with diffusion, but not necessary caused by diffusion.\ncompatible to competition, but not necessary competition.\n\n\nvisual ref"
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#global-spatial-autocorrelation-gsa-measurement",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#global-spatial-autocorrelation-gsa-measurement",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "GLOBAL SPATIAL AUTOCORRELATION (GSA) MEASUREMENT",
    "text": "GLOBAL SPATIAL AUTOCORRELATION (GSA) MEASUREMENT\n\nMoran’s I = describe how features differ from the values in the study area as a whole.\nGeary’s C = describe how features differ from their immediate neighbours.\n\nRelationship of Moran’s I & Geary’s C :\n\nC approaches 0 and I approaches 1 when similar values are clustered.\nC approaches 3 and I approaches -1 when dissimilar values tend to cluster.\nHigh values of C measures correspond to low values of I = both measures are\ninversely related.\nI is a measure of global spatial autocorrelation, while C is more sensitive to local spatial autocorrelation.\n\n\nMoran’s I\nMoran I (Z value) is :\n\npositive (I>0): Clustered, observations tend to be similar;\nnegative(I<0): Dispersed, observations tend to be dissimilar;\napproximately zero: observations are arranged randomly over space\n\n\n\nGeary’s C\nGeary C (Z value) is :\n\nLarge c value (>1) : Dispersed, observations tend to be dissimilar;\nSmall c value (<1) : Clustered, observations tend to be similar;\nc = 1: observations are arranged randomly over space.\n\n\n\nGetis-Ord Global G\nMeasures of global high / low clustering.\n\nConcerned with the overall concentration or lack of concentration in all pairs that are neighbours given the definition of neighbouring areas.\nThe variable MUST contain only positive values to be used.\n>> e.g. growth rate that consists +ve & -ve. The value will be off if involve -ve value.\n\n\n\n\n\n\n\n\n\n\ninterpretation\ncannot reject H0\nmay reject H0\nmay reject H0\n\n\n\n\np-value\nnot significant\nstatistically significant\nstatistically significant\n\n\nz-score\n-\npositive\nnegative\n\n\nremarks\nObserved spatial pattern of values could be one of many possible versions of complete spatial randomness.\nSpatial distribution of high values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random.\nSpatial distribution of low values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random.\n\n\n\n\n** revision corner **\n\n\nselect confident interval 95% => alpha value = 0.05\nreject Null hypothesis (H0) if p-value < alpha value\nfailed to reject H0 if p-value > alpha value"
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#local-spatial-autocorrelation",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#local-spatial-autocorrelation",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "LOCAL SPATIAL AUTOCORRELATION",
    "text": "LOCAL SPATIAL AUTOCORRELATION\n\nA collection of geospatial statistical analysis methods for analysing the location related tendency (clusters or outliers) in the attributes of geographically referenced data (points or areas).\nCan be indecies decomposited from their global measures such as local Moran’s I, local Geary’s c, and Getis-Ord Gi*.\nThese spatial statistics are well suited for :\n\ndetecting clusters or outliers;\nidentifying hot spot or cold spot areas;\nassessing the assumptions of stationarity;\nidentifying distances beyond which no discernible association obtains.\n\n\n\nlocal indicator of spatial association (LISA)\nA subset of localised geospatial statistics methods.\nAny spatial statistics that satisfies the following two requirements :\n\nthe LISA for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation;\nthe sum of LISAs for all observations is proportional to a global indicator of spatial association.\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable.\nFor instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\n\n\ninterpret Local Moran & scatterplot\nAn outlier = significant & negative if location i is associated with relatively low values in surrounding locations.\nA cluster = significant & positive if location i is associated with relatively high values of the surrounding locations.\n\nIn either instance, the p-value for the feature must be small enough for the cluster or outlier to be considered statistically significant.\nThe commonly used alpha-values are 0.1, 0.05, 0.01, 0.001 corresponding the 90%, 95, 99% and 99.9% confidence intervals respectively.\n\n\n\n\n\n\ndetect hot & cold spot areas with Getis-Ord Gi statistic\nInterpretation of Getis-Ord Gi and Gi :\n\nA hot spot area: significant and positive if location i is associated with relatively high values of the surrounding locations.\nA cold spot area: significant and negative if location i is associated with relatively low values in surrounding locations."
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#spatial-randomness",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#spatial-randomness",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "SPATIAL RANDOMNESS",
    "text": "SPATIAL RANDOMNESS\n\nNull hypothesis (H0)\n\nObserved spatial pattern of values is equally likely as any other spatial pattern.\nValues at one location do not depend on values at other (neighbouring) locations.\nUnder spatial randomness, the location of values may be altered without affecting\nthe information content of the data.\n\n\n\n\n\n\nassess the violation of assumptions\nUse a Monte Carlo simulation to assess the assumptions of Moran’s I are true (normality and randomisation).\n\nSimulate Moran’s I n times under the assumption of no spatial pattern,\nAssigning all regions the mean value\nCalculate Moran’s I,\nCompare actual value of Moran’s I to randomly simulated distribution to obtain p-value (pseudo significance)."
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#considerations-for-weighting-scheme",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#considerations-for-weighting-scheme",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "CONSIDERATIONS FOR WEIGHTING SCHEME",
    "text": "CONSIDERATIONS FOR WEIGHTING SCHEME\n\nfixed weighting scheme\n\nAll features should have at least one neighbour.\nNo feature should have all other features as neighbours.\nEspecially when input field values are skewed, focus on features to have about eight neighbors each.\nMight produce large estimate variances where data are sparse, while mask subtle local variations where data are dense.\nIn extreme condition, fixed schemes might not be able to calibrate in local areas where data are too sparse to satisfy the calibration requirements (observations must be more than parameters).\n\n\n\n\nadaptive weighting scheme\n\nAdaptive schemes adjust itself according to the density of data\nShorter bandwidths where data are dense and longer where sparse.\nFinding nearest neighbors are one of the oen used approaches."
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#suitability-of-spatial-weighting-method",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#suitability-of-spatial-weighting-method",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "SUITABILITY OF SPATIAL WEIGHTING METHOD",
    "text": "SUITABILITY OF SPATIAL WEIGHTING METHOD\n\npolygon contiguity method\n\nEffective when polygons are similar in size and distribution, and\nWhen spatial relationships are a function of polygon proximity (if two polygons share a boundary, spatial interaction between them increases).\nWhen select a polygon contiguity conceptualization - select row standardization for tools that have the Row Standardization parameter.\n\n\n\n\nfixed distance method\n\nWorks well for point data. It is often a good option for polygon data.\nWhen there is a large variation in polygon size (very large polygons at the edge of the study area and very small polygons at the center of the study area.\nEnsure a consistent scale of analysis.\n\n\n\n\n\n\ninverse distance method\n\nMost appropriate with continuous data or to model processes where the closer two features are in space, the more likely they are to interact / influence each other.\nEvery feature is potentially a neighbour of every other feature, and with large datasets, the number of computations involved will be enormous.\n\n\n\nk-nearest neighbours method\nEffective when you want to ensure you have a minimum number of neighbors for your analysis.\nWorks well when the data distribution varies across the study area so that some features are far away from all other features.\n\nEspecially when the associated features values are skewed (are not normally distributed), it is important that each feature is evaluated within the context of at least eight or so neighbors (this is a rule of thumb only).\nSpatial context of the analysis changes depending on variations in the sparsity/density of the features.\nWhen fixing the scale of analysis is less important than fixing the number of neighbors, the k-nearest neighbours method is appropriate."
  },
  {
    "objectID": "personal_note/SpatialAutocorrelationSpatialDependency.html#guide-to-select-fixed-distance-band-value",
    "href": "personal_note/SpatialAutocorrelationSpatialDependency.html#guide-to-select-fixed-distance-band-value",
    "title": "Spatial Autocorrelation & Spatial Dependency",
    "section": "GUIDE TO SELECT FIXED-DISTANCE BAND VALUE",
    "text": "GUIDE TO SELECT FIXED-DISTANCE BAND VALUE\n\nSelect a distance based on what you know about the geographic extent of the spatial processes promoting clustering for the phenomena you are studying.\nUse a distance band that is large enough to ensure all features will have at least one neighbor, or results will not be valid.\nTry not to get stuck on the idea that there is only one correct distance band.\nMost likely, there are multiple/interacting spatial processes\npromoting observed clustering.\nSelect an appropriate distance band or threshold distance.\nAll features should have at least one neighbour.\nNo feature should have all other features as a neighbour.\nEspecially if the values for the input field are skewed, each feature should have about eight neighbours."
  },
  {
    "objectID": "personal_note/SpatialConstrainedClusterAnalysis.html",
    "href": "personal_note/SpatialConstrainedClusterAnalysis.html",
    "title": "Spatially Constrained Cluster Analysis",
    "section": "",
    "text": "#PERSONAL NOTES"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html",
    "href": "class_project/project_2/Regionalisation_scca.html",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "",
    "text": "case study : Regionalisation by Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#objectives",
    "href": "class_project/project_2/Regionalisation_scca.html#objectives",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\n\n\n\n\n\n\nRegionalise Nigeria based on water points’ attribute\n\n\n\n\n\n\nTotal number of water points by status, i.e. functional, non-functional, and unknown;\nPercentage of water points by :\n\nstatus (functional, non-functional, and unknown);\ndeployed water technology (hand pump, mechanical pump, stand tap, etc.) ;\nusage capacity (1000, 300, 250, 50);\nrural or urban."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#scope-of-works",
    "href": "class_project/project_2/Regionalisation_scca.html#scope-of-works",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.3 Scope of Works",
    "text": "1.3 Scope of Works\n\n\n\n\n\n\nSpecific tasks required for this study :\n\n\n\n\n\n\nimport the shapefile into R with the appropriate sf method, and save it in a simple feature data frame format;\n\n\n\n\n\n\n\nNote\n\n\n\nThree (3) Projected Coordinate Systems of Nigeria, EPSG : 26391, 26392, and 26303.\n\n\n\nderive the proportion of functional and non-functional water points at LGA level (i.e. ADM2) by appropriate tidyr and dplyr methods;\ncombine geospatial and aspatial data frames into a simple feature data frame.\ndelineate water points measures functional regions by using :\n\nconventional hierarchical clustering.\nspatially constrained clustering algorithms.\n\nplot two (2) main types of maps below :\nThematic Mapping\nShow the derived water-point measures by appropriate statistical graphics and choropleth mapping technique.\nAnalytical Mapping\nPlot delineated functional regions using non-spatially constrained and spatially constrained clustering algorithms."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#load-r-packages-into-r-environment",
    "href": "class_project/project_2/Regionalisation_scca.html#load-r-packages-into-r-environment",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "2.1 Load R Packages into R Environment",
    "text": "2.1 Load R Packages into R Environment\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#acquire-data-source",
    "href": "class_project/project_2/Regionalisation_scca.html#acquire-data-source",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe file size of the downloaded data is about 422 MB due to water points data from multiple countries.\n\nSuch file size may require extra effort and time to manage the code chunks and files in the R environment before pushing them to GitHub.\n\nHence, to avoid any error in pushing files larger than 100 MB to Git, filtered Nigeria water points and removed unnecessary variables before uploading into the R environment.\nTherewith, the CSV file size should be lesser than 100 MB.\n\n\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level4 from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n4 Runfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#import-aspatial-data",
    "href": "class_project/project_2/Regionalisation_scca.html#import-aspatial-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.2 Import Aspatial Data",
    "text": "3.2 Import Aspatial Data\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\nDanger\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to import and save the comma separated value (CSV) file as a data frame, with title “wp_coord”.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nwp_coord <- read_csv(\"/jephOstan/ISSS624/class_project/project_2/data/aspatial/WPdx_NGAv1.1.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nRows: 95008 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): New Georeferenced Column, lat_lon_deg\ndbl (3): row_id, #lat_deg, #lon_deg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(wp_coord)\n\nRemarks :\nUpload and create new data frames according to the context of the variables. Therewith, these data frames can be used as and when the requirements fit the context thereof.\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\nDanger\n\n\n\n\n\nUsage of the code chunk below :\nwrite_rds( ) - readr - to save wp_coord data table into an RDS format.\n\nnote : compress the file with “xz”.\n\nread_rds( ) - readr - to read wp_coord RDS file into wp_coord.\n\n\n\n\nwrite_rds(wp_coord,\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_coord.rds\",compress = \"xz\")\n\nwp_coord <- read_rds(\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_coord.rds\")\n\n\n\n3.2.1.2 review data frame :: wp_coord\nUsage of the code chunk below :\nsummary( ) - base - to reveal any missing / “NA” observations.\n\nsummary(wp_coord)\n\n     row_id          lat_deg          lon_deg       New Georeferenced Column\n Min.   : 10732   Min.   : 4.302   Min.   : 2.707   Length:95008            \n 1st Qu.: 52633   1st Qu.: 7.360   1st Qu.: 5.517   Class :character        \n Median : 86953   Median : 9.091   Median : 7.891   Mode  :character        \n Mean   :199976   Mean   : 9.334   Mean   : 7.505                           \n 3rd Qu.:323672   3rd Qu.:11.833   3rd Qu.: 9.080                           \n Max.   :681838   Max.   :13.866   Max.   :14.218                           \n lat_lon_deg       \n Length:95008      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\nwp_cond <- read_csv(\"/jephOstan/ISSS624/class_project/project_2/data/aspatial/WPdx_NGAv1.1.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`)\n\nRows: 95008 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): #water_source_clean, #water_source_category, #water_tech_clean, #wa...\ndbl (1): row_id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(wp_cond)\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\nwrite_rds(wp_cond,\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_cond.rds\",compress = \"xz\")\n\nwp_cond <- read_rds(\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_cond.rds\")\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\nsummary(wp_cond)\n\n     row_id       water_source       water_source_clean water_source_category\n Min.   : 10732   Length:95008       Length:95008       Length:95008         \n 1st Qu.: 52633   Class :character   Class :character   Class :character     \n Median : 86953   Mode  :character   Mode  :character   Mode  :character     \n Mean   :199976                                                              \n 3rd Qu.:323672                                                              \n Max.   :681838                                                              \n water_tech_clean   water_tech_category status_clean          status         \n Length:95008       Length:95008        Length:95008       Length:95008      \n Class :character   Class :character    Class :character   Class :character  \n Mode  :character   Mode  :character    Mode  :character   Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n\n\n\n\n\n3.2.3 Import LGA and Measure-related Variable\n\nwp_adm <- read_csv(\"/jephOstan/ISSS624/class_project/project_2/data/aspatial/WPdx_NGAv1.1.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`)) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nRows: 95008 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): #clean_adm1, #clean_adm2\ndbl (8): row_id, rehab_priority, water_point_population, local_population_1k...\nlgl (1): is_urban\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(wp_adm)\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\nwrite_rds(wp_adm,\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_adm.rds\",compress = \"xz\")\n\nwp_adm <- read_rds(\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_adm.rds\")\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\nsummary(wp_adm)\n\n     row_id        clean_adm1         clean_adm2        water_point_population\n Min.   : 10732   Length:95008       Length:95008       Min.   :     0        \n 1st Qu.: 52633   Class :character   Class :character   1st Qu.:   117        \n Median : 86953   Mode  :character   Mode  :character   Median :   413        \n Mean   :199976                                         Mean   :  1246        \n 3rd Qu.:323672                                         3rd Qu.:  1169        \n Max.   :681838                                         Max.   :384595        \n                                                        NA's   :539           \n local_population_1km crucialness_score pressure_score    usage_capacity  \n Min.   :     0       Min.   :0.000     Min.   :  0.001   Min.   :  50.0  \n 1st Qu.:   597       1st Qu.:0.130     1st Qu.:  0.397   1st Qu.: 300.0  \n Median :  1756       Median :0.304     Median :  1.183   Median : 300.0  \n Mean   :  3723       Mean   :0.414     Mean   :  3.210   Mean   : 488.6  \n 3rd Qu.:  4393       3rd Qu.:0.628     3rd Qu.:  3.103   3rd Qu.:1000.0  \n Max.   :384595       Max.   :1.000     Max.   :776.970   Max.   :1000.0  \n NA's   :539          NA's   :6879      NA's   :6879                      \n staleness_score rehab_priority      is_urban      \n Min.   :23.13   Min.   :     0.0   Mode :logical  \n 1st Qu.:41.49   1st Qu.:   136.5   FALSE:75444    \n Median :42.87   Median :   522.0   TRUE :19564    \n Mean   :44.94   Mean   :  1545.4                  \n 3rd Qu.:44.34   3rd Qu.:  1527.0                  \n Max.   :99.00   Max.   :384595.0                  \n                 NA's   :53109                     \n\n\nRemarks :\n\n“staleness_score” indicates the depreciation of the data’s relevance.\nThe observation updated within 1 year has a “staleness_score” of approximately ~ 89.13 or higher.\nWater points data collection is usually done quarterly or annually.\n\nBased on the code chunk below, only 11 out of 95008 water points are updated within 1 year (between June 2021 to Aug 2022), meaning the rest, which is almost entire observations (the latest updated date was in Apr 2020), are outdated.\nThese outdated observations will need to be updated for the local governments or entities to allocate resources effectively in managing or upgrading these water points.\n\n\n\nsummary(wp_adm$staleness_score > 89)\n\n   Mode   FALSE    TRUE \nlogical   94997      11 \n\n\n\n\n\n3.2.4 Create Master File\nUsage of the code chunk below :\nleft_join( ) - dplyr - to combine wp_coord, wp_cond and wp_adm.\n\nwp <- left_join(\n  \n  (left_join\n   (wp_coord,wp_cond,\n     by = c(\"row_id\")\n     )\n   ),\n  wp_adm, by = c(\"row_id\"))\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\nUsage of the code chunk below :\nst_as_sfc( ) - sf - to convert foreign geometry object `New Georeferenced Column` to an sfc object\n\nwp$geometry = st_as_sfc(wp$`New Georeferenced Column`)\n\n\n\n3.2.5.2 convert to SF Data Frame\nUsage of the code chunk below :\nst_sf( ) - sf - to convert the tibble data frame into sf data frame with crs first set to WGS 84 (EPSG : 4326).\nst_crs( ) - sf - to retrieve coordinate reference system from the object.\n\nwp_sf<- st_sf(wp, crs = 4326)\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\n\n3.2.5.3 retrieve geometry summary :: wp_sf\nUsage of the code chunk below :\nst_geometry( ) - sf - to get the geometry summary.\n\nst_geometry(wp_sf)\n\nGeometry set for 95008 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT (6.95009 6.78599)\n\n\nPOINT (7.604793 6.78321)\n\n\nPOINT (7.60024 6.759284)\n\n\nPOINT (7.615451 6.799595)\n\n\nPOINT (7.65991 6.762375)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#import-boundary-data-of-nigeria-lga",
    "href": "class_project/project_2/Regionalisation_scca.html#import-boundary-data-of-nigeria-lga",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.3 Import Boundary Data of Nigeria LGA",
    "text": "3.3 Import Boundary Data of Nigeria LGA\nUsage of the code chunk below :\nst_read( ) - sf - to read simple features.\nselect( ) - dplyr - to select “shapeName” variable.\n\nbdy_nga <- st_read(dsn = \"/jephOstan/ISSS624/class_project/project_2/data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\jephOstan\\ISSS624\\class_project\\project_2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\nproblems(bdy_nga)\n\n\n3.3.1 Review Imported File\n\n3.3.1.1 check for missing data\nUsage of the code chunk below :\nfreq.na( ) - questionr - to generate frequency table of missing value.\n\nfreq.na(bdy_nga$shapeName)\n\nmissing       % \n      0       0 \n\n\n\n\n3.3.1.2 check for duplication :: “shapeName”\nUsage of the code chunk below :\nduplicated( ) - base - to determine duplicate elements.\n\nfreq(duplicated(bdy_nga$shapeName))\n\n        n    % val%\nFALSE 768 99.2 99.2\nTRUE    6  0.8  0.8\n\n\n\n\n3.3.1.3 list the duplicated value :: “shapeName”\nUsage of the code chunk below :\nadd_count( ) - dplyr - to count observations by group\nfilter( ) - dplyr - to retain shapeName that has count not equal to 1.\n\nwp_duplShapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nwp_duplShapeName\n\nSimple feature collection with 12 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n\n\n\n\n3.3.1.4 verify findings in section 3.3.1.3\nUsage of the code chunk below :\ntmap_mode( ) - tmap - to set tmap mode to static plotting or interactive.\ntm_shape( ) - tmap - to specify the shape object.\ntm_polygons( ) - tmap - to fill the polygons and draw the polygon borders.\ntm_view( ) - tmap - to set the options for the interactive tmap viewer.\ntm_fill( ) - tmap - to specify either which colour to be used or which data variable mapped to the colour palette.\ntm_borders( ) - tmap - to draw the polygon borders.\ntmap_style( ) - tmap - to set the tmap style.\ntm_layout( ) - tmap - to set the layout of cartographic map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(wp_duplShapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nRemarks :\nThe plot above indicates those duplicated water points are from different Nigeria states.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n3.3.1.5 acquire State info for duplicated value\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\nstate_dd_coordinates\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.75 6.75\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n9.16667 9.75\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n11.5 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.53 7.7\n\n\nObi\n546\nObi\nNasarawa\nNG.NA.OB\n8.53 7.7\n\n\nObi\n547\nObarike-Ito\nBenue\nNG.BE.OB\n7.33333 8.75\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.5 3.35\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.07 4.41"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#data-wrangling",
    "href": "class_project/project_2/Regionalisation_scca.html#data-wrangling",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1 Edit Duplicated Value :: “shapeName”\n\n\n\n\n\n\nUpdate the LGA boundary data frame with the matched state and “shapeName” by row index.55 Ong Z.R.J. (2022). Geospatial Analytics for Social Good - Understanding Nigeria Water functional and non-functional water point rate. https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#checking-of-duplicated-area-name\n\n\nShow the code\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- \n  c(\"Bassa Kogi\",\n    \"Bassa Plateau\",\n    \"Ifelodun Kwara\",\n    \"Ifelodun Osun\",\n    \"Irepodun Kwara\",\n    \"Irepodun Osun\",\n    \"Nasarawa Kano\",\n    \"Nasarawa Nasarawa\",\n    \"Obi Nasarawa\",\n    \"Obi Benue\",\n    \"Surulere Lagos\",\n    \"Surulere Oyo\")\n\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)]\n\n\n [1] \"Bassa Kogi\"        \"Bassa Plateau\"     \"Ifelodun Kwara\"   \n [4] \"Ifelodun Osun\"     \"Irepodun Kwara\"    \"Irepodun Osun\"    \n [7] \"Nasarawa Kano\"     \"Nasarawa Nasarawa\" \"Obi Nasarawa\"     \n[10] \"Obi Benue\"         \"Surulere Lagos\"    \"Surulere Oyo\"     \n\n\n\n3.4.1.1 validate edited value :: “shapeName”\n\n\nShow the code\ndupl_shapeName_val <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n != 1) %>%\n  select(-n)\n\ndupl_shapeName_val\n\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName         bdy_nga$shapeName geometry         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\n\n\n\n3.4.2 Perform Point-in-Polygon Overlay\n\n\n\n\n\n\nCombine the attribute and boundary of the water points into a simple feature object.\n\n3.4.2.1 join objects :: wp_sf, bdy_nga\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\n\n\nShow the code\nwp_joined <- st_join(x = wp_sf,\n                     y = bdy_nga,\n                     join = st_intersects,\n                     left = TRUE)\n\n\n\n\n3.4.2.2 save and read RDS File :: wp_joined\n\n\nShow the code\nwrite_rds(wp_joined,\n          \"data/geodata/wp_joined.rds\",\n          compress = \"xz\")\n\n\n\nwp_joined <- read_rds(\"data/geodata/wp_joined.rds\")\n\n\n\n3.4.2.3 inspect joined file :: wp_joined\n\n\n-- assess the uniqueness of water Point\n\nwp_joined %>% janitor::get_dupes(shapeName,\n                                 lat_lon_deg)\n\nNo duplicate combinations found of: shapeName, lat_lon_deg\n\n\nSimple feature collection with 0 features and 25 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n# A tibble: 0 × 26\n# … with 26 variables: shapeName <chr>, lat_lon_deg <chr>, dupe_count <int>,\n#   row_id <dbl>, lat_deg <dbl>, lon_deg <dbl>, New Georeferenced Column <chr>,\n#   water_source <chr>, water_source_clean <chr>, water_source_category <chr>,\n#   water_tech_clean <chr>, water_tech_category <chr>, status_clean <chr>,\n#   status <chr>, status_id <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   water_point_population <dbl>, local_population_1km <dbl>,\n#   crucialness_score <dbl>, pressure_score <dbl>, usage_capacity <dbl>, …\n\n\nRemarks :\nEach water point observation is unique as there is no duplication between the “shapeName” and “lat_lon_deg”.\n\n\n-- determine reference point :: “shapeName” / “clean_adm2”\n\nwp_reference <- (wp_joined$shapeName == wp_joined$clean_adm2)\n\nsummary(wp_reference)\n\n   Mode   FALSE    TRUE    NA's \nlogical   29856   65123      29 \n\n\nRemarks :\n\nThere are 29,856 “FALSE”, which is approximately 31% of LGA names mismatched between “shapeName” and “clean_adm2”.\n\nSince the geoBoundaries data is collected from government-published and reliable internet sources.6\n\nHence, the “shapeName” variable will be used throughout this study.\n\n\nThe 29 NA’s are 29 water points located beyond the LGA boundary, as shown in the plot below.\n\n6 Daniel et. al (2020) geoBoundaries: A global database of political administrative boundaries. PlosOne. https://doi.org/10.1371/journal.pone.0231866\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga) +\n  tm_polygons() +\n  tm_view(set.zoom.limits = c(5.5, 12)) +\n  \ntm_shape(filter(wp_joined, \n                is.na(wp_reference))) +\n  tm_dots(size = 0.05,\n          col = \"red\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\n3.4.3 Remove Water Point Outside LGA Boundary\n\n\n\n\n\n\n\nwp_joined1 <- wp_joined %>% \n  filter(\n    shapeName == clean_adm2 | shapeName != clean_adm2)\n\n\n\n\n\n\n3.4.4 Combine Unique Value\n\n\n\n\n\n\nThere are 9 unique values for “status_clean”. However, four (4) of them share the same context :\n\n“Non functional due to dry season”\n“Non-Functional due to dry season”\n“Abandoned”\n“Abandoned/Decommissioned”\n\nHence, the same context values need to combine into one unique value.\n\n3.4.4.1 combine values with the same context\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Non functional due to dry season\"] <- \"Non-Functional due to dry season\"\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Abandoned\"] <- \"Abandoned/Decommissioned\"\n\n\n\n-- review combined output\n\n\nShow the code\nunique(wp_joined1$status_clean)\n\n\n[1] \"Non-Functional\"                   NA                                \n[3] \"Functional\"                       \"Functional but needs repair\"     \n[5] \"Abandoned/Decommissioned\"         \"Functional but not in use\"       \n[7] \"Non-Functional due to dry season\"\n\n\n\n\n3.4.4.2 compute missing value :: “crucialness_score”\n\n\nShow the code\nsummary(wp_joined1$water_point_population == 0)\n\n\n   Mode   FALSE    TRUE    NA's \nlogical   88106    6336     537 \n\n\nShow the code\nsummary(wp_joined1$local_population_1km == 0)\n\n\n   Mode   FALSE    TRUE    NA's \nlogical   89985    4457     537 \n\n\nShow the code\nsummary(wp_joined1$crucialness_score == 0)\n\n\n   Mode   FALSE    NA's \nlogical   88106    6873 \n\n\nRemarks :\nThere will be 6,873 water points without crucialness score due to 0 value in 6,336 observations or missing value in 537 observations.\n\n\n3.4.4.3 save and read RDS file :: wp_joined1\nSave the updated values into wp_joined1 RDS file.\n\n\nShow the code\nwrite_rds(wp_joined1,\n          \"data/geodata/wp_joined1.rds\",\n          compress = \"xz\")\n\n\n\nwp_joined1 <- read_rds(\"data/geodata/wp_joined1.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#exploratory-data-analysis",
    "href": "class_project/project_2/Regionalisation_scca.html#exploratory-data-analysis",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.5 Exploratory Data Analysis",
    "text": "3.5 Exploratory Data Analysis\n\n3.5.1 Identify Outliers\n\n\n\n\n\n\n3.5.1.1 plot boxplot “pct_functional”\n\n\n\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_functional`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#543005\")\n\n\n\n\n\n\n3.5.1.2 plot boxplot “pct_nonFunctional”\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_nonFunctional`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#C16622FF\")\n\n\n\n\n\n\n\n3.5.1.3 plot boxplot “pct_unknown”\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_unknown`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#FFA319FF\")\n\n\n\n\n\nRemarks :\nAmong these 3 key categories of “status_clean”, “unknown” has the most outliers.\n\n\n\n\n\n3.5.2 Multi-plot Histogram\n\n\n\n\n\n\n3.5.2.1 plot histogram for “status_clean”\n\n\n\n\n\nShow the code\npctFunctional <- ggplot(data = wp_ngaTrans,\n                         aes(x = `pct_functional`))+\n  geom_histogram(bins=10,\n                 colour = \"black\",\n                 fill = \"#543005\")\n\npctNonFunctional <- ggplot(data = wp_ngaTrans,\n                         aes(x = `pct_nonFunctional`))+\n  geom_histogram(bins=10,\n                 colour = \"black\",\n                 fill = \"#C16622FF\")\n\npctUnknown <- ggplot(data = wp_ngaTrans,\n                     aes(x = `pct_unknown`))+\n  geom_histogram(bins = 10,\n                 colour = \"black\",\n                 fill = \"#FFA319FF\")\n\n\n\n\nShow the code\nggarrange(pctFunctional,pctNonFunctional,pctUnknown,\n          ncol = 2,\n          nrow = 2)\n\n\nadding dummy grobs"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#create-data-table-for-correlation-matrix-analysis",
    "href": "class_project/project_2/Regionalisation_scca.html#create-data-table-for-correlation-matrix-analysis",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.1 Create Data Table for Correlation Matrix Analysis",
    "text": "4.1 Create Data Table for Correlation Matrix Analysis\n\n\n\n\n\n\n\n\nShow the code\ncluster_vars <- wp_ngaTrans %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_unknown\", \n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban0\")\nhead(cluster_vars,5)\n\n\n  shapeName pct_functional pct_nonFunctional pct_unknown pct_handPump\n1 Aba North       41.17647          52.94118    5.882353    11.764706\n2 Aba South       40.84507          46.47887    9.859155     9.859155\n3    Abadam        0.00000           0.00000    0.000000     0.000000\n4     Abaji       40.35088          59.64912    0.000000    40.350877\n5      Abak       47.91667          50.00000    0.000000     8.333333\n  pct_mechPump pct_tapStand pct_uc300 pct_uc1000 pct_ucN1000 pct_uc250\n1     82.35294            0 17.647059   82.35294   17.647059         0\n2     87.32394            0 12.676056   87.32394   12.676056         0\n3      0.00000            0  0.000000    0.00000    0.000000         0\n4     59.64912            0 40.350877   59.64912   40.350877         0\n5     91.66667            0  8.333333   91.66667    8.333333         0\n  pct_urban0\n1   0.000000\n2   5.633803\n3   0.000000\n4  84.210526\n5  83.333333"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#visualise-correlation-matrix",
    "href": "class_project/project_2/Regionalisation_scca.html#visualise-correlation-matrix",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.2 Visualise Correlation Matrix",
    "text": "4.2 Visualise Correlation Matrix\nUsage of the code chunk below :\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\nThis plot allows to identify the pattern and the relationship in the matrix.\n\ncorrplot.mixed((cor(cluster_vars[,2:12])),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\nRemarks :\nFollowing are the pairs with strong correlation :\n\n\n\ncorrelation coefficients\nvariable_1\nvariable_2\n\n\n\n\n1.00\npct_mechPump\npct_uc1000\n\n\n0.99\npct_tapStand\npct_uc250\n\n\n0.99\npct_uc300\npct_ucN1000\n\n\n-0.91\npct_mechPump\npct_ucN1000\n\n\n-0.91\npct_uc1000\npct_ucN1000\n\n\n-0.90\npct_mechPump\npct_uc300\n\n\n-0.90\npct_uc300\npct_uc1000\n\n\n\n\n4.2.1 Replace Row ID with “shapeName”\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\n\n\n\n4.2.2 Trim High Correlation Variable and “shapeName”\n\ncluster_varsTrim <- cluster_vars %>%\n  select(-shapeName, -pct_ucN1000, -pct_mechPump)\n\n\n4.2.2.1 review trimmed data table\n\nsummary(cluster_varsTrim)\n\n pct_functional   pct_nonFunctional  pct_unknown      pct_handPump   \n Min.   :  0.00   Min.   :  0.00    Min.   :  0.00   Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 20.77    1st Qu.:  0.00   1st Qu.: 16.70  \n Median : 47.41   Median : 34.89    Median :  0.00   Median : 50.99  \n Mean   : 49.84   Mean   : 35.58    Mean   : 12.55   Mean   : 48.73  \n 3rd Qu.: 66.99   3rd Qu.: 50.00    3rd Qu.: 20.83   3rd Qu.: 77.78  \n Max.   :100.00   Max.   :100.00    Max.   :100.00   Max.   :100.00  \n  pct_tapStand       pct_uc300        pct_uc1000       pct_uc250      \n Min.   : 0.0000   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.: 0.0000   1st Qu.: 38.67   1st Qu.: 12.20   1st Qu.: 0.0000  \n Median : 0.0000   Median : 65.91   Median : 31.27   Median : 0.0000  \n Mean   : 0.5794   Mean   : 60.17   Mean   : 37.54   Mean   : 0.6114  \n 3rd Qu.: 0.0000   3rd Qu.: 87.02   3rd Qu.: 57.71   3rd Qu.: 0.0000  \n Max.   :32.8947   Max.   :100.00   Max.   :100.00   Max.   :32.8947  \n   pct_urban0    \n Min.   :  0.00  \n 1st Qu.: 57.27  \n Median : 86.45  \n Mean   : 72.71  \n 3rd Qu.:100.00  \n Max.   :100.00"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#hierarchy-clustering",
    "href": "class_project/project_2/Regionalisation_scca.html#hierarchy-clustering",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.1 Hierarchy Clustering",
    "text": "5.1 Hierarchy Clustering\nThere are four (4) main steps :\n\ncompute proximity matrix.\nassign data point to a cluster.\nmerge clusters based on similarity between clusters.\nupdate the distance matrix.\n\n\n5.1.1 Standardise Data\nAs shown in the 4.2.3.1, there are few variables with Max. different from others. Hence, standardisation will be required prior to further analysis.\n\n5.1.1.1 standardise with min-max method\n\n\n\n\n\n\n\n\nShow the code\nnga_wpStd <- normalize(cluster_varsWM)\nsummary(nga_wpStd)\n\n\n pct_functional   pct_nonFunctional  pct_handPump     pct_tapStand    \n Min.   :0.0000   Min.   :0.0000    Min.   :0.0000   Min.   :0.00000  \n 1st Qu.:0.3333   1st Qu.:0.2211    1st Qu.:0.1860   1st Qu.:0.00000  \n Median :0.4792   Median :0.3559    Median :0.5255   Median :0.00000  \n Mean   :0.5070   Mean   :0.3654    Mean   :0.4956   Mean   :0.01792  \n 3rd Qu.:0.6749   3rd Qu.:0.5082    3rd Qu.:0.7857   3rd Qu.:0.00000  \n Max.   :1.0000   Max.   :1.0000    Max.   :1.0000   Max.   :1.00000  \n   pct_uc300        pct_uc1000       pct_uc250        pct_urban0    \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.4098   1st Qu.:0.1250   1st Qu.:0.0000   1st Qu.:0.5922  \n Median :0.6645   Median :0.3193   Median :0.0000   Median :0.8717  \n Mean   :0.6120   Mean   :0.3818   Mean   :0.0189   Mean   :0.7395  \n 3rd Qu.:0.8712   3rd Qu.:0.5843   3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n5.1.1.2 standardise with Z-score method\n\n\nShow the code\nnga_wpZ <- scale(cluster_varsWM)\ndescribe(nga_wpZ)\n\n\nnga_wpZ \n\n 8  Variables      761  Observations\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n5.1.1.3 visualise distribution of standardised clustering variable\n\n\n\n\n\n\n-- functional water point\n\n\n\n\n\nShow the code\nfwp <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nfwp_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nfwp_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(fwp, fwp_std, fwp_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nfwp <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nfwp_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nfwp_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(fwp, fwp_std, fwp_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n-- water point deployed with handpump\n\n\nShow the code\nHP <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nHP_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nHP_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(HP, HP_std, HP_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nHP <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nHP_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nHP_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(HP, HP_std, HP_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n-- water point with 1000 users usage capacity\n\n\nShow the code\nuc1000 <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nuc1000_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nuc1000_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(uc1000, uc1000_std, uc1000_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nuc1000 <- ggplot(data=cluster_varsWM, \n             aes(x= `pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nuc1000_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nuc1000_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(uc1000, uc1000_std, uc1000_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Compute Proximity Matrix\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ndist( ) - stats - to compute the proximity distance matrix. Among euclidean, maximum, manhattan, canberra, binary and minkowski, euclidean is used to compute proxmat_euc.\n\n\n\n\n\nShow the code\nproxmat_euc <- dist(cluster_varsWM, method = 'euclidean')\n\n\n\n\n\n\n\n5.1.3 Compute Hierarchical Clustering\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhclust( ) - stats - to compute cluster with agglomeration method.\nggdendrogram( ) - ggdendro - to plot dendrogram with tools available in ggplot2.\n\n\n\n\n\nShow the code\nhieClust_warD <- hclust(proxmat_euc, method = 'ward.D')\nggdendrogram(hieClust_warD, \n             rotate = TRUE, \n             size = 2, \n             theme_dendro = FALSE)\n\n\n\n\n\n\n\n\n\n\n5.1.4 Determine Optimal Clustering Algorithm\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nagnes( ) - cluster - to get agglomerative coefficient of 4 clustering structure, namely “average”, “single”, “complete” and “ward”.\n\n\n\n\n\nShow the code\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(cluster_varsWM, method = x)$ac\n  }\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.9279582 0.8436340 0.9522302 0.9925607 \n\n\nRemarks :\n\nValue 1 indicate strongest clustering structure.\nWard’s method provides the strongest clustering structure. Therefore, Ward’s method to be used in subsequent analysis.\n\n\n\n\n\n\n5.1.5 Determine Optimal Clusters\nTo determine the optimal clusters to retain, following commons methods are tested :\n\nGap statistic\nElbow\nAverage Silhouette\n\n\n5.1.5.1 compute Gap Statistic method\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nclusGap( ) - cluster - to compute the gap statistic.\n\n\n\n\n\nShow the code\nset.seed(12345)\ngap_stat <- clusGap(cluster_varsWM, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 30, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = cluster_varsWM, FUNcluster = hcut, K.max = 30, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..30; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 30\n          logW    E.logW       gap      SE.sim\n [1,] 9.734621 10.172522 0.4379016 0.006794955\n [2,] 9.505006 10.027557 0.5225515 0.009642182\n [3,] 9.393978  9.964665 0.5706864 0.009793108\n [4,] 9.296511  9.908455 0.6119440 0.010275718\n [5,] 9.236470  9.863287 0.6268172 0.009691171\n [6,] 9.189562  9.824885 0.6353233 0.008901970\n [7,] 9.125006  9.790796 0.6657903 0.008404934\n [8,] 9.084283  9.761121 0.6768381 0.008496439\n [9,] 9.040338  9.735544 0.6952060 0.008676682\n[10,] 9.004177  9.712189 0.7080129 0.009295609\n[11,] 8.974390  9.690915 0.7165245 0.009172348\n[12,] 8.937223  9.671338 0.7341146 0.009097901\n[13,] 8.906566  9.652715 0.7461487 0.008938634\n[14,] 8.886013  9.635321 0.7493085 0.008729572\n[15,] 8.867219  9.619150 0.7519309 0.008660570\n[16,] 8.846458  9.604003 0.7575449 0.008777536\n[17,] 8.822817  9.589411 0.7665936 0.008923188\n[18,] 8.798796  9.575711 0.7769149 0.008933404\n[19,] 8.781868  9.562661 0.7807935 0.008798231\n[20,] 8.763468  9.550109 0.7866404 0.008617950\n[21,] 8.733828  9.538026 0.8041981 0.008531343\n[22,] 8.713311  9.526534 0.8132230 0.008375596\n[23,] 8.700513  9.515435 0.8149223 0.008254525\n[24,] 8.686137  9.504723 0.8185859 0.008186664\n[25,] 8.671941  9.494398 0.8224568 0.008222501\n[26,] 8.654069  9.484262 0.8301927 0.008247316\n[27,] 8.639269  9.474484 0.8352148 0.008227498\n[28,] 8.623773  9.464955 0.8411813 0.008149370\n[29,] 8.609164  9.455764 0.8466000 0.008027915\n[30,] 8.594454  9.446795 0.8523406 0.007881639\n\n\n\n\n\n\n\n-- visualise gap_stat\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nfviz_nbclust( ) - factoextra - to compute and visualise the Optimal Number of clusters.\n\n\n\n\n\nShow the code\nset.seed(12345)\nfviz_nbclust(nga_wpZ, \n             kmeans, \n             nstart = 25,  \n             method = \"gap_stat\", \n             nboot = 50)+\n  labs(subtitle = \"Gap statistic method\")\n\n\nWarning: did not converge in 10 iterations\n\nWarning: did not converge in 10 iterations\n\n\n\n\n\n\n5.1.5.2 compute and visualise Elbow method\n\n\nShow the code\nfviz_nbclust(nga_wpZ, kmeans, method = \"wss\") +\n    geom_vline(xintercept = 4, linetype = 2)+\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\n5.1.5.3 compute and visualise Silhouette method\n\n\nShow the code\nfviz_nbclust(nga_wpZ, kmeans, method = \"silhouette\")+\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\nRemarks :\nGiven the Elbow method, Silhouette method and Gap Statistic method, the 5-cluster by Silhouette method will be used for the rest of the study.\n\n\n\n\n\n\n5.1.5.4 interpret with Dendrogram\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nrect.hclust( ) - stats - to draw the dendrogram with a border around the selected clusters.\n\n\n\n\n\nShow the code\nplot(hieClust_warD, cex = 0.6)\nrect.hclust(hieClust_warD, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\n5.1.6 Visually-Driven Hierarchical Clustering Analysis\nThe data is loaded into a data frame, but it has to be a data matrix to plot the heatmap. Hence, the data frame will need to first transform into a matrix.\n\n5.1.6.1 transform data frame into matrix\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ndata.matrix( ) - base - to transform cluster_varsTrim data frame into a data matrix, and named it as nga_clustMat.\n\n\n\n\n\nShow the code\nnga_clustMat <- data.matrix(cluster_varsWM)\n\n\n\n\n\n\n\n5.1.6.2 plot interactive cluster heatmap\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nheatmaply( ) - heatmaply - to build an interactive cluster heatmap.\n\n\n\n\n\nShow the code\nheatmaply(normalize(nga_clustMat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria by Water Points\",\n          xlab = \"Water Points\",\n          ylab = \"Nigeria LGA\"\n          )\n\n\n\n\n\n\nRemarks :\nBased on the plot above, 5 clusters to be retained for further analysis.\n\n\n\n\n\n5.1.6.3 map the formed cluster\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncutree( ) - base - to derive a 5-cluster model, and named the output as groups.\n\n\n\n\n\nShow the code\ngroups <- as.factor(cutree(hieClust_warD, k=5))\n\n\n\n\n\n\n\n5.1.6.4 append groups to wp_ngaTrans\n\n\n\n\n\n\n\n\nShow the code\nnga_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups)) %>%\n  rename(`cluster`=`as.matrix.groups.`)\n\n\n\n\n\n\n\n5.1.6.5 plot choropleth map :: nga_clust.sf\n\n\n\n\n\n\n\n\nShow the code\nqtm(nga_clust.sf, \"cluster\")\n\n\n\n\n\nRemarks :\nThe choropleth map above shows the fragmented clusters by the used of non-spatial clustering algorithm (hierarchical cluster analysis method)."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-skater-approach",
    "href": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-skater-approach",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.2 Spatially Constrained Clustering :: SKATER Approach",
    "text": "6.2 Spatially Constrained Clustering :: SKATER Approach\nSKATER function only support sp objects in SpatialPolygonDataFrame. Hence, the wp_ngaTrans has to first transform into SpatialPolygonDataFrame before proceed further.\n\n6.2.1 Convert SF to SP Data Frame\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nas_Spatial( ) - sf - to convert wp_ngaTrans into nga_sp in a SP data frame.\n\n\n\n\n\nShow the code\nnga.sp <- as_Spatial(wp_ngaTrim)\n\n\n\n\n\n\n\n6.2.2 Compute Neighbour List\n\n\n\n\n\n\nFirst compute the neighbour list before plot it.\n\n6.2.2.1 compute neighbour list from polygon list\n\n\n\n\n\n\nUsage of the code chunk below :\npoly2nb( ) - spdep - to compute the neighbours list from polygon list.\n\n\n\n\n\nShow the code\nnga.nb <- poly2nb(nga.sp, queen = TRUE)\n\nsummary(nga.nb)\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nRemarks :\nThere is no LGA without link.\n\n6.2.2.2 plot Neighbour List by Centroid Node\nUsage of the code chunk below : plot the boundary first before the neighbour list object to avoid any region from being clipped away.\n\n\nShow the code\nplot(nga.sp, \n     border = grey(.5))\n\nplot(nga.nb, \n     coordinates(nga.sp), \n     col = \"blue\", \n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n6.2.3 Compute Minimum Spanning Tree (MST)\n\n\n\n\n\n\nTo find a minimum path connecting all nodes in a graph, a minimum spanning tree with minimum weight than all other spanning trees to be used in subsequent steps.\n\n6.2.3.1 calculate edge costs\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the cost of each edge which is the distance between nodes.\n\n\n\n\n\nShow the code\nedge_cost <- nbcosts(nga.nb, wp_stdMM)\n\n\n\n\n6.2.3.2 specify spatial weight\n\n\n\n\n\n\nnb2listw( ) - spdep - to specify edge_cost as the spatial weights. Set the “style” to “B” to ensure the cost values are not row-standardised.\n\n\n\n\n\nShow the code\nnga.w <- nb2listw(nga.nb,\n                  edge_cost,\n                  style = \"B\")\nsummary(nga.w)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1       S2\nB 761 579121 1902.565 2276.999 23657.73\n\n\n\n\n6.2.3.3 compute MST\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the minimum spanning tree.\n\n\n\n\n\nShow the code\nnga_minSpanT <- mstree(nga.w)\n\n\n\n\n6.2.3.4 review class and dimension of the computed MST\n\n\nShow the code\nclass(nga_minSpanT)\n\n\n[1] \"mst\"    \"matrix\"\n\n\n\n\nShow the code\ndim(nga_minSpanT)\n\n\n[1] 760   3\n\n\n\n\nShow the code\nhead(nga_minSpanT)\n\n\n     [,1] [,2]       [,3]\n[1,]  109  517 0.11534401\n[2,]  517  685 0.12322370\n[3,]  685  678 0.10131893\n[4,]  685   46 0.13142212\n[5,]  517  229 0.15873997\n[6,]  229  260 0.08560336\n\n\n\n\n6.2.3.5 plot MST Neighbour List\n\n\nShow the code\nplot(nga.sp, border = gray(.5))\n\nplot.mst(nga_minSpanT,\n         coordinates(nga.sp), \n         col = \"blue\", \n         cex.lab = 0.7, \n         cex.circles = 0.005, \n         add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n6.2.4 Compute Spatially Constrained Cluster\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nskater( ) - spdep - to compute the spatially constrained cluster.\nnote: ncuts = number of clusters - 1\n\n\n\n\n\nShow the code\nclust5 <- spdep::skater(edges = nga_minSpanT[,1:2],\n                        data = cluster_varsTech2,\n                        method = \"euclidean\",\n                        ncuts = 4)\nstr(clust5)\n\n\nList of 8\n $ groups      : num [1:761] 5 5 2 5 2 4 4 2 3 3 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:256] 87 668 49 683 695 229 517 109 164 32 ...\n  .. ..$ edge: num [1:255, 1:3] 651 639 761 735 660 429 482 679 146 112 ...\n  .. ..$ ssw : num 10261\n  ..$ :List of 3\n  .. ..$ node: num [1:288] 324 209 208 556 197 408 458 62 88 752 ...\n  .. ..$ edge: num [1:287, 1:3] 209 208 197 430 92 30 428 3 508 729 ...\n  .. ..$ ssw : num 12090\n  ..$ :List of 3\n  .. ..$ node: num [1:80] 332 362 715 101 605 566 22 524 187 288 ...\n  .. ..$ edge: num [1:79, 1:3] 551 25 589 590 549 10 42 287 155 187 ...\n  .. ..$ ssw : num 3447\n  ..$ :List of 3\n  .. ..$ node: num [1:77] 363 81 14 567 27 171 346 28 174 212 ...\n  .. ..$ edge: num [1:76, 1:3] 567 14 81 346 50 174 48 212 531 363 ...\n  .. ..$ ssw : num 3356\n  ..$ :List of 3\n  .. ..$ node: num [1:60] 102 546 33 282 325 369 538 201 720 525 ...\n  .. ..$ edge: num [1:59, 1:3] 611 574 358 600 620 358 359 2 135 538 ...\n  .. ..$ ssw : num 1933\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 39075\n $ ssw         : num [1:5] 39075 34440 33199 31933 31088\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:761] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\n6.2.4.1 tabulate cluster assignment\n\n\nShow the code\nccs5 <- clust5$groups\ntable(ccs5)\n\n\nccs5\n  1   2   3   4   5 \n256 288  80  77  60 \n\n\n\n\n6.2.4.2 plot the pruned tree\n\n\nShow the code\nplot(nga.sp, border = gray(.5))\nplot(clust5, \n     coordinates(nga.sp), \n     cex.lab = .7,\n     groups.colors = c(\"red\",\"green\",\"blue\", \"brown\"),\n     cex.circles = 0.005, \n     add = TRUE)\n\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n6.2.5 Visualise SKATER Clusters in Choropleth Map\n\n\n\n\n\n\n\n\nShow the code\ngroups_mat <- as.matrix(clust5$groups)\n\nnga_spClust.sf <- cbind(nga_clust.sf, \n                        as.factor(groups_mat)) %>%\n  rename(`sp_cluster`=`as.factor.groups_mat.`)\n\n\nTo compare the output of hierarchical clustering and spatially constrained hierarchical clustering :\n\n\nShow the code\nclusGeo_SKAT.map <- tm_shape(nga_spClust.sf) +\n  tm_fill(col = \"sp_cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with SKATER Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_SKAT.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-clustgeo-method",
    "href": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.3 Spatially Constrained Clustering :: ClustGeo Method",
    "text": "6.3 Spatially Constrained Clustering :: ClustGeo Method\n\n6.3.1 Perform Ward-like Hierarchical Clustering\n::: {.callout-warning .column-page-right appearance=“simple” icon=“false”} ::: {.callout-alert appearance=“simple” icon=“false”} Usage of the code chunk below :\nhclustgeo( ) - ClustGeo - to perform a typical Ward-like hierarchical clustering. :::\n\n\nShow the code\nproxmat_ngc <- dist(wp_stdMM, method = 'euclidean')\n\n\n\n\nShow the code\nnonGeo_clust <- hclustgeo(proxmat_ngc)\nplot(nonGeo_clust, cex = 0.5)\nrect.hclust(nonGeo_clust, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n6.3.1.1 visualise the formed clusters\n\n\n\n\n\n\n\n\nShow the code\ngroups_ngc <- as.factor(cutree(nonGeo_clust, k = 5))\n\n\n\n\nShow the code\nnga_ngeo_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups_ngc)) %>%\n  rename(`cluster` = `as.matrix.groups_ngc.`)\n\n\n\n\nShow the code\nqtm(nga_ngeo_clust.sf, \"cluster\")\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Perform Spatially Constrained Hierarchical Clustering\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_distance( ) - sf - to derive the spatial distance matrix before perform spatially constrained hierarchical clustering.\nas.dist( ) - stats - to convert the data frame into matrix.\n\n\n\n\n\nShow the code\ndist <- st_distance(wp_ngaTrim, wp_ngaTrim)\ndist_mat <- as.dist(dist)\n\n\n\n6.3.2.1 determine alpha value\n\n\n\n\n\n\nchoicealpha( ) - psych - to determine a suitable value for the mixing parameter alpha.\n\n\n\n\n\nShow the code\ncr <- choicealpha(\n  proxmat_ngc, \n  dist_mat, \n  range.alpha = seq(0, 1, 0.1), \n  K = 5, \n  graph = TRUE)\n\n\n\n\n\n\n\n\nRemarks :\nWith reference to the plot above, alpha = 0.5 to be used to perform spatially constrained hierarchical clustering.\n\n\n6.3.2.2 compute spatially constrained hierarchical clustering\n\n\nShow the code\nclustG <- hclustgeo(proxmat_ngc, \n                    dist_mat, \n                    alpha = 0.5)\n\n\n\n\n6.3.2.3 derive cluster object\n\n\nShow the code\ngroups_cg <- as.factor(cutree(clustG, k = 5))\n\n\n\n\n6.3.2.4 combine groups_cg with wp_ngaTrim\n\n\nShow the code\nwp_nga_clustG <- cbind(wp_ngaTrim, as.matrix(groups_cg)) %>%\n  rename(`cluster` = `as.matrix.groups_cg.`)\n\n\n\n\n6.3.2.5 plot delineated spatially constrained cluster\n\n\nShow the code\nqtm(wp_nga_clustG, \"cluster\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#visual-interpretation-of-clusters",
    "href": "class_project/project_2/Regionalisation_scca.html#visual-interpretation-of-clusters",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.4 Visual Interpretation of Clusters",
    "text": "5.4 Visual Interpretation of Clusters\n\n5.4.1 Visualise Individual Clustering Variable\n\n5.4.1.1 plot boxplot\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = nga_ngeo_clust.sf,\n       aes(x = cluster, y = pct_functional)) +\n  geom_boxplot()\n\n\n\n\n\nRemarks :\nThe boxplot reveals Cluster 5 displays the highest mean of functional water points. This is followed by Cluster 1, 3, 2, and 4.\n\n\n\n\n\n\n5.4.2 Visualise Multivariate\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nggparcoord( ) - GGally - to reveal clustering variables by cluster.\n\n\n\n\n\nShow the code\nnga_ngeo_clust.sf1 <- nga_ngeo_clust.sf %>%\n  select(\"shapeName\", \n         \"pct_functional\", \n         \"pct_nonFunctional\", \n         \"pct_unknown\", \n         \"pct_handPump\", \n         \"pct_tapStand\", \n         \"pct_uc300\", \n         \"pct_uc1000\", \n         \"pct_uc250\", \n         \"pct_urban0\",\n         \"cluster\")\n         \nhead(nga_ngeo_clust.sf1,3)\n\n\nSimple feature collection with 3 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6.778522 ymin: 5.052192 xmax: 7.402708 ymax: 9.232154\nProjected CRS: Minna / Nigeria West Belt\n  shapeName pct_functional pct_nonFunctional pct_unknown pct_handPump\n1 Aba North       41.17647          52.94118           0    11.764706\n2 Aba South       40.84507          49.29577           0     9.859155\n3     Abaji       40.35088          59.64912           0    40.350877\n  pct_tapStand pct_uc300 pct_uc1000 pct_uc250 pct_urban0 cluster\n1            0  17.64706   82.35294         0   0.000000       1\n2            0  12.67606   87.32394         0   5.633803       1\n3            0  40.35088   59.64912         0  84.210526       2\n                        geometry\n1 MULTIPOLYGON (((7.401109 5....\n2 MULTIPOLYGON (((7.334479 5....\n3 MULTIPOLYGON (((7.045872 9....\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggparcoord(data = nga_ngeo_clust.sf,\n           columns = c(2:19),\n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Variables by Cluster\") +\n  facet_grid(~ cluster, scales = \"fixed\") + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\n\n\n\n\n\n5.4.3 Compute Summary Statistics\n\n\n\n\n\n\n\n\nShow the code\nnga_ngeo_clust.sf %>% \n  st_set_geometry(NULL) %>%\n  group_by(cluster) %>%\n  summarise(mean_pct_functional = mean(pct_functional),\n            mean_pct_nonFunctional = mean(pct_nonFunctional),\n            mean_pct_unknown = mean(pct_unknown),\n            mean_pct_handPump = mean(pct_handPump), \n            mean_pct_tapStand = mean(pct_tapStand), \n            mean_pct_uc300 = mean(pct_uc300), \n            mean_pct_uc1000 = mean(pct_uc1000), \n            mean_pct_uc250 = mean(pct_uc250), \n            mean_pct_urban0 = mean(pct_urban0))\n\n\n# A tibble: 5 × 10\n  cluster mean_pct_fun…¹ mean_…² mean_…³ mean_…⁴ mean_…⁵ mean_…⁶ mean_…⁷ mean_…⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 1                 67.9    20.5       0    11.4  0.514     22.8    76.7  0.535 \n2 2                 45.0    42.0       0    56.5  1.23      68.6    30.1  1.26  \n3 3                 44.7    51.4       0    12.3  0.370     15.4    84.2  0.415 \n4 4                 35.0    32.6       0    33.6  0.383     62.5    37.0  0.416 \n5 5                 72.9    26.2       0    88.5  0.0587    89.6    10.3  0.0914\n# … with 1 more variable: mean_pct_urban0 <dbl>, and abbreviated variable names\n#   ¹​mean_pct_functional, ²​mean_pct_nonFunctional, ³​mean_pct_unknown,\n#   ⁴​mean_pct_handPump, ⁵​mean_pct_tapStand, ⁶​mean_pct_uc300, ⁷​mean_pct_uc1000,\n#   ⁸​mean_pct_uc250"
  },
  {
    "objectID": "class_project/project_1/spatial_weights.html",
    "href": "class_project/project_1/spatial_weights.html",
    "title": "Geospatial Analytics for Social Good",
    "section": "",
    "text": "The main aim of this project is to use the water point related data from rural areas at the water point or small water scheme level available from the WPdx Data Repository to explore the applicable geospatial analysis tools in water resources management for Nigeria.\n\n\nTo address the issue of providing clean and sustainable water supply to the rural community.\n\n\n\nApply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Not Functional water points.\n\n\n\nBelow are the list of tasks to be completed :\n\nImport the shapefile into R and save it in a simple feature data frame format with appropriate sf method.\nnote : Nigeria (NGA) has 3 Projected Coordinate Systems, EPSG: 26391, 26392, and 26303.\nDerive the proportion of functional and non-functional water point at LGA level with appropriate tidyr and dplyr methods,\nCombine the geospatial and aspatial data frame into simple feature data frame.\nPerforme outliers / clusters analysis by using appropriate local measures of spatial association methods.\nPerform hotspot areas analysis by using appropriate local measures of spatial association methods.\nPlot 2 main types of maps below :\n\nThematic Mapping\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\nAnalytical Mapping\nPlot hotspot areas and outliers / clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "class_project/project_1/spatial_weights.html#r-package-required",
    "href": "class_project/project_1/spatial_weights.html#r-package-required",
    "title": "Geospatial Analytics for Social Good",
    "section": "2. R PACKAGE REQUIRED",
    "text": "2. R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\npacman package : to install and load the following R packages into R environment.\nsf package :\n\nst_read( ) = import and save the shapefiles into simple feature data table.\nst_geometry( ) = get geometry from an sf object.\nst_centroid( ) - takes a polygon or multipolygon and returns the geometric center of the bounding box of the polygon or multipolygon as a point.\n\ntidyverse package :\n\ndplyr:\n\nfilter( ) - extract water point records of Nigeria.\nglimpse( ) - list all columns in a data frame.\nmutate( ) - edit variables’ values.\n\nreadr :\n\nwrite_rds( ) - save the extracted sf data table into an output file in rds data format.\n\nstringr :\n\nstr_replace( ) - replace some characters with some other characters in a string.\n\n\ntmap package :\n\nqtm( ) - to plot quick thematic map.\ntm_shape( ) - specify the shape object.\n\nspdep package :\n\npoly2nb( ) - compute contiguity weight matrices for the study area.\nnb2listw( ) - supplements a neighbours list with spatial weights for the chosen coding scheme.\nmoran.test( ) - for spatial autocorrelation using a spatial weights matrix in weights list form.\nmoran.mc( ) - for permutation test with Moran’s I statistic.\ngeary.test( ) - for spatial autocorrelation using a spatial weights matrix in weights list form.\ngeary.mc( ) - for permutation test with Geary’s C statistic.\nsp.correlogram( ) - spatial correlograms for Moran’s I and the autocorrelation coefficient.\nlocalmoran( ) - to calculate local spatial statistics for each zone based on the spatial weights object used.\nmoran.plot( ) - plot of spatial data against its spatially lagged values.\nknearneigh ( ) - return matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nknn2nb( ) - convert knn object to a neighbours list of class nb.\nnbdist( ) - return the length of neighbour relationship edges.\ndnearneigh( ) - derive distance-based weight matrices.\nlocalG( ) - calculate local spatial statistic G for each zone based on the spatial weights object used.\n\nfunModeling package :\n\nfreq( ) = retrieves the frequency and percentage for input.\n\njanitor package :\n\nget_dupes( ) = search duplicated records during data wrangling.\n\n\n\n2.1 Load R Packages into R Environment\nUse the code chunk below.\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling, janitor, maps)"
  },
  {
    "objectID": "class_project/project_1/spatial_weights.html#geospatial-data",
    "href": "class_project/project_1/spatial_weights.html#geospatial-data",
    "title": "Geospatial Analytics for Social Good",
    "section": "3. GEOSPATIAL DATA",
    "text": "3. GEOSPATIAL DATA\n\n3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n\n\n3.2 Import Aspatial Data - Water Point Shapefile\nUse the code chunk below.\nNote :\n\nst_read( ) to import geo_export data set.\n#| eval: false to display the code chunks without the output.\n\n\nwp <- st_read(dsn = \"/jephOstan/ISSS624/class_project/project_1/data/geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\n\n3.2.1 Review Imported Aspatial Shapefile\n\n\n-- retrieve geometry list-column\nUse the code chunk below.\nNote :\nst_geometry( ) to get the geometry summary of a class data.frame or sf object.\n\nst_geometry(wp)\n\n\n\n-- identify associated attribute\nUse the code chunk below.\nNote :\nglimpse( ) to swtich columns to rows, features to columns.\n\nglimpse(wp)\n\n\n\nAvoid performing transformation \nif going to use st_intersects() \nin geoprocessing stage. This is \nbecause st_intersects() only \nworks correctly if the geospatial \ndata are in geographic coordinate \nsystem (i.e. wgs84)\n\n3.2.2 Write “wp” in RDS Format\nUse the code chunk below.\nNotes :\n\nwrite_rds( ) to save the extracted sf data table, i.e. “wp” into an output file in rds data format.\n\nThe output file is called “wp_nga.rds” and it is saved in geodata sub-folder.”\n\nwrite_rds(wp, \"/jephOstan/ISSS624/class_project/project_1/data/geodata/wp_nga.rds\")\n\n\n\n\n3.3 Import Geospatial Data - Nigeria LGA Boundary Data\nUse the code chunk below.\nNotes :\n\nst_read( ) to import geo_export data set.\n\n\nnga <- st_read(dsn = \"/jephOstan/ISSS624/class_project/project_1/data/geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\n\n3.3.1 Review Imported Geospatial Shapefile\n\n\n-- retrieve geometry list-column\nUse the code chunk below.\nNote :\nst_geometry( ) to get the geometry summary of a class data.frame or sf object.\n\nst_geometry(nga)\n\n\n\n-- identify associated attribute\nUse the code chunk below.\nNote :\nglimpse( ) to swtich columns to rows, features to columns.\n\nglimpse(nga)\n\n\n\n\n3.4 Data Wrangling and Exploratory Data Analysis (EDA)\n\n3.4.1 Recode NA Values into String\nUse the code chunk below.\nNote :\nglimpse( ) to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"/jephOstan/ISSS624/class_project/project_1/data/geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n3.4.2 Search Duplicate Rows\nUse the code chunk below.\nNote :\nget_dupes( ) to review rows that have duplicates. Specify the data.frame and the variable combination to search for duplicates and get back the duplicated rows.\nAssumption :\nFor the same value of clean_adm2, each observation has unique pair of lat_deg and lon_deg.\n\nduplicates <- wp_nga %>% \n                janitor::get_dupes(clean_adm2,lat_deg,lon_deg)\n\nduplicates\n\n\n\n\n3.4.3 Exploratory Data Analysis\nBefore proceed to analysis stage, sense the data with EDA.\nUse the code chunk below.\nNote :\nfreq( ) to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\nRemarks :\nDuring the first round of EDA, noticed there are 2 values of “Non-functional due to dry season”.\n\nUse mutate( ) with str_replace to combine both values, thereafter update the dataset.\n\nwp_nga <- wp_nga %>%\n  mutate(status_cle = str_replace(status_cle,\"Non functional due to dry season\"  ,\"Non-Functional due to dry season\"))\n\n\n\n3.4.4 Explore Variables and Values for “Non-Functional”\nUse the code chunk below.\nNote :\nfilter( ) to get the data tables based on values associated with “Non-Functional” under “status_clean” variable.\n\n\n-- retrieve based on “Non-Functional”\n\nwp_nfc <- filter(wp_nga, status_cle == \"Non-Functional\")\nwp_nfc\n\n\n\n-- retrieve based on “Non-Functional due to dry season”\n\nwp_nfcD <- filter(wp_nga, status_cle == \"Non-Functional due to dry season\")\nwp_nfcD\n\nAccording to the variables’ definition from the waterpointdata.org :\n\nusage_cap (usage_capacity) = recommended maximum users per water point :\n\n1,000 people per mechanised well\n500 people per hand pump / undefined shallow well (all hand pumps)\n400 people per open hand well (rope & bucket)\n250 people per tap (tapstand, kiosk, rainwater catchment)\n\nlocal_popu (local_population_1km) = number of people living within a 1km radius of the water point.\nserved_pop (water_point_population) = number of people currently or potentially served by a specific water point.\n\nFor non-functional water points, this number represents users who would gain access if the point was functional.\n\npressure (pressure_score) = the pressure score ( 0 - 100% ) is calculated based on the ratio of the number of people assigned to that water point over the theoretical maximum population which can be served based on the technology.\n\nIf a point is serving less than the recommended maximum, the pressure score will be less than 100% (i.e., 250/500 = 0.5).\nIf serving more than the recommended maximum, the pressure score will be over 100% (i.e. 750/500 = 150%).\n\ncrucialness (crucialness_score) = the crucialness score ( 0 - 100% ) is the ratio is likely current users to the total local population within a 1km radius of the water point.\n\nFor non-functional water points, the crucialness score shows how important the water point would be if it were to be rehabilitated.\n\n\n\n\n3.4.5 Plot Preliminary Visualisation for Non-Functional Water Points\n\nplot(wp_nfc[\"crucialnes\"])\n\nRemarks :\n\nVisually, noticeable of clusters.\n\nThis suggests new installation or more resources required to upgrade or rehabilitate the existing facility in order to support population for those light.\n\n\n\n\n3.4.6 Plot Preliminary Visualisation for Non-Functional due to Dry Season Water Points\n\nplot(wp_nfcD[\"crucialnes\"])\n\n\n\n3.4.7 Plot Preliminary Visualisation for Distribution of Urban & Non-Urban\n\nplot(wp_nga[\"is_urban\"])\n\n\n\n\n\n3.5 Water Point Data Extraction\n\n3.5.1 Extract Non-functional Water Point\nUse the code chunk below.\nNote :\nfilter( ) to get water points that associated to the variation of “Non-Functional”.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n3.5.2 Extract Functional Water Point\nUse the code chunk below.\nNote :\nfilter( ) to get water points that associated to the variation of “Functional”.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n3.5.3 Extract Unknown Water Point\nUse the code chunk below.\nNote :\nfilter( ) to get water points that associated to the variation of “Unknown”.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n3.5.4 Perform Point-In-Polygon Count\nUse the code chunk below.\n\nnga_wp <- nga %>% \n  mutate(`total_wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt_functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt_nonFunctional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt_unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n3.5.5 Add New Variables\nUse the code chunk below.\nNote :\nmutate( ) to add “pct_functional” and “pct_non-functional”.\nwrite_rds( ) to save the sf data table into rds format.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt_functional`/`total_wpt`) %>%\n  mutate(`pct_non-functional` = `wpt_nonFunctional`/`total_wpt`)\n\n\nwrite_rds(nga_wp, \"/jephOstan/ISSS624/class_project/project_1/data/geodata/nga_wp.rds\")\n\n\n\n3.5.6 Spatial Distribution of Water Points Visualisation\n\nnga_wp <- read_rds(\"/jephOstan/ISSS624/class_project/project_1/data/geodata/nga_wp.rds\")\n\n\ntotal <- qtm(nga_wp, \"total_wpt\") + \n  tm_layout(legend.height = 0.3, legend.width = 0.3)\n\nwp_functional <- qtm(nga_wp, \"wpt_functional\") +\n  tm_layout(legend.height = 0.3, legend.width = 0.3)\n\nwp_nonfunctional <- qtm(nga_wp, \"wpt_nonFunctional\") + \n  tm_layout(legend.height = 0.3, legend.width = 0.3)\n\nunknown <- qtm(nga_wp, \"wpt_unknown\") + tm_layout(legend.height = 0.3, legend.width = 0.3)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1.5, ncol=2)\n\n\n\n\n\n\n\n3.6 Exploratory Spatial Data Analysis\nDetermine autocorrelation for non-functional water points data.\n\n3.6.1 Contiguity Weight Matrices (CWM)\nCompute Contiguity Weight Matrices (CWM) first before compute the Global Spatial Autocorrelation statistics.\n\n\n3.6.1.1 compute Contiguity Weight Matrices\nDetermine the adjacency with 2 methods, Queen and Rook methods and derive Wq and Wr from the methods respectively.\n\n\n-- compute QUEEN contiguity based neighbours\nUse the code chunk below.\nNote :\npoly2nb( ) to return a list of first order neighbours based on Queen criteria.\n\nnga_wpQ <- poly2nb(nga_wp, queen=TRUE)\nsummary(nga_wpQ)\n\n\n\n-- compute ROOK contiguity based neighbours\nUse the code chunk below.\nNote :\npoly2nb( ) to return a list of first order neighbours based on Queen criteria.\n\nnga_wpR <- poly2nb(nga_wp, queen = FALSE)\nsummary(nga_wpR)\n\n\n\n-- Compare Queen and Rook Contiguity Matrices\n\n\n\n\n\n\n\n\n\nWq\nWr\n\n\n\n\nNumber of regions without links\n1 link (#86)\n1 link (#86)\n\n\nNumber of regions with the most links\n14 links (#508)\n14 links (#508)\n\n\nNumber of regions with 1 link\n#138, #560\n#138, #560\n\n\nAverage number of links per region\n5.736\n5.711\n\n\n\nBoth methods have relatively similar performance, only have 1 region without links.\n\n\n\n3.6.1.2 compute Distance-Based Neighbours\nIdentify neighbours of region points by Euclidean distance with a distance band.\n\n\n-- compute “coords”\nUse the code chunk below.\nNote :\ncbind( ) to combine both longitude and latitude\n\nlongitude <- wp_nga$lon_deg\nlatitude <- wp_nga$lat_deg\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n\n\n-- determine the upper limit for distance band\nUse the code chunk below.\nNote :\nknn2nb( ) to convert knn objects that returned by knearneigh( ) into a neighbours list of class nb.\nnbdist( ) to return the length of neighbour relationship edges.\nunlist( ) to remove the list structure of the returned object.\n\nk3 <- knn2nb(knearneigh(coords,k = 3))\nk3dists <- unlist(nbdists(k3, coords, longlat = TRUE))\nsummary(k3dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13.86   34.82   42.98   45.71   56.00   94.18 \n\n\n\nupper_threshold3 <- unlist(nbdists(k3, coords, longlat = TRUE))\n\nRemarks :\nThe largest first nearest neighbour distance is 39.085 km, using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nk5 <- knn2nb(knearneigh(coords,k = 5))\nk5dists <- unlist(nbdists(k5, coords, longlat = TRUE))\nsummary(k5dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13.86   39.06   50.48   54.58   65.14  147.41 \n\nupper_threshold5 <- unlist(nbdists(k5, coords, longlat = TRUE))\n\n\nk6 <- knn2nb(knearneigh(coords,k = 6))\nk6dists <- unlist(nbdists(k6, coords, longlat = TRUE))\nsummary(k6dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13.86   41.11   52.45   59.26   72.44  192.60 \n\nupper_threshold6 <- unlist(nbdists(k6, coords, longlat = TRUE))\n\n\nk8 <- knn2nb(knearneigh(coords,k = 8))\nk8dists <- unlist(nbdists(k8, coords, longlat = TRUE))\nsummary(k8dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13.86   44.66   58.06   69.16   84.49  267.15 \n\nupper_threshold8 <- unlist(nbdists(k8, coords, longlat = TRUE))\n\n\n\n-- compute fixed distance weight matrix\nUse the code chunk below.\nNote :\ndnearneigh( ) to derive distance-based weight matrices.\n\nwm_d39 <- dnearneigh(coords, 0, upper_threshold3, longlat = TRUE)\nwm_d39\n\n\nwm_d40 <- dnearneigh(coords, 0, upper_threshold5, longlat = TRUE)\nwm_d40\n\n\nwm_d43 <- dnearneigh(coords, 0, upper_threshold6, longlat = TRUE)\nwm_d43\n\n\nwm_d45 <- dnearneigh(coords, 0, upper_threshold8, longlat = TRUE)\nwm_d45\n\n\n\n3.6.1.3 list all fixed distance weight matrix\n\nstr(wm_d43)\n\n\n\n-- plot Fixed Distance Weight Matrix\n\nplot(nga_wp$geometry, border=\"lightgrey\")\nplot(wm_d43, coords, add = TRUE)\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08)\n\n\n\n\n\n\n\n\n\n\n\n\nWd=3\nWd=5\nWd=6\nWd=8\n\n\n\n\nLargest first nearest neighbour distance\n39.08489\n40.08029\n42.28107\n44.87575\n\n\n\n\n\n3.6.1.4 compute Adaptive Distance Weight Matrix\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 49 \nNumber of nonzero links: 294 \nPercentage nonzero weights: 12.2449 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\n\n-- plot Adaptive Distance Weight Matrix\n\nplot(nga_wp$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 5, cex = 0.3, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.6.2 Global Spatial Autocorrelation (GSA)\n\n\n3.6.2.1 compute row-standardised weights matrix\nUse the code chunk below.\nNote :\nnb2listw( ) to assign weights to each neighboring polygon. Each neighboring polygon will be assigned equal weight by explore with different input for style i.e. “W”, “B” and “C”.\n\nwm_q <- poly2nb(nga_wp, queen = TRUE)\nwm_q\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\n\n\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE\n\nngaWp_rswmQW <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nngaWp_rswmQW\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\nset.ZeroPolicyOption(TRUE)\n\n[1] TRUE\n\nngaWp_rswmQB <- nb2listw(wm_q, style = \"B\", zero.policy = TRUE)\nngaWp_rswmQB\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0   S1     S2\nB 773 597529 4440 8880 112368\n\n\n\nset.ZeroPolicyOption(TRUE)\n\n[1] TRUE\n\nngaWp_rswmQC <- nb2listw(wm_q, style = \"C\", zero.policy = TRUE)\nngaWp_rswmQC\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: C \nWeights constants summary:\n    n     nn  S0       S1      S2\nC 773 597529 773 269.1572 3405.93\n\n\nRegardless of which input for the style, all have the same result of 1 region without links while the average number of links is 5.736434.\n\n\n3.6.2.2 GSA : Moran’s I method\nUse the code chunk below.\nNote :\nmoran.test( ) to calculates the Moran’s I Index value and both a a z-score and p-value to evaluate the significance of that Index.\nmoran.mc( ) to do a permutation test to evaluate the rank of the observed statistic in relation to the statistic of simulated values.\n\nmoran.test(nga_wp$wpt_nonFunctional, listw = ngaWp_rswmQW, zero.policy = TRUE, na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$wpt_nonFunctional  \nweights: ngaWp_rswmQW  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 20.043, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.433932927      -0.001295337       0.000471516 \n\n\n\nset.seed(1234)\nbperm_m = moran.mc(nga_wp$wpt_nonFunctional,\n                 listw = ngaWp_rswmQW,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm_m\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$wpt_nonFunctional \nweights: ngaWp_rswmQW  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43393, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nRemarks :\n\nThe value for both actual and random Moran’s I almost the same, i.e. 0.43393, which means the non-functional water points are positively autocorrelated with the data spatially cluster.\nThere is a statistical significant with p-value (2.2e-16) < 0.001, smaller than the alpha value to support the rejection of null hypothesis for the test i.e. the non-functional water points are not randomly spatial.\n\n\n\n-- visualise Monte Carlo Moran’s I\nUse the code chunk below.\nNote :\nhist( ) to examine the simulated Moran’s I test statistics by plotting the distribution of the statistical values as a histogram.\n\nhist(bperm_m$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n3.6.2.3 GSA : Geary’s C method\n\ngeary.test(nga_wp$wpt_nonFunctional, listw=ngaWp_rswmQW)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$wpt_nonFunctional \nweights: ngaWp_rswmQW \n\nGeary C statistic standard deviate = 14.457, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6170907765      1.0000000000      0.0007014859 \n\n\n\nset.seed(1234)\nbperm_c = geary.mc(nga_wp$wpt_nonFunctional,\n               listw = ngaWp_rswmQW, \n               nsim = 999)\nbperm_c\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$wpt_nonFunctional \nweights: ngaWp_rswmQW \nnumber of simulations + 1: 1000 \n\nstatistic = 0.61709, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nRemarks :\n\nThe value for both actual and random Geary’s C almost the same, i.e. 0.61709, which means the non-functional water points are positively autocorrelated with the data spatially cluster.\nThere is a statistical significant with p-value (2.2e-16) < 0.001, smaller than the alpha value to support the rejection of null hypothesis for the test i.e. the non-functional water points are not randomly spatial.\nThe Geary’s C value is greater than the Moran’s I value. However, since both values are less than 1, the observations tend to be clustered and similar.\n\n\n\n\n\n3.7 Cluster and Outlier Analysis\nUse Local Indicators for Spatial Association (LISA) method, especially local Moran’s I to detect cluster and / or outlier.\n\n3.7.1 Compute Local Moran’s I\nUse the code chunk below.\n\nfips <- order(nga_wp$shapeName)\nlocalMI <- localmoran(nga_wp$wpt_nonFunctional, ngaWp_rswmQW)\nhead(localMI)\n\n           Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.32365786 -9.995243e-04 1.924638e-01 -0.73547576     0.46204980\n2  0.07000542 -4.092463e-05 1.053077e-02  0.68258288     0.49487045\n3  1.25819985 -1.627684e-03 4.181728e-01  1.94819847     0.05139122\n4 -0.03537489 -5.427505e-05 5.954304e-03 -0.45773361     0.64714384\n5  0.01201533 -2.590965e-04 3.988998e-02  0.06145673     0.95099547\n6  0.00768085 -1.538445e-07 1.687859e-05  1.86960486     0.06153871\n\n\n\n\n3.7.1.1 list the local Moran matrix derived\nUse the code chunk below.\n\nprintCoefmat(data.frame(localMI[fips,], nga_wp$shapeName[fips]), check.names=FALSE)\n\n             Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n1   -3.2366e-01 -9.9952e-04  1.9246e-01 -7.3548e-01     4.6205e-01\n2    7.0005e-02 -4.0925e-05  1.0531e-02  6.8258e-01     4.9487e-01\n3    1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00     5.1391e-02\n4   -3.5375e-02 -5.4275e-05  5.9543e-03 -4.5773e-01     6.4714e-01\n5    1.2015e-02 -2.5910e-04  3.9890e-02  6.1457e-02     9.5100e-01\n6    7.6808e-03 -1.5384e-07  1.6879e-05  1.8696e+00     6.1539e-02\n7    2.3716e-01 -6.6542e-04  8.5226e-02  8.1464e-01     4.1528e-01\n8    1.3499e-01 -6.9507e-05  1.3396e-02  1.1669e+00     2.4326e-01\n9    5.8469e-01 -3.9167e-04  6.0293e-02  2.3828e+00     1.7183e-02\n10   1.9145e-01 -2.2881e-04  2.5098e-02  1.2099e+00     2.2630e-01\n11   6.7485e-01 -7.6926e-04  8.4332e-02  2.3265e+00     1.9992e-02\n12   1.3484e-01 -9.2780e-04  8.8869e-02  4.5543e-01     6.4880e-01\n13   1.6286e-02 -4.0925e-05  6.3021e-03  2.0567e-01     8.3705e-01\n14  -3.1655e-02 -2.9456e-05  2.8239e-03 -5.9514e-01     5.5175e-01\n15  -3.1637e-01 -1.0254e-02  1.1135e+00 -2.9010e-01     7.7174e-01\n16   6.8612e-02 -9.2780e-04  1.4275e-01  1.8406e-01     8.5397e-01\n17   2.4270e-02 -1.9868e-05  5.1126e-03  3.3971e-01     7.3408e-01\n18   5.8712e-01 -1.1792e-03  1.8138e-01  1.3814e+00     1.6717e-01\n19  -8.6368e-03 -8.6620e-05  1.1101e-02 -8.1152e-02     9.3532e-01\n20  -2.1125e-02 -1.8249e-05  2.8103e-03 -3.9815e-01     6.9052e-01\n21  -6.1300e-02 -1.4475e-04  2.2288e-02 -4.0963e-01     6.8208e-01\n22   2.8968e-01 -1.3297e-03  3.4172e-01  4.9782e-01     6.1861e-01\n23   8.3857e-01 -1.1920e-03  1.8334e-01  1.9612e+00     4.9856e-02\n24   1.5893e-03 -2.7477e-05  5.2960e-03  2.2217e-02     9.8228e-01\n25   1.3175e-01 -8.6620e-05  9.5025e-03  1.3525e+00     1.7623e-01\n26   8.0063e-01 -9.3914e-04  1.8085e-01  1.8849e+00     5.9446e-02\n27   8.4077e-01 -1.6277e-03  2.5025e-01  1.6840e+00     9.2191e-02\n28  -1.9940e-03 -1.2099e-02  1.3113e+00  8.8241e-03     9.9296e-01\n29   3.0859e-01 -2.2324e-04  2.4486e-02  1.9735e+00     4.8442e-02\n30   2.5468e-01 -3.1865e-04  3.0540e-02  1.4592e+00     1.4452e-01\n31   9.3035e-03 -6.3380e-06  8.1230e-04  3.2665e-01     7.4393e-01\n32   1.0902e+00 -1.5504e-03  3.9834e-01  1.7298e+00     8.3669e-02\n33   8.0526e-02 -1.9868e-05  2.5464e-03  1.5962e+00     1.1045e-01\n34   2.2617e-01 -2.7477e-05  3.0145e-03  4.1198e+00     3.7925e-05\n35  -1.7370e-01 -3.5422e-04  3.8849e-02 -8.7950e-01     3.7913e-01\n36   3.6215e+00 -1.7248e-02  1.6251e+00  2.8544e+00     4.3117e-03\n37  -9.7994e-02 -6.9507e-05  4.8271e-03 -1.4094e+00     1.5870e-01\n38   2.6132e+00 -5.7830e-03  6.3080e-01  3.2975e+00     9.7543e-04\n39   1.8731e+00 -1.5753e-02  2.9886e+00  1.0926e+00     2.7457e-01\n40   2.9695e+00 -3.9022e-03  7.4920e-01  3.4353e+00     5.9197e-04\n41   4.0806e+00 -1.3638e-02  2.0716e+00  2.8446e+00     4.4471e-03\n42   7.7463e-01 -8.2075e-03  1.5690e+00  6.2497e-01     5.3199e-01\n43   7.5445e-01 -1.3297e-03  3.4172e-01  1.2929e+00     1.9605e-01\n44  -9.4511e-02 -2.0041e-04  2.5680e-02 -5.8852e-01     5.5619e-01\n45  -4.0892e-01 -1.0618e-03  2.7294e-01 -7.8067e-01     4.3500e-01\n46   1.7264e-02 -1.8555e-06  3.5764e-04  9.1300e-01     3.6124e-01\n47  -6.0666e-01 -4.4019e-03  6.7490e-01 -7.3309e-01     4.6350e-01\n48   3.8136e-02 -1.0903e-05  2.1016e-03  8.3213e-01     4.0533e-01\n49  -2.6481e-01 -9.2780e-04  1.0170e-01 -8.2749e-01     4.0796e-01\n50  -3.6486e-01 -1.7389e-04  1.6668e-02 -2.8247e+00     4.7319e-03\n51   6.4059e-01 -1.0618e-03  1.0169e-01  2.0122e+00     4.4203e-02\n52   5.2295e-01 -6.1632e-04  7.8942e-02  1.8634e+00     6.2399e-02\n53   5.1817e-01 -5.6910e-04  5.4530e-02  2.2214e+00     2.6324e-02\n54   6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00     1.3920e-02\n55   7.4747e-01 -8.8063e-04  2.2641e-01  1.5727e+00     1.1578e-01\n56   5.8669e-01 -1.6277e-03  2.5025e-01  1.1760e+00     2.3958e-01\n57   9.1402e-01 -1.2599e-03  2.4254e-01  1.8585e+00     6.3096e-02\n58   7.1930e-01 -1.3297e-03  1.4569e-01  1.8880e+00     5.9027e-02\n59  -3.0961e-02 -5.2377e-04  8.0617e-02 -1.0720e-01     9.1463e-01\n60   3.2899e-03 -3.3373e-07  3.6614e-05  5.4375e-01     5.8662e-01\n61   7.1599e-02 -2.9126e-04  4.4841e-02  3.3949e-01     7.3424e-01\n62   1.1170e+00 -1.6277e-03  2.0827e-01  2.4512e+00     1.4236e-02\n63   5.9556e-01 -6.0715e-04  7.7767e-02  2.1378e+00     3.2531e-02\n64  -7.0312e-02 -2.9456e-05  2.8239e-03 -1.3226e+00     1.8597e-01\n65   4.0210e-02 -3.1865e-04  4.9056e-02  1.8298e-01     8.5481e-01\n66   9.0458e-02 -1.1259e-03  1.4414e-01  2.4123e-01     8.0938e-01\n67   6.6358e-02 -1.8555e-06  2.0357e-04  4.6511e+00     3.3019e-06\n68   9.9615e-01 -1.1259e-03  4.3469e-01  1.5126e+00     1.3038e-01\n69   9.5142e-01 -1.1259e-03  9.5720e-02  3.0788e+00     2.0782e-03\n70   1.5763e+00 -2.3901e-03  3.6719e-01  2.6053e+00     9.1806e-03\n71   1.3676e+00 -3.5471e-03  3.0082e-01  2.4999e+00     1.2422e-02\n72   9.2471e-02 -1.4925e-04  1.4307e-02  7.7435e-01     4.3873e-01\n73  -3.7128e-02 -8.3203e-05  1.0663e-02 -3.5875e-01     7.1978e-01\n74  -3.1518e-02 -1.2649e-04  1.6210e-02 -2.4656e-01     8.0525e-01\n75  -9.2317e-03 -1.9519e-04  2.1411e-02 -6.1757e-02     9.5076e-01\n76  -3.8035e-02 -2.3951e-06  2.2963e-04 -2.5098e+00     1.2079e-02\n77   7.1490e-01 -1.0618e-03  1.3594e-01  1.9419e+00     5.2155e-02\n78   8.4336e-01 -1.6277e-03  1.7829e-01  2.0012e+00     4.5369e-02\n79   7.2523e-01 -9.9952e-04  1.5377e-01  1.8520e+00     6.4030e-02\n80   5.3888e-01 -4.8031e-04  7.3931e-02  1.9837e+00     4.7294e-02\n81   3.4904e+00 -9.4838e-03  1.4466e+00  2.9099e+00     3.6157e-03\n82   1.1262e+00 -3.3198e-03  8.5145e-01  1.2241e+00     2.2090e-01\n83  -4.1318e-01 -3.9167e-04  7.5464e-02 -1.5026e+00     1.3293e-01\n84  -1.6794e-01 -5.4275e-05  8.3578e-03 -1.8364e+00     6.6298e-02\n85  -1.0457e-01 -3.8586e-05  4.2332e-03 -1.6066e+00     1.0814e-01\n86   0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n87   9.7051e-02 -1.4925e-04  1.9126e-02  7.0284e-01     4.8215e-01\n88   1.3239e-01 -1.1259e-03  1.4414e-01  3.5167e-01     7.2509e-01\n89   8.6819e-01 -5.3489e-03  5.8371e-01  1.1434e+00     2.5289e-01\n90   2.8316e-01 -1.6128e-03  1.3704e-01  7.6927e-01     4.4173e-01\n91   1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00     2.4382e-02\n92   1.5674e+00 -3.2090e-03  4.0996e-01  2.4530e+00     1.4167e-02\n93   1.5345e-02 -2.7477e-05  3.5215e-03  2.5904e-01     7.9560e-01\n94   6.5838e-03 -9.8783e-04  9.4613e-02  2.4616e-02     9.8036e-01\n95   7.6830e-02 -6.6449e-05  8.5158e-03  8.3329e-01     4.0468e-01\n96   1.0339e-01 -8.3203e-05  9.1276e-03  1.0831e+00     2.7876e-01\n97   1.3652e-02 -1.0184e-04  1.5681e-02  1.0983e-01     9.1254e-01\n98   1.1441e-01 -8.6620e-05  1.3338e-02  9.9137e-01     3.2151e-01\n99   1.7511e+00 -5.0690e-03  7.7665e-01  1.9927e+00     4.6290e-02\n100  2.3957e-01 -3.9905e-04  6.1428e-02  9.6821e-01     3.3294e-01\n101 -3.3289e-02 -9.9952e-04  1.5377e-01 -8.2343e-02     9.3437e-01\n102  1.3164e+00 -1.5358e-03  2.3615e-01  2.7122e+00     6.6840e-03\n103  4.0316e-01 -6.6542e-04  6.3753e-02  1.5994e+00     1.0974e-01\n104  1.8824e-01 -2.5316e-04  2.4265e-02  1.2100e+00     2.2626e-01\n105 -1.4448e-01 -1.0184e-04  1.3051e-02 -1.2638e+00     2.0630e-01\n106 -2.7746e-01 -1.2649e-04  4.8883e-02 -1.2544e+00     2.0971e-01\n107  2.5014e+00 -3.3198e-03  6.3776e-01  3.1364e+00     1.7103e-03\n108 -6.5757e-02 -1.2235e-04  1.5680e-02 -5.2416e-01     6.0017e-01\n109 -1.5657e-01 -3.5422e-04  4.5383e-02 -7.3329e-01     4.6338e-01\n110 -4.0714e-01 -7.5196e-03  9.5649e-01 -4.0861e-01     6.8283e-01\n111 -5.2572e-04 -5.6910e-04  5.4530e-02  1.8579e-04     9.9985e-01\n112  1.4369e+00 -5.3489e-03  4.0699e-01  2.2607e+00     2.3777e-02\n113 -3.8910e-01 -6.1632e-04  7.8942e-02 -1.3827e+00     1.6677e-01\n114  2.8350e-01 -3.9905e-04  5.1123e-02  1.2556e+00     2.0926e-01\n115  1.1070e+00 -1.6277e-03  1.5580e-01  2.8086e+00     4.9757e-03\n116 -3.9128e-03 -2.7477e-05  4.2313e-03 -5.9730e-02     9.5237e-01\n117 -2.2763e-01 -2.2881e-04  5.8867e-02 -9.3725e-01     3.4863e-01\n118  2.6518e+00 -7.0234e-03  1.0740e+00  2.5656e+00     1.0298e-02\n119  5.0676e-01 -2.2324e-04  2.8605e-02  2.9976e+00     2.7211e-03\n120  3.1906e-01 -8.3203e-05  1.6036e-02  2.5203e+00     1.1727e-02\n121  6.1173e-01 -1.4014e-03  2.1550e-01  1.3208e+00     1.8658e-01\n122  1.0868e+00 -1.6277e-03  2.0827e-01  2.3850e+00     1.7081e-02\n123 -1.6043e-01 -2.5910e-04  2.2046e-02 -1.0787e+00     2.8070e-01\n124  1.1122e+00 -1.7723e-03  2.2675e-01  2.3395e+00     1.9311e-02\n125 -2.0497e-02 -1.4925e-04  1.9126e-02 -1.4713e-01     8.8303e-01\n126  2.9959e-01 -6.1632e-04  2.3806e-01  6.1529e-01     5.3837e-01\n127  4.5026e-03 -3.3373e-07  5.1394e-05  6.2812e-01     5.2993e-01\n128 -3.1431e-02 -2.5910e-04  3.9890e-02 -1.5607e-01     8.7598e-01\n129  2.0237e-01 -8.8063e-04  1.1277e-01  6.0526e-01     5.4501e-01\n130  3.6342e-02 -1.2649e-04  1.3876e-02  3.0959e-01     7.5687e-01\n131  8.8429e-01 -2.5835e-03  3.9683e-01  1.4079e+00     1.5917e-01\n132  4.7994e-01 -5.2377e-04  5.0189e-02  2.1447e+00     3.1980e-02\n133  5.0409e-01 -7.5901e-04  9.7204e-02  1.6193e+00     1.0539e-01\n134  8.0259e-01 -1.4014e-03  2.6973e-01  1.5480e+00     1.2161e-01\n135  3.2095e-01 -2.5316e-04  4.8784e-02  1.4543e+00     1.4587e-01\n136 -5.6408e-01 -2.2881e-04  5.8867e-02 -2.3240e+00     2.0127e-02\n137  1.0900e-01 -3.8586e-05  7.4371e-03  1.2644e+00     2.0609e-01\n138  1.4615e-02 -2.3951e-06  1.8538e-03  3.3950e-01     7.3423e-01\n139  5.5125e-02 -5.1577e-05  6.6100e-03  6.7866e-01     4.9735e-01\n140  9.5921e-01 -1.0618e-03  2.7294e-01  1.8380e+00     6.6055e-02\n141 -9.5427e-01 -1.3297e-03  1.2731e-01 -2.6707e+00     7.5682e-03\n142 -1.5215e-01 -1.2235e-04  2.3581e-02 -9.8999e-01     3.2218e-01\n143  1.0215e+00 -1.4014e-03  2.1550e-01  2.2035e+00     2.7561e-02\n144  1.7310e-02 -1.8249e-05  2.3389e-03  3.5830e-01     7.2012e-01\n145  5.8823e-01 -8.6966e-04  1.3381e-01  1.6104e+00     1.0730e-01\n146  1.2015e+00 -1.6277e-03  1.5580e-01  3.0481e+00     2.3030e-03\n147  1.9828e-01 -1.1259e-03  1.2339e-01  5.6767e-01     5.7026e-01\n148  6.0353e-01 -5.2080e-03  9.9861e-01  6.0916e-01     5.4242e-01\n149  2.5690e-02 -1.8555e-06  3.5764e-04  1.3585e+00     1.7430e-01\n150  8.6937e-02 -1.2649e-04  1.3876e-02  7.3910e-01     4.5985e-01\n151 -2.5042e-01 -2.9126e-04  3.7319e-02 -1.2948e+00     1.9539e-01\n152  5.2452e-03 -1.0903e-05  1.1962e-03  1.5197e-01     8.7921e-01\n153  2.4361e-01 -3.6124e-04  1.3957e-01  6.5305e-01     5.1372e-01\n154  4.0067e-01 -8.1339e-04  2.0914e-01  8.7790e-01     3.8000e-01\n155 -1.3898e-01 -4.3100e-04  5.5216e-02 -5.8963e-01     5.5544e-01\n156  5.3574e-01 -1.0618e-03  1.3594e-01  1.4559e+00     1.4541e-01\n157  8.9537e-01 -1.4749e-03  1.4120e-01  2.3867e+00     1.6999e-02\n158  1.9339e-02 -8.1339e-04  1.5665e-01  5.0915e-02     9.5939e-01\n159  7.6650e-01 -1.4014e-03  1.5353e-01  1.9598e+00     5.0021e-02\n160  1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00     5.7704e-03\n161 -8.4890e-03 -1.0903e-05  1.3974e-03 -2.2680e-01     8.2058e-01\n162 -6.3606e-02 -5.4275e-05  4.6190e-03 -9.3509e-01     3.4974e-01\n163  1.1977e+00 -1.6128e-03  1.5437e-01  3.0525e+00     2.2691e-03\n164  2.0702e+00 -5.2080e-03  5.6841e-01  2.7528e+00     5.9085e-03\n165  5.5459e-01 -6.1632e-04  9.4853e-02  1.8027e+00     7.1432e-02\n166 -2.2400e-01 -1.4749e-03  1.4120e-01 -5.9220e-01     5.5372e-01\n167 -2.0141e-01 -2.0041e-04  2.1983e-02 -1.3571e+00     1.7476e-01\n168 -6.0268e-02 -6.0715e-04  7.7767e-02 -2.1394e-01     8.3060e-01\n169  1.3772e-01 -3.9905e-04  6.1428e-02  5.5729e-01     5.7733e-01\n170 -8.3981e-03 -2.3951e-06  3.0697e-04 -4.7919e-01     6.3180e-01\n171  3.9793e-01 -1.6916e-03  6.5269e-01  4.9464e-01     6.2085e-01\n172  5.9514e-02 -6.6449e-05  1.7098e-02  4.5565e-01     6.4864e-01\n173 -8.1927e-02 -6.3380e-06  5.3942e-04 -3.5272e+00     4.1996e-04\n174  5.1947e+00 -7.3523e-03  1.1239e+00  4.9069e+00     9.2505e-07\n175 -6.0047e-01 -3.2531e-04  6.2682e-02 -2.3971e+00     1.6526e-02\n176  4.1374e-01 -3.2531e-04  5.0081e-02  1.8503e+00     6.4277e-02\n177 -5.1956e-02 -1.4749e-03  2.2680e-01 -1.0600e-01     9.1558e-01\n178 -5.0841e-02 -5.4275e-05  8.3578e-03 -5.5552e-01     5.7854e-01\n179  1.4958e-01 -5.1577e-05  4.9446e-03  2.1279e+00     3.3345e-02\n180  8.7695e-02 -2.0041e-04  5.1562e-02  3.8708e-01     6.9869e-01\n181  2.6769e-01 -3.2531e-04  5.0081e-02  1.1976e+00     2.3106e-01\n182  6.3460e-01 -7.8598e-03  8.5553e-01  6.9459e-01     4.8731e-01\n183  2.1155e-01 -1.4925e-04  2.8763e-02  1.2482e+00     2.1195e-01\n184  2.1926e-02 -1.0562e-04  2.0355e-02  1.5442e-01     8.7728e-01\n185  1.3996e+00 -5.9315e-03  7.5570e-01  1.6168e+00     1.0592e-01\n186 -1.0664e+00 -1.3297e-03  2.0450e-01 -2.3552e+00     1.8515e-02\n187  6.1959e-01 -1.2468e-03  1.3661e-01  1.6797e+00     9.3016e-02\n188  6.6563e-01 -1.5358e-03  1.4701e-01  1.7400e+00     8.1854e-02\n189  8.4749e-01 -1.4014e-03  2.1550e-01  1.8286e+00     6.7455e-02\n190  9.4563e-01 -1.6277e-03  2.0827e-01  2.0757e+00     3.7926e-02\n191  6.9021e-01 -1.4749e-03  1.4120e-01  1.8408e+00     6.5657e-02\n192 -7.7908e-01 -5.2377e-04  8.0617e-02 -2.7421e+00     6.1053e-03\n193  7.7086e-01 -1.3297e-03  2.0450e-01  1.7076e+00     8.7716e-02\n194  9.2093e-01 -1.5504e-03  2.3838e-01  1.8894e+00     5.8840e-02\n195  7.6545e-01 -1.5504e-03  3.9834e-01  1.2153e+00     2.2427e-01\n196 -3.6995e-01 -1.7723e-03  1.6962e-01 -8.9396e-01     3.7134e-01\n197  3.0774e-01 -4.3874e-04  8.4529e-02  1.0600e+00     2.8916e-01\n198  2.7947e-01 -4.3874e-04  6.7535e-02  1.0771e+00     2.8144e-01\n199  3.0774e-01 -4.3874e-04  3.7324e-02  1.5952e+00     1.1068e-01\n200  2.5330e-01 -5.2377e-04  6.7093e-02  9.7994e-01     3.2712e-01\n201 -1.1965e-01 -8.1339e-04  1.2516e-01 -3.3591e-01     7.3694e-01\n202 -6.6417e-02 -2.2324e-04  2.8605e-02 -3.9138e-01     6.9552e-01\n203 -9.9313e-03 -6.3380e-06  6.9535e-04 -3.7638e-01     7.0663e-01\n204  3.5951e-01 -9.9952e-04  1.0955e-01  1.0892e+00     2.7606e-01\n205  1.7751e-01 -7.1640e-04  1.3799e-01  4.7979e-01     6.3137e-01\n206  2.3959e-01 -5.6910e-04  8.7591e-02  8.1148e-01     4.1709e-01\n207  3.5680e-01 -1.6277e-03  2.5025e-01  7.1649e-01     4.7369e-01\n208  5.9762e-04 -6.9507e-05  8.9077e-03  7.0684e-03     9.9436e-01\n209 -5.3116e-02 -2.0041e-04  3.0857e-02 -3.0124e-01     7.6323e-01\n210  1.7582e-01 -1.4925e-04  2.2981e-02  1.1608e+00     2.4572e-01\n211  1.5230e-01 -3.2531e-04  2.7678e-02  9.1739e-01     3.5894e-01\n212  2.4259e-01 -3.6124e-04  3.9618e-02  1.2206e+00     2.2223e-01\n213  1.4001e+00 -1.6916e-03  4.3457e-01  2.1265e+00     3.3464e-02\n214  5.2532e-01 -7.6926e-04  9.8516e-02  1.6761e+00     9.3712e-02\n215  7.5812e-01 -9.3914e-04  1.4449e-01  1.9969e+00     4.5835e-02\n216  1.6424e-01 -4.8031e-04  7.3931e-02  6.0582e-01     5.4464e-01\n217  5.8749e-01 -8.6966e-04  1.1136e-01  1.7631e+00     7.7886e-02\n218  3.6410e-01 -3.1865e-04  4.9056e-02  1.6453e+00     9.9906e-02\n219  1.8579e-01 -1.3297e-03  2.0450e-01  4.1378e-01     6.7903e-01\n220 -3.2768e-01 -9.3914e-04  1.0294e-01 -1.0184e+00     3.0849e-01\n221  2.4600e-02 -1.3162e-03  1.2602e-01  7.3004e-02     9.4180e-01\n222  1.7425e-01 -1.3297e-03  1.1302e-01  5.2226e-01     6.0149e-01\n223  1.1271e+00 -1.6277e-03  2.0827e-01  2.4733e+00     1.3386e-02\n224  9.0870e-01 -4.5316e-03  6.9469e-01  1.0957e+00     2.7322e-01\n225  5.8078e-01 -4.8031e-04  4.6027e-02  2.7094e+00     6.7411e-03\n226 -3.7568e-01 -5.6910e-04  8.7591e-02 -1.2675e+00     2.0499e-01\n227 -1.2497e-01 -1.3297e-03  1.7019e-01 -2.9970e-01     7.6440e-01\n228 -1.3336e-01 -3.9905e-04  7.6885e-02 -4.7953e-01     6.3156e-01\n229 -2.0255e-01 -6.9507e-05  8.9077e-03 -2.1454e+00     3.1923e-02\n230 -7.6106e-01 -1.0452e-02  1.3256e+00 -6.5195e-01     5.1444e-01\n231  2.7157e-02 -8.8063e-04  8.4354e-02  9.6537e-02     9.2309e-01\n232  5.0818e-01 -1.2599e-03  2.4254e-01  1.0344e+00     3.0093e-01\n233  2.6512e-01 -1.9394e-03  1.8558e-01  6.1993e-01     5.3531e-01\n234 -5.3344e-01 -8.8063e-04  9.6531e-02 -1.7141e+00     8.6510e-02\n235 -1.6336e-02 -1.8555e-06  2.8574e-04 -9.6630e-01     3.3389e-01\n236  1.1751e-01 -5.1531e-04  9.9274e-02  3.7459e-01     7.0796e-01\n237  1.3117e+00 -3.6636e-03  4.6782e-01  1.9231e+00     5.4466e-02\n238 -1.3765e-01 -1.4014e-03  2.6973e-01 -2.6234e-01     7.9306e-01\n239  4.2520e-02 -9.8783e-04  1.5197e-01  1.1160e-01     9.1114e-01\n240  7.7837e-01 -8.6966e-04  1.3381e-01  2.1302e+00     3.3151e-02\n241  1.1322e+00 -1.6277e-03  2.0827e-01  2.4844e+00     1.2978e-02\n242 -6.3029e-01 -2.3901e-03  3.6719e-01 -1.0362e+00     3.0011e-01\n243  4.9513e-02 -8.6620e-05  1.6694e-02  3.8387e-01     7.0107e-01\n244  1.0825e+00 -1.4749e-03  2.2680e-01  2.2762e+00     2.2835e-02\n245  3.8218e+00 -8.7432e-03  7.3761e-01  4.4601e+00     8.1903e-06\n246  1.0730e+00 -1.5504e-03  2.9837e-01  1.9672e+00     4.9166e-02\n247 -1.8102e-01 -6.3380e-06  2.4496e-03 -3.6574e+00     2.5483e-04\n248  7.0598e-01 -6.1632e-04  7.8942e-02  2.5149e+00     1.1907e-02\n249  1.6376e-01 -2.0041e-04  2.5680e-02  1.0232e+00     3.0623e-01\n250  1.2461e+00 -1.6277e-03  2.5025e-01  2.4942e+00     1.2624e-02\n251 -5.9560e-02 -3.2531e-04  8.3685e-02 -2.0476e-01     8.3776e-01\n252  1.1415e+00 -1.6277e-03  1.7829e-01  2.7074e+00     6.7820e-03\n253 -2.9028e-01 -1.5504e-03  1.6983e-01 -7.0062e-01     4.8354e-01\n254  2.0483e-01 -3.5422e-04  3.0137e-02  1.1819e+00     2.3724e-01\n255  3.8132e-01 -1.0059e-02  2.5625e+00  2.4450e-01     8.0685e-01\n256  6.0271e-02 -3.9905e-04  4.3763e-02  2.9001e-01     7.7181e-01\n257 -1.8991e-02 -3.2531e-04  3.5679e-02 -9.8820e-02     9.2128e-01\n258 -2.6016e-01 -4.8031e-04  5.2671e-02 -1.1315e+00     2.5785e-01\n259 -1.5029e-02 -6.9507e-05  6.6634e-03 -1.8326e-01     8.5459e-01\n260  2.5243e-01 -8.8063e-04  1.6959e-01  6.1511e-01     5.3848e-01\n261  1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00     5.7704e-03\n262 -1.6611e-02 -8.3203e-05  1.0663e-02 -1.6006e-01     8.7283e-01\n263  4.4939e-02 -8.3203e-05  1.0663e-02  4.3600e-01     6.6283e-01\n264  1.2976e-01 -3.2531e-04  6.2682e-02  5.1958e-01     6.0336e-01\n265  3.3150e-02 -2.3901e-03  4.5958e-01  5.2424e-02     9.5819e-01\n266  1.7154e-01 -8.2400e-04  7.8934e-02  6.1351e-01     5.3954e-01\n267  4.4473e-01 -9.9952e-04  1.2798e-01  1.2460e+00     2.1277e-01\n268  1.9014e-01 -1.2468e-03  1.0598e-01  5.8789e-01     5.5661e-01\n269 -3.5537e-02 -5.2377e-04  6.7093e-02 -1.3517e-01     8.9247e-01\n270  1.5685e-01 -3.9167e-04  5.0179e-02  7.0197e-01     4.8270e-01\n271  1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00     2.4382e-02\n272  4.8530e-01 -1.6916e-03  4.3457e-01  7.3874e-01     4.6007e-01\n273  1.0595e+00 -1.4749e-03  2.2680e-01  2.2278e+00     2.5892e-02\n274  1.0249e+00 -1.4749e-03  1.8875e-01  2.3625e+00     1.8151e-02\n275 -1.6524e-02 -1.3297e-03  2.0450e-01 -3.3600e-02     9.7320e-01\n276 -2.9120e-02 -1.0903e-05  1.3974e-03 -7.7869e-01     4.3616e-01\n277  2.3890e-01 -2.5910e-04  3.9890e-02  1.1974e+00     2.3113e-01\n278  1.9144e-01 -1.1920e-03  1.8334e-01  4.4987e-01     6.5280e-01\n279  2.6967e-01 -2.5910e-04  4.9927e-02  1.2081e+00     2.2703e-01\n280  2.2770e-01 -2.0041e-04  2.1983e-02  1.5371e+00     1.2427e-01\n281 -2.2712e-01 -7.5901e-04  1.1680e-01 -6.6235e-01     5.0774e-01\n282  1.8845e-02 -4.0925e-05  5.2449e-03  2.6077e-01     7.9427e-01\n283 -3.8965e-02 -5.6029e-04  8.6235e-02 -1.3078e-01     8.9595e-01\n284  2.2390e-03 -1.0903e-05  4.2140e-03  3.4659e-02     9.7235e-01\n285  1.2904e-01 -8.2400e-04  1.2679e-01  3.6470e-01     7.1534e-01\n286 -9.1998e-03 -1.4925e-04  2.2981e-02 -5.9702e-02     9.5239e-01\n287 -4.0001e-01 -2.9126e-04  3.1946e-02 -2.2364e+00     2.5326e-02\n288  1.3579e-02 -1.0562e-04  1.3535e-02  1.1762e-01     9.0637e-01\n289  6.7715e-02 -1.9868e-05  5.1126e-03  9.4731e-01     3.4348e-01\n290  2.5630e-01 -1.6903e-04  1.4384e-02  2.1384e+00     3.2481e-02\n291  8.9115e-01 -1.3297e-03  1.2731e-01  2.5013e+00     1.2374e-02\n292  8.3080e-01 -1.1920e-03  2.2948e-01  1.7368e+00     8.2423e-02\n293  8.3572e-01 -1.4749e-03  1.6158e-01  2.0827e+00     3.7274e-02\n294  9.4127e-01 -1.3297e-03  1.7019e-01  2.2849e+00     2.2321e-02\n295  1.3369e-01 -1.4925e-04  1.4307e-02  1.1189e+00     2.6316e-01\n296 -2.6395e-01 -1.4014e-03  2.1550e-01 -5.6557e-01     5.7169e-01\n297 -8.5516e-02 -4.8031e-04  7.3931e-02 -3.1274e-01     7.5448e-01\n298  1.2702e+00 -2.3901e-03  4.5958e-01  1.8772e+00     6.0487e-02\n299  1.8042e+00 -3.5471e-03  6.8127e-01  2.1902e+00     2.8513e-02\n300  5.3311e-01 -3.1865e-04  3.4949e-02  2.8534e+00     4.3255e-03\n301  1.1625e+00 -9.2780e-04  1.1880e-01  3.3755e+00     7.3685e-04\n302 -2.4336e-01 -4.0925e-05  5.2449e-03 -3.3597e+00     7.8028e-04\n303  6.2924e-01 -2.4859e-03  2.7205e-01  1.2112e+00     2.2583e-01\n304  7.9307e+00 -5.2576e-02  3.4595e+00  4.2921e+00     1.7698e-05\n305  1.2027e+00 -1.1135e-03  2.8623e-01  2.2501e+00     2.4444e-02\n306  1.2091e-01 -9.3914e-04  7.9854e-02  4.3119e-01     6.6633e-01\n307  4.7157e+00 -2.8615e-02  2.3657e+00  3.0846e+00     2.0384e-03\n308  5.1810e-01 -7.1640e-04  6.0928e-02  2.1019e+00     3.5565e-02\n309  6.0252e-01 -8.2400e-04  1.2679e-01  1.6944e+00     9.0185e-02\n310  7.8575e-01 -1.4014e-03  2.1550e-01  1.6956e+00     8.9958e-02\n311  9.7099e-01 -1.4014e-03  2.6973e-01  1.8723e+00     6.1166e-02\n312  1.2618e-01 -1.7389e-04  2.2283e-02  8.4644e-01     3.9731e-01\n313  2.4753e-01 -1.4925e-04  1.6372e-02  1.9357e+00     5.2905e-02\n314  3.1114e-01 -5.6910e-04  8.7591e-02  1.0532e+00     2.9224e-01\n315 -9.1066e-01 -1.4749e-03  1.2534e-01 -2.5680e+00     1.0228e-02\n316 -2.1566e-02 -5.4275e-05  5.2032e-03 -2.9822e-01     7.6553e-01\n317  1.0003e-02 -3.3373e-07  6.4326e-05  1.2473e+00     2.1229e-01\n318  7.6232e-02 -6.1632e-04  1.1872e-01  2.2303e-01     8.2351e-01\n319 -2.1311e-01 -2.9930e-03  4.5953e-01 -3.0996e-01     7.5659e-01\n320  3.4728e-01 -3.9167e-04  3.7536e-02  1.7945e+00     7.2735e-02\n321 -8.7294e-03 -3.3373e-07  6.4326e-05 -1.0884e+00     2.7643e-01\n322  6.1088e-01 -1.6277e-03  2.5025e-01  1.2244e+00     2.2080e-01\n323  3.7480e-01 -8.8063e-04  1.6959e-01  9.1226e-01     3.6163e-01\n324 -3.3429e-01 -5.6910e-04  6.2402e-02 -1.3359e+00     1.8157e-01\n325  2.8228e-01 -6.6542e-04  1.0240e-01  8.8420e-01     3.7659e-01\n326  7.8513e-01 -1.5504e-03  1.4841e-01  2.0421e+00     4.1143e-02\n327  2.9551e-01 -1.0618e-03  2.0444e-01  6.5590e-01     5.1189e-01\n328  1.1550e-01 -1.4475e-04  2.2288e-02  7.7463e-01     4.3856e-01\n329  3.1773e-01 -6.5588e-04  7.1911e-02  1.1873e+00     2.3512e-01\n330  1.7514e+00 -1.8549e-03  2.3729e-01  3.5991e+00     3.1928e-04\n331  2.8249e-02 -1.9868e-05  2.1798e-03  6.0548e-01     5.4486e-01\n332 -7.1532e-02 -4.3100e-04  6.6345e-02 -2.7604e-01     7.8252e-01\n333  4.7478e-02 -6.9507e-05  1.0703e-02  4.5959e-01     6.4581e-01\n334  6.4821e-03 -8.6620e-05  2.2288e-02  4.3999e-02     9.6491e-01\n335  3.1590e-02 -1.9868e-05  2.1798e-03  6.7706e-01     4.9837e-01\n336  4.3466e-01 -1.4749e-03  2.8387e-01  8.1859e-01     4.1302e-01\n337  1.6600e-01 -2.7477e-05  3.5215e-03  2.7978e+00     5.1457e-03\n338 -1.4055e-02 -1.8555e-06  2.3780e-04 -9.1131e-01     3.6213e-01\n339  1.0542e+00 -5.6029e-04  6.1436e-02  4.2556e+00     2.0849e-05\n340 -4.6502e-02 -6.6542e-04  1.2817e-01 -1.2803e-01     8.9813e-01\n341  1.7965e+00 -2.2962e-03  3.5280e-01  3.0285e+00     2.4580e-03\n342 -2.0831e-01 -3.2531e-04  6.2682e-02 -8.3073e-01     4.0613e-01\n343  4.5466e-01 -1.9519e-04  3.7616e-02  2.3452e+00     1.9016e-02\n344  1.0931e-01 -1.0903e-05  2.1016e-03  2.3847e+00     1.7091e-02\n345 -9.5441e-02 -1.0497e-03  2.6985e-01 -1.8171e-01     8.5581e-01\n346 -3.2929e-01 -4.0925e-05  7.8878e-03 -3.7072e+00     2.0957e-04\n347 -1.7755e-01 -1.2162e-05  2.3443e-03 -3.6668e+00     2.4556e-04\n348  5.6912e-01 -2.2324e-04  3.4370e-02  3.0710e+00     2.1334e-03\n349 -2.7842e-01 -1.6277e-03  2.5025e-01 -5.5330e-01     5.8006e-01\n350 -2.2698e-02 -3.9905e-04  3.3949e-02 -1.2102e-01     9.0367e-01\n351  2.3604e-01 -7.1640e-04  9.1751e-02  7.8162e-01     4.3444e-01\n352 -3.1866e-01 -2.5910e-04  4.9927e-02 -1.4250e+00     1.5417e-01\n353  3.4339e-01 -2.2324e-04  4.3019e-02  1.6567e+00     9.7579e-02\n354 -2.1322e-02 -1.2162e-05  2.3443e-03 -4.4012e-01     6.5985e-01\n355  6.6949e+00 -1.1886e-02  1.5053e+00  5.4665e+00     4.5908e-08\n356  5.6083e-03 -1.5384e-07  3.9589e-05  8.9137e-01     3.7273e-01\n357 -2.1211e-01 -1.2649e-04  1.2126e-02 -1.9251e+00     5.4218e-02\n358  1.6871e-01 -6.6449e-05  1.0232e-02  1.6685e+00     9.5219e-02\n359  2.2350e-01 -9.9952e-04  1.2798e-01  6.2755e-01     5.3030e-01\n360 -3.6619e-01 -1.5504e-03  1.9839e-01 -8.1866e-01     4.1298e-01\n361 -6.0131e-03 -8.2400e-04  7.8934e-02 -1.8470e-02     9.8526e-01\n362  4.5740e-01 -1.6916e-03  1.8527e-01  1.0666e+00     2.8617e-01\n363 -1.8197e-02 -1.8555e-06  1.5792e-04 -1.4479e+00     1.4764e-01\n364  6.1303e-03 -1.0562e-04  1.6263e-02  4.8899e-02     9.6100e-01\n365 -2.2750e-02 -5.4275e-05  5.9543e-03 -2.9412e-01     7.6867e-01\n366  1.3585e-01 -5.4275e-05  6.9558e-03  1.6296e+00     1.0319e-01\n367  1.6027e+00 -2.2324e-04  5.7433e-02  6.6885e+00     2.2541e-11\n368  4.3276e-01 -5.6910e-04  8.7591e-02  1.4642e+00     1.4315e-01\n369  1.3356e-01 -5.1577e-05  7.9423e-03  1.4992e+00     1.3381e-01\n370  1.8036e-01 -2.9126e-04  5.6124e-02  7.6255e-01     4.4573e-01\n371  2.2985e-01 -5.2377e-04  8.0617e-02  8.1138e-01     4.1715e-01\n372  8.0179e-01 -1.4749e-03  2.8387e-01  1.5076e+00     1.3165e-01\n373 -1.3378e-02 -2.3951e-06  2.2963e-04 -8.8267e-01     3.7741e-01\n374 -1.9886e-01 -1.1259e-03  2.1678e-01 -4.2469e-01     6.7106e-01\n375  2.5139e-02 -1.0903e-05  2.1016e-03  5.4861e-01     5.8327e-01\n376  2.9981e-01 -5.6910e-04  7.2897e-02  1.1125e+00     2.6591e-01\n377 -2.7264e-01 -1.3875e-03  1.7758e-01 -6.4368e-01     5.1978e-01\n378  2.9537e-04 -1.5384e-07  2.3692e-05  6.0714e-02     9.5159e-01\n379 -2.3819e-01 -1.4925e-04  2.2981e-02 -1.5702e+00     1.1636e-01\n380  1.8019e+00 -2.4859e-03  3.8186e-01  2.9200e+00     3.5001e-03\n381  1.0926e+00 -1.4014e-03  3.6011e-01  1.8231e+00     6.8292e-02\n382  4.1537e-02 -1.9868e-05  2.5464e-03  8.2353e-01     4.1021e-01\n383 -1.3994e-01 -1.3297e-03  1.4569e-01 -3.6315e-01     7.1649e-01\n384  2.7125e-01 -2.5316e-04  6.5130e-02  1.0638e+00     2.8740e-01\n385 -2.1869e-03 -1.9868e-05  3.8295e-03 -3.5019e-02     9.7206e-01\n386  5.1413e-02 -8.1339e-04  1.0416e-01  1.6182e-01     8.7145e-01\n387  2.2660e+00 -1.2313e-02  1.5586e+00  1.8249e+00     6.8011e-02\n388  1.3567e-01 -1.9868e-05  3.8295e-03  2.1926e+00     2.8333e-02\n389 -1.3819e-01 -8.6620e-05  1.3338e-02 -1.1958e+00     2.3176e-01\n390  1.5263e-01 -1.2235e-04  1.5680e-02  1.2199e+00     2.2250e-01\n391 -1.3166e-01 -2.0041e-04  3.8621e-02 -6.6893e-01     5.0354e-01\n392  7.8292e-01 -1.7723e-03  2.7245e-01  1.5033e+00     1.3275e-01\n393 -4.1586e-02 -1.2162e-05  1.5588e-03 -1.0530e+00     2.9234e-01\n394  3.3748e-01 -1.4014e-03  1.5353e-01  8.6487e-01     3.8711e-01\n395  3.6773e-01 -1.4607e-03  1.6002e-01  9.2290e-01     3.5606e-01\n396  7.0376e-01 -7.5901e-04  1.9517e-01  1.5947e+00     1.1077e-01\n397 -1.3855e+00 -1.1259e-03  2.8941e-01 -2.5733e+00     1.0074e-02\n398 -1.3986e-01 -1.5504e-03  1.9839e-01 -3.1053e-01     7.5616e-01\n399  1.0373e-01 -2.5910e-04  3.3198e-02  5.7075e-01     5.6817e-01\n400  1.2280e+00 -1.6277e-03  2.5025e-01  2.4579e+00     1.3974e-02\n401  6.9862e-01 -7.0234e-03  7.6514e-01  8.0671e-01     4.1983e-01\n402  1.6859e-01 -1.5358e-03  1.9653e-01  3.8375e-01     7.0117e-01\n403  3.2156e-01 -3.2090e-03  4.0996e-01  5.0722e-01     6.1200e-01\n404 -8.3787e-02 -1.6903e-04  4.3490e-02 -4.0097e-01     6.8845e-01\n405 -9.5898e-01 -9.3914e-04  7.9854e-02 -3.3903e+00     6.9818e-04\n406  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00     5.1391e-02\n407  2.6952e-01 -8.1339e-04  1.2516e-01  7.6413e-01     4.4479e-01\n408  2.4358e+00 -1.4607e-03  2.2462e-01  5.1426e+00     2.7103e-07\n409  3.0479e-01 -1.0497e-03  1.1505e-01  9.0170e-01     3.6722e-01\n410  1.1181e-01 -2.9126e-04  3.1946e-02  6.2722e-01     5.3052e-01\n411  7.3786e-01 -2.1140e-03  3.2487e-01  1.2983e+00     1.9419e-01\n412  4.7488e-03 -2.9456e-05  3.2316e-03  8.4055e-02     9.3301e-01\n413 -1.8739e-01 -1.2235e-04  1.8840e-02 -1.3644e+00     1.7246e-01\n414  2.6079e-01 -7.1640e-04  1.1024e-01  7.8760e-01     4.3093e-01\n415 -4.5621e-02 -3.8586e-05  5.9420e-03 -5.9133e-01     5.5430e-01\n416  5.2632e-01 -8.6966e-04  6.6469e-02  2.0448e+00     4.0872e-02\n417  6.3472e-01 -5.1531e-04  4.3835e-02  3.0341e+00     2.4128e-03\n418 -3.6917e-02 -1.2162e-05  1.3343e-03 -1.0103e+00     3.1236e-01\n419 -2.1227e-01 -6.1632e-04  9.4853e-02 -6.8723e-01     4.9194e-01\n420  2.5970e-01 -3.1865e-04  8.1973e-02  9.0818e-01     3.6378e-01\n421  2.7703e-01 -1.2235e-04  1.3422e-02  2.3923e+00     1.6744e-02\n422 -2.6231e-02 -1.0562e-04  1.0125e-02 -2.5965e-01     7.9514e-01\n423  3.8165e-01 -2.8497e-04  5.4911e-02  1.6299e+00     1.0312e-01\n424  2.5215e-01 -4.8031e-04  9.2535e-02  8.3049e-01     4.0626e-01\n425  2.2014e-01 -1.4475e-04  2.2288e-02  1.4755e+00     1.4007e-01\n426  1.4889e+00 -4.1483e-03  4.5323e-01  2.2178e+00     2.6571e-02\n427 -9.4618e-03 -2.3951e-06  4.6165e-04 -4.4025e-01     6.5975e-01\n428 -8.3087e-02 -1.4925e-04  1.9126e-02 -5.9971e-01     5.4870e-01\n429 -2.3081e-01 -5.6910e-04  2.1983e-01 -4.9106e-01     6.2339e-01\n430  4.3336e-01 -4.8031e-04  4.0859e-02  2.1463e+00     3.1853e-02\n431  2.9650e-03 -3.3373e-07  6.4326e-05  3.6973e-01     7.1158e-01\n432 -8.1591e-02 -1.2162e-05  1.8730e-03 -1.8850e+00     5.9429e-02\n433  7.6751e-01 -3.2090e-03  4.0996e-01  1.2037e+00     2.2870e-01\n434 -4.4130e-02 -8.3203e-05  9.1276e-03 -4.6103e-01     6.4477e-01\n435 -8.1356e-01 -2.3901e-03  3.6719e-01 -1.3387e+00     1.8068e-01\n436 -6.4567e-04 -1.5384e-07  2.3692e-05 -1.3262e-01     8.9449e-01\n437 -1.7906e-02 -3.1000e-03  3.9608e-01 -2.3526e-02     9.8123e-01\n438  2.8901e-02 -5.4386e-06  5.2141e-04  1.2659e+00     2.0554e-01\n439  4.1120e-01 -1.5504e-03  3.9834e-01  6.5397e-01     5.1313e-01\n440  1.1281e+00 -1.6277e-03  1.2431e-01  3.2043e+00     1.3540e-03\n441  1.0935e+00 -1.9394e-03  2.1236e-01  2.3771e+00     1.7448e-02\n442 -3.9073e-02 -1.0562e-04  2.7175e-02 -2.3638e-01     8.1314e-01\n443  5.7842e-01 -1.1920e-03  2.2948e-01  1.2099e+00     2.2630e-01\n444 -3.1227e-01 -4.8031e-04  7.3931e-02 -1.1467e+00     2.5151e-01\n445  1.7688e+00 -1.9394e-03  2.4808e-01  3.5552e+00     3.7773e-04\n446  3.2529e-01 -9.8783e-04  1.5197e-01  8.3697e-01     4.0261e-01\n447  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00     5.1391e-02\n448  2.9856e-01 -9.9952e-04  7.6385e-02  1.0839e+00     2.7842e-01\n449  6.7138e-02 -7.1640e-04  1.3799e-01  1.8267e-01     8.5506e-01\n450 -1.8849e-03 -1.8555e-06  3.5764e-04 -9.9571e-02     9.2068e-01\n451  1.2681e-01 -6.5588e-04  1.0094e-01  4.0121e-01     6.8826e-01\n452  7.5819e-01 -1.5358e-03  2.3615e-01  1.5634e+00     1.1796e-01\n453  1.0092e-01 -1.4014e-03  2.6973e-01  1.9701e-01     8.4382e-01\n454  2.6045e-01 -9.2780e-04  2.3853e-01  5.3517e-01     5.9253e-01\n455  2.1905e+00 -2.9930e-03  3.8244e-01  3.5469e+00     3.8973e-04\n456  3.4467e-01 -1.9519e-04  2.5012e-02  2.1806e+00     2.9213e-02\n457 -9.2051e-02 -5.1577e-05  4.9446e-03 -1.3083e+00     1.9076e-01\n458  1.0582e+00 -1.5504e-03  2.9837e-01  1.9401e+00     5.2364e-02\n459  6.2038e-01 -2.5835e-03  2.4705e-01  1.2534e+00     2.1008e-01\n460  1.7886e-03 -8.3203e-05  9.1276e-03  1.9592e-02     9.8437e-01\n461  8.6984e-01 -8.8063e-04  1.6959e-01  2.1144e+00     3.4484e-02\n462  1.0537e+00 -1.4749e-03  2.2680e-01  2.2157e+00     2.6710e-02\n463 -1.5843e-01 -1.6277e-03  2.0827e-01 -3.4359e-01     7.3115e-01\n464  1.4196e+00 -2.4859e-03  2.7205e-01  2.7264e+00     6.4020e-03\n465 -1.1870e-02 -3.3373e-07  6.4326e-05 -1.4799e+00     1.3890e-01\n466  8.4157e-02 -2.0041e-04  2.5680e-02  5.2641e-01     5.9860e-01\n467 -2.5992e-01 -1.1792e-03  1.1292e-01 -7.6999e-01     4.4131e-01\n468 -1.3204e-01 -5.4275e-05  1.0461e-02 -1.2904e+00     1.9690e-01\n469 -2.5568e-01 -9.2780e-04  1.4275e-01 -6.7426e-01     5.0014e-01\n470  4.0363e-01 -3.5422e-04  5.4530e-02  1.7300e+00     8.3627e-02\n471 -2.3647e-01 -6.1632e-04  4.7118e-02 -1.0865e+00     2.7724e-01\n472 -2.0137e-01 -1.1259e-03  1.7320e-01 -4.8117e-01     6.3040e-01\n473  1.1675e+00 -1.6277e-03  3.1322e-01  2.0889e+00     3.6716e-02\n474  1.8047e-01 -3.2531e-04  3.1178e-02  1.0239e+00     3.0588e-01\n475  1.0717e+00 -1.6277e-03  2.0827e-01  2.3518e+00     1.8682e-02\n476  1.0032e-02 -5.4386e-06  6.9703e-04  3.8020e-01     7.0380e-01\n477  1.1648e+00 -1.4749e-03  1.6158e-01  2.9014e+00     3.7150e-03\n478  1.3145e-01 -4.5316e-03  6.9469e-01  1.6314e-01     8.7040e-01\n479  6.3142e-01 -1.3297e-03  5.1324e-01  8.8323e-01     3.7711e-01\n480  4.2948e-03 -1.5384e-07  2.3692e-05  8.8239e-01     3.7757e-01\n481  1.0689e+00 -1.3297e-03  2.5595e-01  2.1153e+00     3.4402e-02\n482  2.4269e-01 -1.4475e-04  1.8549e-02  1.7830e+00     7.4589e-02\n483 -1.7618e-01 -1.4749e-03  1.6158e-01 -4.3463e-01     6.6383e-01\n484 -2.0568e-02 -1.9868e-05  3.8295e-03 -3.3204e-01     7.3986e-01\n485 -7.2227e-01 -6.1632e-04  9.4853e-02 -2.3432e+00     1.9121e-02\n486  3.5764e-01 -5.6910e-04  8.7591e-02  1.2103e+00     2.2615e-01\n487  1.3249e+00 -3.1000e-03  3.9608e-01  2.1101e+00     3.4852e-02\n488  8.6679e-02 -2.2324e-04  2.8605e-02  5.1382e-01     6.0738e-01\n489  1.2453e-01 -1.4925e-04  1.2701e-02  1.1063e+00     2.6859e-01\n490  2.2996e-01 -3.1865e-04  2.7112e-02  1.3986e+00     1.6195e-01\n491 -1.1691e+00 -1.4014e-03  2.6973e-01 -2.2484e+00     2.4553e-02\n492  1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00     2.4382e-02\n493  3.2091e-02 -5.1577e-05  4.3894e-03  4.8516e-01     6.2757e-01\n494 -2.2500e-02 -2.9456e-05  2.8239e-03 -4.2285e-01     6.7241e-01\n495  4.0696e-01 -2.8497e-04  5.4911e-02  1.7379e+00     8.2226e-02\n496 -4.1196e-02 -3.8586e-05  7.4371e-03 -4.7726e-01     6.3318e-01\n497  2.5996e-01 -1.4014e-03  1.1910e-01  7.5733e-01     4.4885e-01\n498  4.1673e-01 -7.6926e-04  6.5421e-02  1.6323e+00     1.0262e-01\n499  2.4038e-02 -6.9507e-05  1.3396e-02  2.0828e-01     8.3501e-01\n500  1.0360e+00 -1.2599e-03  3.2380e-01  1.8228e+00     6.8330e-02\n501  5.3008e-02 -1.5504e-03  2.3838e-01  1.1174e-01     9.1103e-01\n502  2.2082e+00 -2.4859e-03  6.3810e-01  2.7674e+00     5.6503e-03\n503  5.4171e-02 -1.4749e-03  1.6158e-01  1.3843e-01     8.8990e-01\n504  1.8292e-02 -1.2162e-05  1.8730e-03  4.2294e-01     6.7234e-01\n505 -1.6085e-01 -1.1135e-03  1.4256e-01 -4.2306e-01     6.7225e-01\n506 -1.7727e-01 -8.6620e-05  1.1101e-02 -1.6817e+00     9.2627e-02\n507  1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00     1.1789e-02\n508  4.1411e-01 -1.0497e-03  5.6999e-02  1.7389e+00     8.2048e-02\n509  1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00     1.1789e-02\n510  6.8447e-02 -2.5316e-04  6.5130e-02  2.6920e-01     7.8778e-01\n511  8.4196e-01 -6.5588e-04  5.5785e-02  3.5675e+00     3.6035e-04\n512  1.1172e+00 -1.5504e-03  2.9837e-01  2.0482e+00     4.0538e-02\n513  1.1591e+00 -1.5504e-03  3.9834e-01  1.8389e+00     6.5927e-02\n514  2.3732e-01 -3.9905e-04  3.8242e-02  1.2156e+00     2.2413e-01\n515  1.0431e+00 -1.2599e-03  1.9378e-01  2.3724e+00     1.7671e-02\n516 -1.1309e-03 -1.5384e-07  2.9653e-05 -2.0765e-01     8.3550e-01\n517  7.4541e-01 -1.3162e-03  2.5336e-01  1.4835e+00     1.3794e-01\n518  9.0273e-02 -9.3914e-04  1.2025e-01  2.6303e-01     7.9253e-01\n519 -6.4231e-02 -5.1577e-05  6.6100e-03 -7.8940e-01     4.2988e-01\n520  1.9796e-01 -5.6029e-04  5.3686e-02  8.5677e-01     3.9157e-01\n521  3.1335e-01 -8.1339e-04  1.5665e-01  7.9377e-01     4.2733e-01\n522 -7.1570e-02 -1.8249e-05  1.7496e-03 -1.7106e+00     8.7150e-02\n523  1.1464e-01 -1.7389e-04  1.9074e-02  8.3134e-01     4.0578e-01\n524  2.8016e-01 -2.0041e-04  3.0857e-02  1.5960e+00     1.1048e-01\n525  1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00     5.1391e-02\n526  1.0897e+00 -1.6277e-03  1.7829e-01  2.5846e+00     9.7504e-03\n527  5.1373e-02 -1.9519e-04  2.5012e-02  3.2607e-01     7.4437e-01\n528  3.8138e-01 -8.2400e-04  7.8934e-02  1.3604e+00     1.7371e-01\n529  1.2072e-02 -6.3380e-06  9.7603e-04  3.8661e-01     6.9905e-01\n530 -9.8898e-02 -5.6910e-04  5.4530e-02 -4.2108e-01     6.7370e-01\n531  7.6469e-01 -1.1259e-03  1.7320e-01  1.8402e+00     6.5746e-02\n532  6.2583e-01 -7.6926e-04  9.8516e-02  1.9964e+00     4.5896e-02\n533  9.3026e-02 -1.5504e-03  1.3174e-01  2.6056e-01     7.9443e-01\n534  1.5217e-01 -2.9456e-05  4.5360e-03  2.2598e+00     2.3833e-02\n535  5.7646e-01 -5.2377e-04  6.7093e-02  2.2275e+00     2.5912e-02\n536  8.8679e-01 -9.3914e-04  2.4144e-01  1.8066e+00     7.0818e-02\n537  9.2056e-01 -1.4749e-03  1.4120e-01  2.4538e+00     1.4136e-02\n538  1.1681e-03 -1.0184e-04  1.9627e-02  9.0651e-03     9.9277e-01\n539  4.3614e-02 -2.2881e-04  4.4093e-02  2.0879e-01     8.3461e-01\n540 -2.0447e-02 -6.6449e-05  6.3702e-03 -2.5536e-01     7.9845e-01\n541  6.7234e-01 -9.3914e-04  1.2025e-01  1.9416e+00     5.2190e-02\n542  6.2298e-01 -1.6277e-03  3.1322e-01  1.1160e+00     2.6440e-01\n543  4.9715e-01 -5.6910e-04  8.7591e-02  1.6817e+00     9.2621e-02\n544  3.2338e-01 -6.6542e-04  6.3753e-02  1.2834e+00     1.9936e-01\n545  9.3118e-01 -6.0715e-04  1.5614e-01  2.3581e+00     1.8371e-02\n546  1.4691e-02 -3.8586e-05  7.4371e-03  1.7080e-01     8.6438e-01\n547  1.6951e-01 -4.7222e-04  9.0976e-02  5.6357e-01     5.7305e-01\n548 -2.4197e-01 -4.9318e-03  4.1767e-01 -3.6678e-01     7.1378e-01\n549 -6.5236e-02 -5.4386e-06  5.9668e-04 -2.6704e+00     7.5757e-03\n550  8.4506e-01 -1.6916e-03  1.4373e-01  2.2335e+00     2.5516e-02\n551  9.9888e-03 -1.8249e-05  2.0021e-03  2.2364e-01     8.2303e-01\n552  1.9787e-01 -2.5910e-04  3.9890e-02  9.9200e-01     3.2120e-01\n553  1.4982e+00 -5.2080e-03  5.6841e-01  1.9941e+00     4.6137e-02\n554  1.3832e+00 -2.3901e-03  3.0559e-01  2.5066e+00     1.2191e-02\n555  3.6842e-02 -1.9868e-05  2.1798e-03  7.8954e-01     4.2980e-01\n556  4.0670e-01 -7.8598e-03  8.5553e-01  4.4820e-01     6.5401e-01\n557  2.6021e+00 -5.4918e-03  5.9920e-01  3.3686e+00     7.5543e-04\n558  8.4874e-03 -3.6124e-04  3.4620e-02  4.7556e-02     9.6207e-01\n559  1.1578e-01 -2.2962e-03  1.5911e-01  2.9601e-01     7.6722e-01\n560  6.6227e+00 -3.9022e-03  3.0085e+00  3.8204e+00     1.3321e-04\n561  2.7372e-02 -3.2531e-04  3.5679e-02  1.4664e-01     8.8342e-01\n562  3.2130e-01 -8.2400e-04  7.0072e-02  1.2169e+00     2.2365e-01\n563  1.1029e-01 -4.0925e-05  6.3021e-03  1.3899e+00     1.6457e-01\n564  5.2719e-01 -8.2400e-04  6.2983e-02  2.1040e+00     3.5382e-02\n565  4.2386e-01 -4.8031e-04  7.3931e-02  1.5606e+00     1.1861e-01\n566 -2.0503e-01 -1.7389e-04  4.4739e-02 -9.6850e-01     3.3279e-01\n567  2.0166e-01 -2.5316e-04  4.8784e-02  9.1416e-01     3.6063e-01\n568  7.3130e-01 -1.1792e-03  1.8138e-01  1.7199e+00     8.5452e-02\n569  2.0417e+00 -2.2042e-03  3.3869e-01  3.5121e+00     4.4456e-04\n570  7.1880e-03 -2.5910e-04  1.0011e-01  2.3536e-02     9.8122e-01\n571  1.2340e+00 -1.6277e-03  2.5025e-01  2.4700e+00     1.3511e-02\n572 -1.4659e-01 -1.4925e-04  2.2981e-02 -9.6603e-01     3.3403e-01\n573 -2.9739e-01 -3.1865e-04  3.0540e-02 -1.6999e+00     8.9146e-02\n574  2.2340e-01 -4.8031e-04  9.2535e-02  7.3597e-01     4.6175e-01\n575 -1.7016e-01 -8.3203e-05  9.1276e-03 -1.7802e+00     7.5043e-02\n576 -8.4012e-02 -8.1339e-04  1.0416e-01 -2.5779e-01     7.9657e-01\n577  5.0585e-01 -1.6916e-03  3.2550e-01  8.8961e-01     3.7368e-01\n578  2.9012e-02 -1.2162e-05  2.3443e-03  5.9946e-01     5.4887e-01\n579  6.6482e-01 -7.6926e-04  7.3694e-02  2.4518e+00     1.4213e-02\n580 -2.8194e-01 -8.6620e-05  1.6694e-02 -2.1814e+00     2.9154e-02\n581 -1.6483e-01 -1.2649e-04  1.3876e-02 -1.3982e+00     1.6205e-01\n582  3.8743e+00 -6.0818e-03  6.6319e-01  4.7649e+00     1.8891e-06\n583 -4.3259e-02 -1.4475e-04  2.2288e-02 -2.8879e-01     7.7274e-01\n584 -5.7052e-02 -5.1577e-05  7.9423e-03 -6.3959e-01     5.2244e-01\n585  3.6430e-01 -2.9126e-04  2.7916e-02  2.1821e+00     2.9101e-02\n586  1.6093e-01 -1.2235e-04  1.8840e-02  1.1733e+00     2.4067e-01\n587  3.1158e-02 -3.8586e-05  4.2332e-03  4.7948e-01     6.3160e-01\n588  4.8875e-01 -1.1920e-03  1.3062e-01  1.3556e+00     1.7522e-01\n589  6.1094e-02 -1.0562e-04  1.3535e-02  5.2604e-01     5.9886e-01\n590  1.1394e+00 -1.5504e-03  2.3838e-01  2.3368e+00     1.9449e-02\n591 -4.7970e-01 -7.1640e-04  1.3799e-01 -1.2895e+00     1.9724e-01\n592  2.9334e-01 -6.6542e-04  7.2956e-02  1.0885e+00     2.7638e-01\n593  5.8173e-01 -5.6029e-04  5.3686e-02  2.5131e+00     1.1967e-02\n594 -4.9347e-02 -1.0562e-04  1.1586e-02 -4.5747e-01     6.4734e-01\n595  2.4317e-01 -5.6910e-04  5.4530e-02  1.0438e+00     2.9659e-01\n596 -9.3535e-02 -8.6620e-05  1.1101e-02 -8.8695e-01     3.7511e-01\n597  3.8428e-01 -1.1920e-03  2.2948e-01  8.0468e-01     4.2100e-01\n598 -1.3621e-01 -2.8497e-04  3.6512e-02 -7.1136e-01     4.7686e-01\n599  1.5652e+00 -1.9394e-03  2.9809e-01  2.8704e+00     4.0999e-03\n600  1.4039e+00 -3.9022e-03  4.2644e-01  2.1558e+00     3.1097e-02\n601  7.3697e-01 -3.1000e-03  2.9629e-01  1.3596e+00     1.7395e-01\n602  8.5261e-01 -1.5504e-03  1.6983e-01  2.0727e+00     3.8202e-02\n603  9.5775e-01 -1.4749e-03  3.7898e-01  1.5582e+00     1.1920e-01\n604  2.2091e-02 -2.9456e-05  3.7751e-03  3.6003e-01     7.1883e-01\n605  5.4810e-01 -1.2599e-03  2.4254e-01  1.1155e+00     2.6464e-01\n606  7.8103e-02 -1.2649e-04  3.2546e-02  4.3363e-01     6.6456e-01\n607  8.6743e-03 -6.3380e-06  9.7603e-04  2.7786e-01     7.8112e-01\n608 -3.8818e-01 -6.0715e-04  3.8579e-02 -1.9732e+00     4.8469e-02\n609 -2.3074e-02 -1.9868e-05  1.9048e-03 -5.2823e-01     5.9734e-01\n610  1.3380e+00 -3.2090e-03  2.4469e-01  2.7115e+00     6.6989e-03\n611  6.6415e-01 -7.1640e-04  9.1751e-02  2.1950e+00     2.8166e-02\n612  3.8157e-01 -6.0715e-04  1.1696e-01  1.1175e+00     2.6377e-01\n613 -2.9816e-01 -1.0618e-03  1.6334e-01 -7.3512e-01     4.6227e-01\n614  7.5463e-01 -1.1259e-03  1.7320e-01  1.8160e+00     6.9374e-02\n615  5.1528e-01 -9.9952e-04  1.0955e-01  1.5598e+00     1.1880e-01\n616  2.1165e-01 -9.9952e-04  2.5695e-01  4.1950e-01     6.7485e-01\n617 -2.0130e-02 -5.1577e-05  5.6583e-03 -2.6692e-01     7.8953e-01\n618  5.9947e-01 -6.6542e-04  1.0240e-01  1.8754e+00     6.0742e-02\n619  6.4364e-01 -8.8063e-04  1.1277e-01  1.9193e+00     5.4942e-02\n620  1.3031e+00 -3.7819e-03  4.1335e-01  2.0327e+00     4.2086e-02\n621  7.9825e-01 -1.2599e-03  1.9378e-01  1.8163e+00     6.9332e-02\n622  6.2773e-01 -8.2400e-04  9.0329e-02  2.0914e+00     3.6495e-02\n623  6.9558e-01 -1.6277e-03  2.5025e-01  1.3937e+00     1.6340e-01\n624  8.0750e-03 -5.2377e-04  5.0189e-02  3.8383e-02     9.6938e-01\n625  4.6860e-01 -5.6029e-04  6.1436e-02  1.8928e+00     5.8383e-02\n626  1.1250e-02 -4.0925e-05  3.9234e-03  1.8026e-01     8.5694e-01\n627 -2.9406e-02 -6.9507e-05  5.3168e-03 -4.0233e-01     6.8744e-01\n628 -1.4238e-01 -8.6620e-05  1.1101e-02 -1.3506e+00     1.7684e-01\n629 -7.3679e-03 -1.4925e-04  2.2981e-02 -4.7618e-02     9.6202e-01\n630 -5.5478e-03 -5.4275e-05  8.3578e-03 -6.0090e-02     9.5208e-01\n631  4.7785e-01 -1.4749e-03  5.6921e-01  6.3532e-01     5.2522e-01\n632  2.2707e-01 -1.2649e-04  1.6210e-02  1.7845e+00     7.4339e-02\n633  2.1351e-01 -4.3874e-04  5.6206e-02  9.0244e-01     3.6682e-01\n634  5.7511e-01 -2.3901e-03  2.6159e-01  1.1291e+00     2.5885e-01\n635  1.6371e-01 -8.6966e-04  1.3381e-01  4.4992e-01     6.5277e-01\n636  3.1633e-01 -1.7389e-04  2.6774e-02  1.9343e+00     5.3075e-02\n637  3.4468e-01 -1.4749e-03  1.4120e-01  9.2121e-01     3.5694e-01\n638 -6.3373e-02 -1.2649e-04  1.0764e-02 -6.0960e-01     5.4212e-01\n639  1.7885e-01 -8.2400e-04  9.0329e-02  5.9781e-01     5.4997e-01\n640  8.3120e+00 -1.8811e-02  2.0249e+00  5.8544e+00     4.7869e-09\n641 -2.0520e-03 -3.3373e-07  2.8403e-05 -3.8497e-01     7.0026e-01\n642  1.9527e+00 -3.2090e-03  3.5093e-01  3.3016e+00     9.6119e-04\n643  5.2612e-01 -9.9952e-04  1.5377e-01  1.3442e+00     1.7888e-01\n644  1.1201e+00 -4.7965e-03  6.1179e-01  1.4382e+00     1.5039e-01\n645  6.2063e-01 -7.6926e-04  1.4816e-01  1.6144e+00     1.0644e-01\n646  7.9197e-01 -1.1920e-03  3.0637e-01  1.4330e+00     1.5186e-01\n647  2.0377e+00 -4.2742e-03  5.4546e-01  2.7648e+00     5.6957e-03\n648  4.4925e-01 -1.2599e-03  1.3805e-01  1.2125e+00     2.2532e-01\n649 -8.4046e-03 -3.3373e-07  5.1394e-05 -1.1723e+00     2.4107e-01\n650  2.6986e-02 -3.2531e-04  5.0081e-02  1.2204e-01     9.0287e-01\n651  3.6799e-01 -4.8031e-04  7.3931e-02  1.3552e+00     1.7536e-01\n652  1.7095e-01 -1.1135e-03  1.2203e-01  4.9256e-01     6.2232e-01\n653 -8.3028e-02 -2.9456e-05  4.5360e-03 -1.2324e+00     2.1782e-01\n654  6.5987e-01 -1.2599e-03  1.9378e-01  1.5019e+00     1.3313e-01\n655  3.8028e-02 -1.2599e-03  1.6127e-01  9.7831e-02     9.2207e-01\n656  1.5301e+00 -3.4325e-03  3.7530e-01  2.5032e+00     1.2307e-02\n657 -1.1049e-01 -8.1339e-04  8.9166e-02 -3.6728e-01     7.1341e-01\n658 -5.1784e-03 -1.2468e-03  1.9176e-01 -8.9783e-03     9.9284e-01\n659  9.0495e+00 -1.7248e-02  3.2672e+00  5.0161e+00     5.2740e-07\n660 -1.2167e-01 -5.1577e-05  1.3272e-02 -1.0557e+00     2.9113e-01\n661 -3.2913e-01 -6.9507e-05  1.3396e-02 -2.8430e+00     4.4688e-03\n662 -2.2388e-02 -3.6124e-04  4.6281e-02 -1.0239e-01     9.1845e-01\n663 -4.2228e-02 -5.4386e-06  4.6287e-04 -1.9625e+00     4.9702e-02\n664  3.1197e-01 -7.0651e-04  1.3608e-01  8.4761e-01     3.9666e-01\n665 -1.6296e-03 -2.3951e-06  3.6884e-04 -8.4725e-02     9.3248e-01\n666  2.3715e-02 -5.1577e-05  1.3272e-02  2.0631e-01     8.3655e-01\n667  1.3349e-02 -1.8555e-06  2.3780e-04  8.6577e-01     3.8661e-01\n668  8.4485e-01 -1.0497e-03  1.0054e-01  2.6678e+00     7.6342e-03\n669  5.7035e-01 -1.0618e-03  2.0444e-01  1.2638e+00     2.0632e-01\n670 -3.1543e-01 -1.7389e-04  6.7196e-02 -1.2162e+00     2.2392e-01\n671 -1.1518e-01 -3.9167e-04  5.0179e-02 -5.1242e-01     6.0836e-01\n672 -9.6663e-02 -5.6910e-04  8.7591e-02 -3.2469e-01     7.4542e-01\n673  8.0602e-02 -9.2780e-04  8.8869e-02  2.7349e-01     7.8448e-01\n674  1.3145e-01 -1.6277e-03  1.5580e-01  3.3715e-01     7.3601e-01\n675  2.2983e-01 -3.2531e-04  5.0081e-02  1.0284e+00     3.0374e-01\n676  9.9270e-01 -1.3297e-03  1.4569e-01  2.6043e+00     9.2072e-03\n677  1.4623e+00 -4.2742e-03  4.6692e-01  2.1463e+00     3.1852e-02\n678  2.6920e-02 -6.3380e-06  1.6310e-03  6.6675e-01     5.0493e-01\n679 -5.8645e-02 -6.6449e-05  1.0232e-02 -5.7910e-01     5.6252e-01\n680 -8.5911e-02 -2.5910e-04  2.8419e-02 -5.0808e-01     6.1140e-01\n681  1.9560e+00 -4.6631e-03  7.1476e-01  2.3191e+00     2.0389e-02\n682  1.0692e+00 -1.4014e-03  2.6973e-01  2.0614e+00     3.9261e-02\n683 -6.5842e-02 -6.6542e-04  1.2817e-01 -1.8205e-01     8.5554e-01\n684  3.6742e+00 -1.2747e-02  1.2065e+00  3.3566e+00     7.8921e-04\n685  2.9738e-01 -1.4014e-03  3.6011e-01  4.9790e-01     6.1855e-01\n686  3.0015e-01 -1.1920e-03  2.2948e-01  6.2907e-01     5.2931e-01\n687  9.3505e-01 -1.1259e-03  1.2339e-01  2.6651e+00     7.6963e-03\n688  2.5622e-01 -2.9126e-04  3.1946e-02  1.4352e+00     1.5124e-01\n689  8.9191e-01 -5.1531e-04  6.6011e-02  3.4735e+00     5.1377e-04\n690  6.1243e-02 -8.2400e-04  1.5869e-01  1.5580e-01     8.7619e-01\n691  1.6924e-01 -8.6966e-04  1.6748e-01  4.1567e-01     6.7765e-01\n692  1.4857e-01 -2.7477e-05  4.2313e-03  2.2845e+00     2.2343e-02\n693  1.0077e+00 -1.1920e-03  1.5259e-01  2.5827e+00     9.8023e-03\n694  1.3377e+00 -2.3901e-03  1.6560e-01  3.2931e+00     9.9086e-04\n695 -4.2032e-01 -1.0618e-03  1.6334e-01 -1.0374e+00     2.9957e-01\n696 -2.0376e-01 -3.9905e-04  3.0514e-02 -1.1641e+00     2.4436e-01\n697  1.0710e+00 -1.4749e-03  2.2680e-01  2.2520e+00     2.4322e-02\n698 -1.3067e-01 -2.5835e-03  3.3026e-01 -2.2289e-01     8.2362e-01\n699  7.9880e-01 -1.6916e-03  3.2550e-01  1.4031e+00     1.6059e-01\n700 -3.1578e-01 -7.0651e-04  1.3608e-01 -8.5411e-01     3.9305e-01\n701  2.4912e-02 -5.1577e-05  4.3894e-03  3.7679e-01     7.0633e-01\n702 -3.4236e-03 -3.3373e-07  4.2772e-05 -5.2343e-01     6.0067e-01\n703  3.3251e-01 -1.1920e-03  2.2948e-01  6.9661e-01     4.8605e-01\n704  1.9596e-01 -8.3203e-05  1.6036e-02  1.5482e+00     1.2158e-01\n705  8.8341e-01 -1.2599e-03  1.9378e-01  2.0097e+00     4.4462e-02\n706 -2.1826e-01 -9.8783e-04  1.2648e-01 -6.1094e-01     5.4124e-01\n707  7.3790e-01 -1.5504e-03  2.3838e-01  1.5145e+00     1.2990e-01\n708  6.4220e-02 -1.7389e-04  1.3300e-02  5.5837e-01     5.7659e-01\n709  6.0549e-02 -1.8249e-05  2.3389e-03  1.2524e+00     2.1044e-01\n710 -2.7763e-01 -1.5504e-03  3.9834e-01 -4.3743e-01     6.6180e-01\n711 -8.4724e-03 -5.4386e-06  1.0483e-03 -2.6151e-01     7.9370e-01\n712 -3.6620e-03 -1.5384e-07  1.6879e-05 -8.9133e-01     3.7275e-01\n713 -2.3849e-01 -1.0497e-03  8.9248e-02 -7.9480e-01     4.2673e-01\n714 -3.3298e-01 -6.0715e-04  6.6571e-02 -1.2882e+00     1.9767e-01\n715  6.7295e-01 -1.5504e-03  2.3838e-01  1.3815e+00     1.6713e-01\n716  7.3616e-01 -9.3914e-04  7.9854e-02  2.6084e+00     9.0956e-03\n717  7.6129e-01 -1.3297e-03  2.5595e-01  1.5074e+00     1.3171e-01\n718 -4.2922e-03 -1.5384e-07  3.9589e-05 -6.8215e-01     4.9515e-01\n719  3.2251e-01 -5.2377e-04  4.0046e-02  1.6142e+00     1.0648e-01\n720  6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00     1.3920e-02\n721  8.3329e-02 -1.4475e-04  1.8549e-02  6.1289e-01     5.3995e-01\n722  5.3675e-02 -1.7389e-04  2.2283e-02  3.6074e-01     7.1830e-01\n723  4.8583e-02 -5.4275e-05  8.3578e-03  5.3201e-01     5.9472e-01\n724  7.1148e-01 -9.2780e-04  1.7867e-01  1.6854e+00     9.1907e-02\n725  1.1053e-01 -3.5422e-04  3.8849e-02  5.6258e-01     5.7372e-01\n726 -3.1866e-01 -6.5588e-04  8.4006e-02 -1.0972e+00     2.7257e-01\n727  1.1424e-02 -2.3951e-06  4.6165e-04  5.3181e-01     5.9486e-01\n728  5.7671e-01 -7.1640e-04  7.8541e-02  2.0604e+00     3.9362e-02\n729  2.7894e-01 -5.6910e-04  6.2402e-02  1.1189e+00     2.6317e-01\n730  6.0619e-03 -3.3373e-07  5.1394e-05  8.4562e-01     3.9776e-01\n731  3.0813e-01 -7.6926e-04  6.5421e-02  1.2077e+00     2.2716e-01\n732  6.7941e-01 -1.4749e-03  1.6158e-01  1.6939e+00     9.0288e-02\n733 -1.1686e-02 -2.3951e-06  3.0697e-04 -6.6684e-01     5.0488e-01\n734  4.6362e-03 -2.3951e-06  3.6884e-04  2.4153e-01     8.0915e-01\n735  9.6682e-01 -2.9930e-03  3.8244e-01  1.5682e+00     1.1683e-01\n736  1.0961e+00 -1.2468e-03  3.2043e-01  1.9386e+00     5.2554e-02\n737  6.7907e-01 -1.0618e-03  1.6334e-01  1.6828e+00     9.2404e-02\n738 -7.6637e-03 -1.0903e-05  8.3406e-04 -2.6499e-01     7.9102e-01\n739  7.8882e-01 -1.5504e-03  1.4841e-01  2.0517e+00     4.0203e-02\n740  3.4338e-01 -1.2235e-04  1.8840e-02  2.5026e+00     1.2329e-02\n741  2.0732e-02 -1.2162e-05  1.0351e-03  6.4477e-01     5.1908e-01\n742  4.6167e-02 -5.4386e-06  8.3753e-04  1.5955e+00     1.1061e-01\n743 -2.1810e-04 -1.4475e-04  1.5879e-02 -5.8210e-04     9.9954e-01\n744  1.3116e-01 -4.0925e-05  7.8878e-03  1.4773e+00     1.3961e-01\n745  1.9287e-01 -3.2531e-04  2.7678e-02  1.1612e+00     2.4555e-01\n746  3.4420e-01 -2.0041e-04  2.5680e-02  2.1491e+00     3.1624e-02\n747  7.0914e-01 -1.1920e-03  1.8334e-01  1.6589e+00     9.7129e-02\n748 -7.6487e-02 -5.6029e-04  6.1436e-02 -3.0633e-01     7.5936e-01\n749  1.1859e-01 -6.6449e-05  1.0232e-02  1.1731e+00     2.4077e-01\n750 -8.0353e-03 -1.9868e-05  2.1798e-03 -1.7168e-01     8.6369e-01\n751  8.4291e-01 -2.5835e-03  2.8271e-01  1.5902e+00     1.1180e-01\n752  1.2249e-01 -3.6124e-04  6.9603e-02  4.6565e-01     6.4147e-01\n753  6.0254e-02 -6.0715e-04  6.6571e-02  2.3588e-01     8.1352e-01\n754 -6.1064e-02 -8.3203e-05  1.0663e-02 -5.9055e-01     5.5482e-01\n755  5.4543e-03 -1.5384e-07  1.6879e-05  1.3276e+00     1.8430e-01\n756  2.2042e+00 -1.2468e-03  1.3661e-01  5.9669e+00     2.4176e-09\n757  1.4624e+00 -6.3882e-03  9.7748e-01  1.4856e+00     1.3738e-01\n758  1.4254e+00 -4.4019e-03  4.2017e-01  2.2058e+00     2.7401e-02\n759  1.7873e+00 -6.7020e-03  7.3036e-01  2.0992e+00     3.5802e-02\n760 -1.1477e-01 -2.9456e-05  4.5360e-03 -1.7036e+00     8.8453e-02\n761 -3.4257e-01 -7.1640e-04  1.8422e-01 -7.9648e-01     4.2575e-01\n762  4.8213e-01 -6.6542e-04  8.5226e-02  1.6538e+00     9.8170e-02\n763  1.0412e+00 -1.4014e-03  5.4087e-01  1.4176e+00     1.5631e-01\n764  9.9111e-01 -1.1259e-03  1.7320e-01  2.3842e+00     1.7116e-02\n765  9.1919e-02 -5.1577e-05  6.6100e-03  1.1312e+00     2.5796e-01\n766  1.0843e+00 -1.6277e-03  3.1322e-01  1.9403e+00     5.2346e-02\n767  6.9180e-01 -1.2599e-03  1.9378e-01  1.5744e+00     1.1539e-01\n768  8.1963e-02 -1.0184e-04  1.1172e-02  7.7642e-01     4.3750e-01\n769 -5.1902e-01 -3.9905e-04  7.6885e-02 -1.8704e+00     6.1429e-02\n770 -5.5710e-01 -4.8031e-04  6.1529e-02 -2.2440e+00     2.4834e-02\n771  1.0395e+01 -1.1260e-02  2.1459e+00  7.1035e+00     1.2159e-12\n772 -2.5409e-01 -4.7222e-04  1.8243e-01 -5.9380e-01     5.5265e-01\n773 -2.3990e-02 -5.4386e-06  5.2141e-04 -1.0504e+00     2.9354e-01\n774 -1.4493e-01 -2.0041e-04  3.8621e-02 -7.3644e-01     4.6146e-01\n    nga_wp.shapeName.fips.\n1                        1\n2                        2\n3                        3\n4                        4\n5                        5\n6                        6\n7                        7\n8                        8\n9                        9\n10                      10\n11                      11\n12                      12\n13                      13\n14                      14\n15                      15\n16                      16\n17                      17\n18                      18\n19                      19\n20                      20\n21                      21\n22                      22\n23                      23\n24                      24\n25                      25\n26                      26\n27                      27\n28                      28\n29                      29\n30                      30\n31                      31\n32                      32\n33                      33\n34                      34\n35                      35\n36                      36\n37                      37\n38                      38\n39                      39\n40                      40\n41                      41\n42                      42\n43                      43\n44                      44\n45                      45\n46                      46\n47                      47\n48                      48\n49                      49\n50                      50\n51                      51\n52                      52\n53                      53\n54                      54\n55                      55\n56                      56\n57                      57\n58                      58\n59                      59\n60                      60\n61                      61\n62                      62\n63                      63\n64                      64\n65                      65\n66                      66\n67                      67\n68                      68\n69                      69\n70                      70\n71                      71\n72                      72\n73                      73\n74                      74\n75                      75\n76                      76\n77                      77\n78                      78\n79                      79\n80                      80\n81                      81\n82                      82\n83                      83\n84                      84\n85                      85\n86                      86\n87                      87\n88                      88\n89                      89\n90                      90\n91                      91\n92                      92\n93                      93\n94                      94\n95                      94\n96                      95\n97                      96\n98                      97\n99                      98\n100                     99\n101                    100\n102                    101\n103                    102\n104                    103\n105                    104\n106                    105\n107                    106\n108                    107\n109                    108\n110                    109\n111                    110\n112                    111\n113                    112\n114                    113\n115                    114\n116                    115\n117                    116\n118                    117\n119                    118\n120                    119\n121                    120\n122                    121\n123                    122\n124                    123\n125                    124\n126                    125\n127                    126\n128                    127\n129                    128\n130                    129\n131                    130\n132                    131\n133                    132\n134                    133\n135                    134\n136                    135\n137                    136\n138                    137\n139                    138\n140                    139\n141                    140\n142                    141\n143                    142\n144                    143\n145                    144\n146                    145\n147                    146\n148                    147\n149                    148\n150                    149\n151                    150\n152                    151\n153                    152\n154                    153\n155                    154\n156                    155\n157                    156\n158                    157\n159                    158\n160                    159\n161                    160\n162                    161\n163                    162\n164                    163\n165                    164\n166                    165\n167                    166\n168                    167\n169                    168\n170                    169\n171                    170\n172                    171\n173                    172\n174                    173\n175                    174\n176                    175\n177                    176\n178                    177\n179                    178\n180                    179\n181                    180\n182                    181\n183                    182\n184                    183\n185                    184\n186                    185\n187                    186\n188                    187\n189                    188\n190                    189\n191                    190\n192                    191\n193                    192\n194                    193\n195                    194\n196                    195\n197                    196\n198                    197\n199                    198\n200                    199\n201                    200\n202                    201\n203                    202\n204                    203\n205                    204\n206                    205\n207                    206\n208                    207\n209                    208\n210                    209\n211                    210\n212                    211\n213                    212\n214                    213\n215                    214\n216                    215\n217                    216\n218                    217\n219                    218\n220                    219\n221                    220\n222                    221\n223                    222\n224                    223\n225                    224\n226                    225\n227                    226\n228                    227\n229                    228\n230                    229\n231                    230\n232                    231\n233                    232\n234                    233\n235                    234\n236                    235\n237                    236\n238                    237\n239                    238\n240                    239\n241                    240\n242                    241\n243                    242\n244                    243\n245                    244\n246                    245\n247                    246\n248                    247\n249                    248\n250                    249\n251                    250\n252                    251\n253                    252\n254                    253\n255                    254\n256                    255\n257                    256\n258                    257\n259                    258\n260                    259\n261                    260\n262                    261\n263                    262\n264                    263\n265                    264\n266                    265\n267                    266\n268                    267\n269                    268\n270                    269\n271                    270\n272                    271\n273                    272\n274                    273\n275                    274\n276                    275\n277                    276\n278                    277\n279                    278\n280                    279\n281                    280\n282                    281\n283                    282\n284                    283\n285                    284\n286                    285\n287                    286\n288                    287\n289                    288\n290                    289\n291                    290\n292                    291\n293                    292\n294                    293\n295                    294\n296                    295\n297                    296\n298                    297\n299                    298\n300                    299\n301                    300\n302                    301\n303                    302\n304                    303\n305                    303\n306                    304\n307                    305\n308                    306\n309                    307\n310                    308\n311                    309\n312                    310\n313                    311\n314                    312\n315                    313\n316                    314\n317                    315\n318                    316\n319                    317\n320                    318\n321                    319\n322                    320\n323                    321\n324                    322\n325                    323\n326                    324\n327                    325\n328                    326\n329                    327\n330                    328\n331                    329\n332                    330\n333                    331\n334                    332\n335                    333\n336                    334\n337                    335\n338                    336\n339                    337\n340                    338\n341                    339\n342                    340\n343                    341\n344                    342\n345                    343\n346                    344\n347                    345\n348                    346\n349                    347\n350                    348\n351                    349\n352                    350\n353                    351\n354                    352\n355                    353\n356                    353\n357                    354\n358                    355\n359                    356\n360                    357\n361                    358\n362                    359\n363                    360\n364                    361\n365                    362\n366                    363\n367                    364\n368                    365\n369                    366\n370                    367\n371                    368\n372                    369\n373                    370\n374                    371\n375                    372\n376                    373\n377                    374\n378                    375\n379                    376\n380                    377\n381                    378\n382                    379\n383                    380\n384                    381\n385                    382\n386                    383\n387                    384\n388                    385\n389                    386\n390                    387\n391                    388\n392                    389\n393                    390\n394                    391\n395                    392\n396                    393\n397                    394\n398                    395\n399                    396\n400                    397\n401                    398\n402                    399\n403                    400\n404                    401\n405                    402\n406                    403\n407                    404\n408                    405\n409                    406\n410                    407\n411                    408\n412                    409\n413                    410\n414                    411\n415                    412\n416                    413\n417                    414\n418                    415\n419                    416\n420                    417\n421                    418\n422                    419\n423                    420\n424                    421\n425                    422\n426                    423\n427                    424\n428                    425\n429                    426\n430                    427\n431                    428\n432                    429\n433                    430\n434                    431\n435                    432\n436                    433\n437                    434\n438                    435\n439                    436\n440                    437\n441                    438\n442                    439\n443                    440\n444                    441\n445                    442\n446                    443\n447                    444\n448                    445\n449                    446\n450                    447\n451                    448\n452                    449\n453                    450\n454                    451\n455                    452\n456                    453\n457                    454\n458                    455\n459                    456\n460                    457\n461                    458\n462                    459\n463                    460\n464                    461\n465                    462\n466                    463\n467                    464\n468                    465\n469                    466\n470                    467\n471                    468\n472                    469\n473                    470\n474                    471\n475                    472\n476                    473\n477                    474\n478                    475\n479                    476\n480                    477\n481                    478\n482                    479\n483                    480\n484                    481\n485                    482\n486                    483\n487                    484\n488                    485\n489                    486\n490                    487\n491                    488\n492                    489\n493                    490\n494                    491\n495                    492\n496                    493\n497                    494\n498                    495\n499                    496\n500                    497\n501                    498\n502                    499\n503                    500\n504                    501\n505                    502\n506                    503\n507                    504\n508                    505\n509                    506\n510                    507\n511                    508\n512                    509\n513                    510\n514                    511\n515                    512\n516                    513\n517                    514\n518                    515\n519                    516\n520                    516\n521                    517\n522                    518\n523                    519\n524                    520\n525                    521\n526                    522\n527                    523\n528                    524\n529                    525\n530                    526\n531                    527\n532                    528\n533                    529\n534                    530\n535                    531\n536                    532\n537                    533\n538                    534\n539                    535\n540                    536\n541                    537\n542                    538\n543                    539\n544                    540\n545                    541\n546                    542\n547                    542\n548                    543\n549                    544\n550                    545\n551                    546\n552                    547\n553                    548\n554                    549\n555                    550\n556                    551\n557                    552\n558                    553\n559                    554\n560                    555\n561                    556\n562                    557\n563                    558\n564                    559\n565                    560\n566                    561\n567                    562\n568                    563\n569                    564\n570                    565\n571                    566\n572                    567\n573                    568\n574                    569\n575                    570\n576                    571\n577                    572\n578                    573\n579                    574\n580                    575\n581                    576\n582                    577\n583                    578\n584                    579\n585                    580\n586                    581\n587                    582\n588                    583\n589                    584\n590                    585\n591                    586\n592                    587\n593                    588\n594                    589\n595                    590\n596                    591\n597                    592\n598                    593\n599                    594\n600                    595\n601                    596\n602                    597\n603                    598\n604                    599\n605                    600\n606                    601\n607                    602\n608                    603\n609                    604\n610                    605\n611                    606\n612                    607\n613                    608\n614                    609\n615                    610\n616                    611\n617                    612\n618                    613\n619                    614\n620                    615\n621                    616\n622                    617\n623                    618\n624                    619\n625                    620\n626                    621\n627                    622\n628                    623\n629                    624\n630                    625\n631                    626\n632                    627\n633                    628\n634                    629\n635                    630\n636                    631\n637                    632\n638                    633\n639                    634\n640                    635\n641                    636\n642                    637\n643                    638\n644                    639\n645                    640\n646                    641\n647                    642\n648                    643\n649                    644\n650                    645\n651                    646\n652                    647\n653                    648\n654                    649\n655                    650\n656                    651\n657                    652\n658                    653\n659                    654\n660                    655\n661                    656\n662                    657\n663                    658\n664                    659\n665                    660\n666                    661\n667                    662\n668                    663\n669                    664\n670                    665\n671                    666\n672                    667\n673                    668\n674                    669\n675                    670\n676                    671\n677                    672\n678                    673\n679                    674\n680                    675\n681                    676\n682                    677\n683                    678\n684                    679\n685                    680\n686                    681\n687                    682\n688                    683\n689                    684\n690                    685\n691                    686\n692                    687\n693                    688\n694                    688\n695                    689\n696                    690\n697                    691\n698                    692\n699                    693\n700                    694\n701                    695\n702                    696\n703                    697\n704                    698\n705                    699\n706                    700\n707                    701\n708                    702\n709                    703\n710                    704\n711                    705\n712                    706\n713                    707\n714                    708\n715                    709\n716                    710\n717                    711\n718                    712\n719                    713\n720                    714\n721                    715\n722                    716\n723                    717\n724                    718\n725                    719\n726                    720\n727                    721\n728                    722\n729                    723\n730                    724\n731                    725\n732                    726\n733                    727\n734                    728\n735                    729\n736                    730\n737                    731\n738                    732\n739                    733\n740                    734\n741                    735\n742                    736\n743                    737\n744                    738\n745                    739\n746                    740\n747                    741\n748                    742\n749                    743\n750                    744\n751                    745\n752                    746\n753                    747\n754                    748\n755                    749\n756                    750\n757                    751\n758                    752\n759                    753\n760                    754\n761                    755\n762                    756\n763                    757\n764                    758\n765                    759\n766                    760\n767                    761\n768                    762\n769                    763\n770                    764\n771                    765\n772                    766\n773                    767\n774                    768\n\n\n\n\n-- append local Moran’s I dataframe\nAppend local Moran’s I dataframe (i.e.localMI) before mapping the local Moran’s I map.\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n3.7.1.2 plot local Moran’s I values\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n3.7.1.3 plot local Moran’s I p-value\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-value\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)  +\n  tm_layout(legend.height = 0.3, legend.width = 0.3)\n\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.26, legend.width = 0.3)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1.5, ncol=1)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n3.8 Creating LISA Cluster Map\nPlot the Moran scatterplot before generate the LISA cluster map.\n\n3.8.1 Plot Moran Scatterplot\nUse the code chunk below.\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nnci <- moran.plot(nga_wp$wpt_nonFunctional, ngaWp_rswmQW,\n                  labels=as.character(nga_wp$shapeName), \n                  xlab=\"Non-Functional Water Points\", \n                  ylab=\"Spatially Lag wpt_nonFunctional\")\n\n\n\n\n\n\n3.8.1.1 plot Moran Scatterplot with Standardised Variable\n\nnga_wp$z.wpt_nonFunctional <- scale(nga_wp$wpt_nonFunctional) %>% as.vector \n\n\n\n3.8.1.2 plot Moran Scatterplot\n\nnci2 <- moran.plot(nga_wp$z.wpt_nonFunctional, ngaWp_rswmQW,\n                   labels=as.character(nga_wp$shapeName),\n                   xlab=\"z-wpt_nonFunctional\", \n                   ylab=\"Spatially Lag z-wpt_nonFunctional\")\n\n\n\n\n\n\n3.8.2 Prepare LISA Map Classes\nUse code chunk below.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- nga_wp$wpt_nonFunctional - mean(nga_wp$wpt_nonFunctional)    \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n3.8.3 Plot LISA Map\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\nwpt_nonFunctional <- qtm(nga_wp, \"wpt_nonFunctional\") +\n  tm_layout(legend.height = 0.28, legend.width = 0.25)\n\nnga_wp.localMI$quadrant <- quadrant \ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\") \n\nLISAmap <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(legend.height = 0.35, legend.width = 0.3)\n\ntmap_arrange(wpt_nonFunctional, LISAmap, asp=1.5, ncol=1)\n\n\n\n\n\n\n\n\n3.9 Hot Spot and Cold Spot Area Analysis\n\n3.9.1 Analyse with Getis and Ord’s G-Statistics\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13.86   28.12   34.99   36.19   44.54   67.50 \n\nupper_threshold <- max(unlist(nbdists(k1, coords, longlat = TRUE)))\n\n\nwm_d39 <- dnearneigh(coords, 0, upper_threshold, longlat = TRUE)\nwm_d39\n\n\nwm39_lw <- nb2listw(wm_d39, style = 'B')\nsummary(wm39_lw)\n\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\n\n3.9.2 Compute Gi Statistics Using Fixed Distance\n\nfips <- order(nga_wp$shapeName)\ngi.fixed <- localG(nga_wp$wpt_nonFunctional, wm39_lw)\ngi.fixed\n\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\nwpt_nonFunctional <- qtm(nga_wp, \"wpt_nonFunctional\") +\n  tm_layout(legend.height = 0.28, legend.width = 0.25)\n\nGimap <-tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.28, legend.width = 0.25)\n\ntmap_arrange(nga_wp, Gimap, asp=1.5, ncol=1)\n\n\n\n3.9.3 Compute Gi Statistics Using Adaptive Distance\n\nfips <- order(nga_wp$shapeName)\ngi.adaptive <- localG(nga_wp$wpt_nonFunctional, knn_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\nwpt_nonFunctional <- qtm(nga_wp, \"wpt_nonFunctional\") +\n  tm_layout(legend.height = 0.28, legend.width = 0.25)\n\nGimap <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(legend.height = 0.28, legend.width = 0.25)\n\ntmap_arrange(wpt_nonFunctional,Gimap,asp=1.5,ncol=1)"
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html",
    "title": "Geographically Weighted Regression",
    "section": "",
    "text": "case study : Build hedonic models for condominiums in 2015."
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#overview",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#overview",
    "title": "Geographically Weighted Regression",
    "section": "6.1 OVERVIEW",
    "text": "6.1 OVERVIEW\nGeographically weighted regression (GWR) is a spatial statistical technique that considers non-stationary variables (e.g., climate, demographic factors and physical environment characteristics). It models the local relationships between the independent variables and an outcome of interest, otherwise known as the dependent variable.\nThis exercise focuses on building hedonic pricing models by using GWR methods.\n\nThe dependent variable is the resale prices of condominiums in 2015.\nThe independent variables are divided into either structural or location."
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#r-package-required",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#r-package-required",
    "title": "Geographically Weighted Regression",
    "section": "6.2 R PACKAGE REQUIRED",
    "text": "6.2 R PACKAGE REQUIRED\nThe following are the packages required for this exercise :\n\nBuilding OLS and performing diagnostics tests\n\nolsrr\n\nols.regress( ) - 6.5.3\nols.vif.tol( ) - 6.5.5\nols_plot_resid_fit( ) - 6.5.5.1\nols_plot_resid_hist( ) - 6.5.5.2\nols_test_normality( ) - 6.5.5.2\n\n\nCalibrating geographically weighted family of models\n\nGWmodel\n\nbw.gwr( ) - 6.6.1.1\n\n\nMultivariate data visualisation and analysis\n\ncorrplot\n\ncorrplot( ) - 6.5.2.1\n\n\nSpatial data handling\n\nsf\n\nst_read( ) - 6.3.2\nst_transform( ) - 6.3.2.1\nst_crs( ) - 6.3.2.2\nst_bbox( ) - 6.3.2.3\nst_as_sf( ) - 6.3.4.1\nas_spatial( ) - 6.5.5.3\n\n\nAttribute data handling\n\ntidyverse\n\nreadr\n-- read_csv( ) - 6.3.3\nggplot2\n-- ggplot( ) - 6.4.1\n-- geom_point( ) - 6.5.1.2\ndplyr\n-- glimpse( ) - 6.3.3.1\n-- mutate( ) - 6.4.2.1\nutils\n-- head( ) - 6.3.3.2, 6.3.3.3\n\n\nChoropleth mapping\n\ntmap\n\ntmap_mode( ) - 6.4.4.1, 6.4.4.3\ntm_dots( ) - 6.4.4.2\ntm_view( ) - 6.4.4.2\n\n\nggpubr\n\nggarrange( ) - 6.4.3,\n\ngtsummary\n\ntbl_regression( ) - 6.5.4\n\nspdep\n\nnb2listw( ) - 6.5.5.5\nlm.morantest( ) - 6.5.5.5\n\nstats\n\nlm( ) - 6.5.1\n\nBase\n\nsummary( ) - 6.3.3.4\n\n\nThe code chunks below to install and launches these R packages into the R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, utils)\n\nRemarks :\nGWmodel package provides a collection of localised spatial statistical methods, namely :\n\nGW summary statistics,\nGW principal components analysis,\nGW discriminant analysis and various forms of GW regression;\nBasic and robust (outlier resistant) forms.\n\nOlsrr package is specially programmed for performing OLS regression. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures"
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#geospatial-data",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#geospatial-data",
    "title": "Geographically Weighted Regression",
    "section": "6.3 GEOSPATIAL DATA",
    "text": "6.3 GEOSPATIAL DATA\n\n6.3.1 Acquire Data Source\nTwo data sets will be used in this model-building exercise, they are:\n\nURA Master Plan subzone boundary :\n\nESRI shapefile format (i.e. MP14_SUBZONE_WEB_PL) in svy21 projected coordinates systems\nConsists of URA Master Plan 2014’s planning subzone boundaries.\nPolygon features are used to represent these geographic boundaries.\n\ncondo_resale_2015 :\n\nCSV format, i.e. condo_resale_2015.csv.\n\n\n\n\n6.3.2 Import Geospatial Data\nUsage of the code chunk below :\nst_read( ) - sf - to import MP_SUBZONE_WEB_PL shapefile.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS624\\in-class_ex\\in-class_ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nRemarks :\n\nmpsz is the R simple-feature object contain the imported MP14_SUBZONE_WEB_PL shapefile.\nThe geometry type is multipolygon.\nmpsz simple feature object does not have EPSG information.\n\n\n6.3.2.1 update CRS information\nUsage of the code chunk below :\nst_transform( ) - sf - to update the newly imported mpsz with the correct ESPG code, i.e. 3414.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\n\n\n6.3.2.2 verify transformed projection coordinate system\nUsage of the code chunk below :\nst_crs( ) - sf - to verify the projection metadata of the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nRemarks :\nEPSG code is indicated as 3414.\n\n\n6.3.2.3 reveal mpsz_svy21\nUsage of the code chunk below :\nst_bbox( ) - sf - to return bounding of the mpsz_svy21 simple feature set.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n6.3.3 Import Aspatial Data\nUsage of the code chunk below :\nread_csv( ) - readr - to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"/jephOstan/ISSS624/data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n6.3.3.1 examine condo_resale\nglimpse( ) - dplyr - to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\n6.3.3.2 examine data in xcoord column\nhead( ) - utils - to list the value of “LONGITUDE” under condo_resale.\n\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n\n6.3.3.3 examine data in ycoord column\nhead( ) - utils - to list the value of “LATITUDE” under condo_resale.\n\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\n\n6.3.3.4 summarise cond_resale\nUsage of the code chunk below :\nsummary( ) - base - to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\n6.3.4 Wrangle Aspatial Data\n\n6.3.4.1 convert aspatial data frame into a sf object\nUsage of the code chunk below :\nst_as_sf( ) - sf - to convert aspatial condo_resale tibble data frame to a sf object.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nRemarks :\nThe coordinates from wgs84, i.e. crs : 4326 to svy21, i.e. crs : 3414.\nhead( ) - utils - to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nRemarks :\nThe output is in point feature data frame."
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#exploratory-data-analysis-eda",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#exploratory-data-analysis-eda",
    "title": "Geographically Weighted Regression",
    "section": "6.4 EXPLORATORY DATA ANALYSIS (EDA)",
    "text": "6.4 EXPLORATORY DATA ANALYSIS (EDA)\nUse statistical graphics functions to perform EDA.\n\n6.4.1 Plot Distribution of “SELLING_PRICE”\nUsage of the code chunk below :\nggplot( ) - ggplot2 - to plot the distribution of “SELLING_PRICE”.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nRemarks :\n\nThe figure above reveals a right-skewed distribution. This means that more condominium units were transacted at relatively lower prices.\nStatistically, the skewed distribution can be normalised by using log transformation.\n\n\n\n6.4.2 Plot “LOG_SELLING_PRICE”\n\n6.4.2.1 derive new variable :: “LOG_SELLING_PRICE”\nUsage of the code chunk below :\nmutate( ) - dplyr - to derive a new variable - “LOG_SELLING_PRICE” by using a log transformation on the variable “SELLING_PRICE”.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\n\n6.4.2.2 plot “LOG_SELLING_PRICE”\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nRemarks :\nNotice the distribution is relatively less skewed after the transformation.\n\n\n\n6.4.3 Plot Multiple Histogram :: Distribution of Variables\nUsage of the code chunk below :\nggarrange( ) - ggpubr - to draw multiple small histograms (also known as trellis plot) consisting of 12 histograms. Then, ggarrange() is used to organise these histograms into 3 columns by 4 rows of multiple small plots.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.4.4 Plot Statistical Point Map\nReveal the geospatial distribution condominium resale prices in Singapore.\n\n6.4.4.1 set tmap mode to interactive viewing\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\n\n6.4.4.2 plot interactive point symbol map\nUsage of the code chunk below :\ntm_dots( ) - tmap - to create an interactive point symbol map.\ntm_view( ) - tmap - use set.zoom.limits function to set the minimum and maximum zoom level to 11 and 14 respectively.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_polygons()+\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n6.4.4.3 turn R display into “plot” mode\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#hedonic-pricing-modelling",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#hedonic-pricing-modelling",
    "title": "Geographically Weighted Regression",
    "section": "6.5 HEDONIC PRICING MODELLING",
    "text": "6.5 HEDONIC PRICING MODELLING\nBuild hedonic pricing models for condominium resale units using lm() of R base.\n\n6.5.1 Build with Simple Linear Regression Method\nUsage of the code chunk below :\nlm( ) - stats - to build a simple linear regression model by using :\n\n“SELLING_PRICE” as the dependent variable.\n“AREA_SQM” as the independent variable.\n\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nRemarks :\n\nlm( ) returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\nThe generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\n\n6.5.1.1 summarise condo.slr\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nRemarks :\n\nThe output report reveals that the “SELLING_PRICE” can be explained by using the formula :\n*y = - 258121.1 + 14719 x1*\nThe R-squared of 0.4518 reveals that the simple regression model can explain about 45% of the resale prices.\nThe p-value is smaller than 0.0001, rejecting the null hypothesis. Therewith, the simple linear regression model is inferred to be a good estimator for “SELLING_PRICE”.\nThe Coefficients : both p-values for the “Intercept” and “ARA_SQM” are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. Thus, B0 and B1 are inferred to be good parameter estimates.\n\n\n\n6.5.1.2 visualise fit curve on scatterplot\nUsage of the code chunk below :\ngeom_point( ) - ggplot2 - to visualise the best fit curve on a scatter plot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nRemarks :\nThere are a few statistical outliers with relatively high selling prices.\n\n\n\n6.5.2 Multiple Linear Regression Method\n\nBefore building a multiple regression model, it is important to ensure that the independent variables used are not highly correlated to each other.\nMulticollinearity happens when highly correlated independent variables are used in building a regression model, and the quality of the model will be compromised.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables.\nBesides the pairs() of R, many packages support the display of a correlation matrix.\n\n\n6.5.2.1 Visualising the relationships of the independent variables\nUsage of the code chunk below :\ncorrplot( ) - corrplot - to plot a scatter plot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.55, method = \"number\", type = \"upper\")\n\n\n\n\nRemarks :\n\nAvoid condo_resale_sf as the table consists of “geometry” at the end.\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix.\nThere are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”.\nAOE = orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n6.5.2.2 build hedonic pricing model\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nRemarks :\nNot all the independent variables are statistically significant. The model will be calibrated by removing those variables which are not statistically significant.\n\n\n\n6.5.3 Prepare Publication Quality Table :: olsrr method\nUsage of the code chunk below :\nols_regress( ) - olsrr - to calibrate the model.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nRemarks :\n\nANOVA Significant value is 0.0000, hence allow to reject null hypothesis.\n“AGE” is inverse relationship with the price. E.g. 1 unit increase of the “AGE”, the price will reduce by -$24687.739.\n“FREEHOLD” is True, the price will increase by $350599.812.\n\n\n\n6.5.4 Prepare Publication Quality Table :: gtsummary method\nUsage of the code chunk below :\ntbl_regression( ) - gtsummary - to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nRemarks :\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n6.5.5 Check Multicolinearity\nUsage of the code chunk below :\nols_vif_tol( ) - olsrr - to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nRemarks :\nSince the VIF of the independent variables is less than 10, can safely conclude that there is no sign of multicollinearity among the independent variables.\n\n6.5.5.1 test for Non-Linearity\nIn multiple linear regression, it is important to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nUsage of the code chunk below :\nols_plot_resid_fit( ) - olsrr - to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nRemarks :\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.5.5.2 test for Normality Assumption\nUsage of the code chunk below :\nols_plot_resid_hist( ) - olsrr - to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nRemarks :\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nols_test_normality( ) - olsrr - to use formal statistical test methods.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nRemarks :\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence, reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n6.5.5.3 test for Spatial Autocorrelation\n\nThe hedonic model is using geographically referenced attributes, hence it is also important to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, condo_resale.sf need to be converted from sf data frame into a SpatialPointsDataFrame.\nFirst, export the residual of the hedonic pricing model and save it as a data frame.\n\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nUsage of the code chunk below :\nas_spatial( ) - sf - to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\n\n6.5.5.4 create interactive point symbol map\nUse tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nRemarks :\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof the observation is true, the Moran’s I test will be performed.\n\n\n6.5.5.5 compute distance-based weight matrix\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nnb2listw( ) - spdep - to convert the output neighbours lists, i.e. nb into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nlm.morantest( ) - spdep - to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nRemarks :\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, the residuals are inferred to resemble cluster distribution."
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#hedonic-pricing-modelling-gwmodel",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#hedonic-pricing-modelling-gwmodel",
    "title": "Geographically Weighted Regression",
    "section": "6.6 HEDONIC PRICING MODELLING :: GWmodel",
    "text": "6.6 HEDONIC PRICING MODELLING :: GWmodel\nBuild hedonic pricing modelling using both the fixed and adaptive bandwidth schemes.\n\n6.6.1 Build Fixed Bandwidth GWR Model\n\n6.6.1.1 define stopping rule for fixed bandwith\nUsage of the code chunk below :\nbw.gwr( ) - GWmodel - to determine the optimal fixed bandwidth to use in the model.\nadaptive argument is set to FALSE = compute the fixed bandwidth.\nTwo (2) approaches to determine the stopping rule :\n\nCV cross-validation approach\nAIC corrected (AICc) approach\n\nFor 6.6.1.1, the stopping rule is defined using AIC corrected approach.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nRemarks :\nThe result shows that the recommended bandwidth is 971.3405 metres.\n\n\n6.6.1.2 calibrate gwr model\nCalibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-15 02:59:38 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-15 02:59:39 \n\n\nRemarks :\nThe report shows that the adjusted r-square of the gwr is 0.8430 which is significantly better than the globel multiple linear regression model of 0.6472.\n\n\n\n6.6.2 Build Adaptive Bandwidth GWR Model\nCalibrate the gwr-absed hedonic pricing model by using adaptive bandwidth approach.\n\n6.6.2.1 compute the adaptive bandwidth\nUsage of the code chunk below : to determine the recommended data point to use.\n\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nRemarks :\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.6.2.2 construct adaptive bandwidth gwr model\nUsage of the code chunk below : calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-15 02:59:45 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-15 02:59:46 \n\n\nRemarks :\nThe report shows that the adjusted r-square of the gwr is 0.8561 which is significantly better than the globel multiple linear regression model of 0.6472.\n“longlat” is set to FALSE when the data is in projected coordinate system. Set to TRUE if in degree.\n\n\n\n6.6.3 Visualise GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted : these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates is higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n6.6.4 Convert SDF into sf data.frame\nUsage of the code chunk below : to covert SDF into sf data.frame.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n6.6.5 Visualise Local R2\nUsage of the code chunk below : to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n6.6.5.1 visualise coefficient estimates\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n6.6.5.2 plot with URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "in-class_ex/in-class_ex4/In-class_Ex4.html#reference",
    "href": "in-class_ex/in-class_ex4/In-class_Ex4.html#reference",
    "title": "Geographically Weighted Regression",
    "section": "6.7 REFERENCE",
    "text": "6.7 REFERENCE\n\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap06.html#hedonic-pricing-modelling-in-r"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html",
    "title": "Spatial Weights & Applications [3]",
    "section": "",
    "text": "Learning outcome to be expected from this exercise :\n\ncompute spatial weight"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#r-package-required",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#r-package-required",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.2 R PACKAGE REQUIRED",
    "text": "3.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\nspdep compute :\n\npoly2nb( ) - compute contiguity weight matrices for the study area.\ndnearneigh( ) - derive distance-based weight matrices.\nknearneigh ( ) - return matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nknn2nb( ) - convert knn object to a neighbours list of class nb.\nnbdist( ) - return the length of neighbour relationship edges.\nnb2listw( ) - supplements a neighbours list with spatial weights for the chosen coding scheme.\ntable( ) - table the weight matrix structure and wrap with card( ).\ncard( ) - tallies the numbers of neighbours of regions in the neighbours list.\n\ntmap package\n\nqtm( )- to plot quick thematic map.\ntmap_arrange( ) - create multiple stand-alone maps.\n\nsf :\n\nst_read( ) - import shapefile as a simple feature data frame.\nst_join( ) - for spatial join, spatial filter.\nst_centroid( ) - takes a polygon or multipolygon and returns the geometric center of the bounding box of the polygon or multipolygon as a point.\n\ntidyverse, consists the following functions :\n\nreadr :\n\nread_csv( ) - importing delimited text file.\n\ndplyr:\n\nleft_join( ) - join geographical data and attribute table.\n\npurrr:\n\nmap_dbl( ) - output double vectors.\n\n\nstr( ) - structure of the object and information about the class, length and content of each column.\ncbind( ) - Take a sequence of vector, matrix or data-frame arguments and combine by columns or rows, respectively.\nhead( ) - Returns the first or last parts of a vector, matrix, table, data frame or function.\nplot( ) - Generic function for plotting of R objects.\npar(mfrow= c( )) = Create a multi-paneled plotting window.\nunlist( ) = remove the list structure of the returned object.\nlapply( ) = returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X.\n\n\npacman::p_load(spdep, tmap, sf, tidyverse, readr, dplyr)"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#geospatial-data",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#geospatial-data",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.3 GEOSPATIAL DATA",
    "text": "3.3 GEOSPATIAL DATA\n\n3.3.1 acquire data source\nTwo data sets for this exercise are :\n\nHunan county boundary layer : ESRI, shapefile format.\nHunan_2012.csv : Contains selected Hunan’s local development indicators.\n\n\n\n3.3.2 import shapefile data\n\nhunan <- st_read(dsn = \"/jephOstan/ISSS624/in-class_ex/in-class_ex1/data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\jephOstan\\ISSS624\\in-class_ex\\in-class_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n3.3.2 import csv data\n\n\n use %>%\nto combine import and transformation to projected coordinates system.\n\nhunan2012 <- read_csv(\"/jephOstan/ISSS624/in-class_ex/in-class_ex1/data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n3.3.3 perform relational join with mutating joins\nMutating joins add columns from y to x, matching rows based on the keys.\n4 types of mutating joins :\n\ninner_join(): includes all rows in x and y.\nleft_join(): includes all rows in x.\nright_join(): includes all rows in y.\nfull_join(): includes all rows in x or y.\n\nBelow is the st_join syntax, by default it’s a left join.\n\nReturns all records of the x object with y fields for non-matched records filled with NA values;\nAn inner join returns only records that spatially match.\n\n\nst_join(\n  x, y, join = st_intersects, ..., suffix = c(\".x\", \".y\"), left = TRUE,\n  largest = FALSE\n)\n\narguments\n\n* x = object of class sf\n\n* y = object of class sf\n\n* join = geometry predicate function with the same profile as st_intersects\n\n* ... for st_join: arguments passed on to the join function or to st_intersection when largest is TRUE;\n\n* suffix = length 2 character vector; see merge\n\n* left = logical; if TRUE return the left join, otherwise an inner join; see details. see also left_join\n\n* largest = logical; if TRUE, return x features augmented with the fields of y that have the largest overlap with each of the features of x\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\nleft_join(\n  x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...,  keep = FALSE\n  na_matches = c(\"na\", \"never\")\n)\n\narguments : \n\n* x, y = A pair of data frames, data frame extensions (e.g. a tibble), or lazy data frames (e.g. from dbplyr or dtplyr)\n\n* by = A character vector of variables to join by.\n\n>> If NULL, the default, *_join() will perform a natural join, using all variables in common across x and y. A message lists the variables so that you can check they're correct; suppress the message by supplying by explicitly.\n\n>> To join by different variables on x and y, use a named vector. For example, by = c(\"a\" = \"b\") will match x$a to y$b.\n\n>> To join by multiple variables, use a vector with length > 1. For example, by = c(\"a\", \"b\") will match x$a to y$a and x$b to y$b. \n\n>> Use a named vector to match different variables in x and y. For example, by = c(\"a\" = \"b\", \"c\" = \"d\") will match x$a to y$b and x$c to y$d.\n\n>> To perform a cross-join, generating all combinations of x and y, use by = character().\n\n* copy = If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x.\n\n* suffix = If there are non-joined duplicate variables in x and y, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2.\n\n* keep = Should the join keys from both x and y be preserved in the output?\n\n* na_matches = Should NA and NaN values match one another?\n\n>> The default, \"na\", treats two NA or NaN values as equal, like %in%, match(), merge().\n\n>> Use \"never\" to always treat two NA or NaN values as different, like joins for database sources, similarly to merge(incomparables = FALSE)."
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#visualising-preliminary-dataset",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#visualising-preliminary-dataset",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.4 VISUALISING PRELIMINARY DATASET",
    "text": "3.4 VISUALISING PRELIMINARY DATASET\nBuild a basemap and a choropleth map with qtm( ) of tmap package.\nThe syntax and arguments for qtm( ) can refers to section 2.4.1 under Hands-on 2.\n\ntmap_arrange(\n  ...,  ncol = NA, nrow = NA, widths = NA, heights = NA, sync = FALSE,\n  asp = 0, outer.margins = 0.02\n)\n\narguments :\n\n* asp = aspect ratio. \n>> The aspect ratio of each map. Normally, this is controlled by the asp argument from tm_layout (also a tmap option). \n\n>> This argument will overwrite it, unless set to NULL. \n\n>> The default value for asp is 0, which means that the aspect ratio is adjusted to the size of the device divided by the number of columns and rows. \n\n>> When asp is set to NA, which is also the default value for tm_layout, the aspect ratio will be adjusted to the used shapes.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.5 COMPUTING CONTIGUITY SPATIAL WEIGHTS",
    "text": "3.5 COMPUTING CONTIGUITY SPATIAL WEIGHTS\nUse poly2nb( ) of spdep package to compute contiguity weight matrices for the study area. This function :\n\nbuilds a neighbours list based on regions with contiguous boundaries.\nby default, return a list of first order neighbours based on Queen criteria.\n\n\n3.5.1 compute (QUEEN) contiguity based neighbours\n\npoly2nb(\n    pl, row.names = NULL, snap=sqrt(.Machine$double.eps),\n    queen=TRUE, useC=TRUE, foundInBox=NULL\n    )\n \narguments : \n\n* pl = list of polygons of class extending SpatialPolygons, or an sf or sfc object containing non-empty (multi-)polygon objects\n\n* snap = boundary points less than snap distance apart are considered to indicate contiguity; \n>> used both to find candidate and actual neighbours for planar geometries, but only actual neighbours for spherical geometries, as spherical spatial indexing itself injects some fuzzyness.\n\n* queen = default is TRUE.\n>> If TRUE, a single shared boundary point meets the contiguity condition.\n\n>> if FALSE, more than one shared point is required; note that more than one shared boundary point does not necessarily mean a shared boundary line.\n\n* useC = default TRUE, doing the work loop in C, may be set to false to revert to R code calling two C functions in an n*k work loop, where k is the average number of candidate neighbours\n\n* foundInBox = default NULL using R code or st_intersects( ) to generate candidate neighbours (using snap= if the geometries are not spherical); \n>> if not NULL (for legacy purposes) a list of length (n-1) with integer vectors of candidate neighbours (j > i) (as created by the poly_findInBoxGEOS function in rgeos for clean polygons).\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\ninterpretation :\n\n88 area units in Hunan.\nHighest links - #85 - 11 links\nLowest links - #30, #65 - 1 link\n\n!!!!! what is percentage nonzero weights indicate?\n!!!!! what is the usage of info given by the average number of links?\n\n\n3.5.1.1 list the neighbours for the [1] polygon in the object\ninterpretation :\n\nPolygon [1] has 5 neighbours = 2, 3, 4, 57, 85\n[1] = polygon ID stored in hunan SpatialPolygonsDataFrame class. layman terms = system ID\n\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\n\n3.5.1.2 display the first polygon name\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_2[1]\n\n[1] \"Changde\"\n\n\n\n\n3.5.1.3 list the neighboring polygons’ names\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\n3.5.1.4 get variable’s value for the first order neighbours of [1]\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n3.5.1.5 list the complete weight matrix\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n3.5.2 create (ROOK) contiguity based neighbours\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n3.5.3 visualise contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point.\nHence, to plot connectivity graph :\n\nGetting Latitude and Longitude of Polygon Centroids with sf package\nNeed the coordinates in a separate data frame to associate with each polygon before plot the connectivity graph. !!! need further read up.\n\n\n3.5.3.1 get the longitude for each centroid\n\nst_centroid(x, ..., of_largest_polygon = FALSE)\n\narguments : \n\n* x = object of class sfg, sfc or sf\n\n* of_largest_polygon = logical; for st_centroid: \n>> if TRUE, return centroid of the largest (sub)polygon of a MULTIPOLYGON rather than of the whole MULTIPOLYGON\n\nmap_dbl(.x, .f, ...)\n\narguments :\n\n* .x = A list or atomic vector.\n\n* .f = A function, formula, or vector (not necessarily atomic).\n\n>> If a function, it is used as is.\n\n>> If a formula, e.g. ~ .x + 2, it is converted to a function. There are three ways to refer to the arguments:\n\n>>>> For a single argument function, use .\n\n>>>> For a two argument function, use .x and .y\n\n>>>> For more arguments, use ..1, ..2, ..3 etc\n\n>> This syntax allows you to create very compact anonymous functions.\n\n>> If character vector, numeric vector, or list, it is converted to an extractor function. \n\n>> Character vectors index by name and numeric vectors index by position; use a list to index by position and name at different levels. \n\n>> If a component is not present, the value of .default will be returned.\ndouble bracket notation [[ ]] & 1 allows to get the first value in each centroid for the longitude.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\n\n3.5.3.2 get the latitude for each centroid\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\n\n3.5.3.3 combine both longitude and latitude\n\ncoords <- cbind(longitude, latitude)\n\n\n\n3.5.3.4 review the format\nShows first 6 rows of observations.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n3.5.3.5 plot Queen contiguity based neighbours map\n\nplot(\n    x, y=1, col, type, mar=NULL, legend=TRUE, axes=TRUE, plg=list(), \n    pax=list(), maxcell=500000, smooth=FALSE, range=NULL, levels=NULL,         all_levels=FALSE, breaks=NULL, breakby=\"eqint\", fun=NULL, colNA=NULL,      alpha=NULL, sort=FALSE, decreasing=FALSE, grid=FALSE, ext=NULL, \n    reset=FALSE, add=FALSE, background=NULL,\n  ...)\n\narguments : \n\n* add = logical. If TRUE add the object to the current plot.\n\n* pch = define point shape.\n>> e.g. in this study, pch = 19, solid circle, NA to ommit the points.\n\n* cex = the size of pch symbols.\n\n* col = character. Colors. \n>> The default is rev(grDevices::terrain.colors(50)). \n\n* bg = the background (or fill) color for the open plot symbols. \n>> It can be used only when pch = 21:25.\n\n* lwd = the line width for the plotting symbols.\n\n(source : sthda)\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n3.5.3.6 plot Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.5.3.7 plot both Queen and Rook contiguity based neighbours maps\n\npar(mfrow = c(r, c))\n\narguments : \n\n* r, c = A vector of length 2, where the first argument specifies the number of rows and the second the number of columns of plots.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.6 COMPUTING DISTANCE BASED NEIGHBOURS",
    "text": "3.6 COMPUTING DISTANCE BASED NEIGHBOURS\nDerive distance-based weight matrices with dnearneigh( ).\n\nMain function is to identify neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\nIf x is an \"sf\" object and use_s2= is TRUE, spherical distances in km are used.\n\n\n3.6.1 step 1 - determine the cut-off (upper limit) for distance band\nKey functions involved in this step are knearneigh( ), knn2nb( ), nbdist( ) and unlist( ).\n\nknearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)\n\narguments : \n\n* x = matrix of point coordinates, an object inheriting from SpatialPoints or an \"sf\" or \"sfc\" object; if the \"sf\" or \"sfc\" object geometries are in geographical coordinates (sf::st_is_longlat(x) == TRUE and sf::sf_use_s2() == TRUE), s2 will be used to find the neighbours because it uses spatial indexing https://github.com/r-spatial/s2/issues/125 as opposed to the legacy method which uses brute-force\n\n* k = number of nearest neighbours to be returned\n\n* longlat = TRUE if point coordinates are longitude-latitude decimal degrees, in which case distances are measured in kilometers; \n>> if x is a SpatialPoints object, the value is taken from the object itself; longlat will override kd_tree.\n\n* use_kd_tree = logical value, if the dbscan package is available, use for finding k nearest neighbours when longlat is FALSE, and when there are no identical points; the input data may have more than two columns if dbscan is used.\n\nKnn objects that returned by knearneigh( ) are then converted into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\n\n\nknn2nb(knn, row.names = NULL, sym = FALSE)\n\narguments :\n  \n* knn = A knn object returned by knearneigh\n\n* row.names = character vector of region ids to be added to the neighbours list as attribute region.id, default seq(1, nrow(x))\n\n* sym = force the output neighbours list to symmetry\n\nUse nbdist( ) to return the length of neighbour relationship edges.\nGiven a list of spatial neighbour links (a neighbours list of object type nb), the function returns the Euclidean distances along the links in a list of the same form as the neighbours list. If longlat = TRUE, Great Circle distances are used.\n\n\nnbdists(nb, coords, longlat = NULL)\n\narguments :\n\n* nb = an object of class nb\n\n* coords = matrix of point coordinates, an object inheriting from SpatialPoints or an \"sf\" or \"sfc\" object; \n\n>> if the \"sf\" or \"sfc\" object geometries are in geographical coordinates (sf::st_is_longlat(x) == TRUE and sf::sf_use_s2() == TRUE), s2 will be used to find distances. \n>> extra reading materials - https://github.com/r-spatial/s2/issues/125\n\n* longlat - TRUE if point coordinates are longitude-latitude decimal degrees, in which case distances are measured in kilometers; \n>> if coords is a SpatialPoints object, the value is taken from the object itself\n\nRemove the list structure of the returned object by using unlist( ).\n\n\nunlist(x, recursive = TRUE, use.names = TRUE)\n\narguments : \n\n* x = an R object, typically a list or vector.\n\n* recursive = logical. Should unlisting be applied to list components of x?\n\n* use.names = logical. Should names be preserved?\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\nThis is the interpretation for distance calculation.\n\n\n3.6.2 step 2 - compute fixed distance weight matrix\n\ndnearneigh(x, d1, d2, row.names = NULL, longlat = NULL, bounds=c(\"GE\", \"LE\"),\n use_kd_tree=TRUE, symtest=FALSE, use_s2=packageVersion(\"s2\") > \"1.0.7\", k=200,\n dwithin=TRUE)\n\narguments :\n\n* x = matrix of point coordinates, an object inheriting from SpatialPoints or an \"sf\" or \"sfc\" object; if the \"sf\" or \"sfc\" object geometries are in geographical coordinates (use_s2=FALSE, sf::st_is_longlat(x) == TRUE and sf::sf_use_s2() == TRUE), s2 will be used to find the neighbours because it will use spatial indexing as opposed to the legacy method which uses brute-force (at present s2 also uses brute-force). (need to read up more..)\n\n* d1 = lower distance bound in the metric of the points if planar coordinates, in km if in geographical coordinates.\n\n* d2 = upper distance boundd in the metric of the points if planar coordinates, in km if in geographical coordinates.\n\n* longlat = TRUE if point coordinates are geographical longitude-latitude decimal degrees, in which case distances are measured in kilometers; \n>> if x is a SpatialPoints object, the value is taken from the object itself, and overrides this argument if not NULL.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n3.6.2.1 list all fixed distance weight matrix\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n3.6.2.2 combine functions to display the structure of the weight matrix\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n3.6.2.3 plot fixed distance weight matrix\n\nThe red lines show the links of 1st nearest neighbours.\nThe black lines show the links of neighbours within the cut-off distance of 62km.\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n3.6.2.4 plot both of them next to each other\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\n3.6.3 step 3 - compute adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix :\n\nmore densely settled areas (usually the urban areas) tend to have more neighbours.\nhaving many neighbours smooths the neighbour relationship across more neighbours.\n\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nEach county has exactly 6 neighbours.\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n3.6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#spatial-weights-with-idw",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#spatial-weights-with-idw",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.7 SPATIAL WEIGHTS WITH IDW",
    "text": "3.7 SPATIAL WEIGHTS WITH IDW\n\nInverse distance weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points.\nThe assigned values to unknown points are calculated with a weighted average of the values available at the known points.\n\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n3.7.1 row-standardised weights matrix\nAssign equal weights (style = “W”) to each neighbouring polygon.\n\ni.e. the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nsince its based on lagged values on few polygons, thus 1 drawback - tend to over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\n\nnb2listw(neighbours, glist=NULL, style=\"W\", zero.policy=NULL)\n\narguments : \n  \n* neighbours = an object of class nb\n\n* glist = list of general weights corresponding to neighbours\n\n* style = style can take values “W”, “B”, “C”, “U”, “minmax” and “S”\n\n* zero.policy = default NULL, use global option value; \n>> if FALSE stop with error for any empty neighbour sets, \n>> if TRUE permit the weights list to be formed with zero-length weights vectors.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors.\n\nused with caution if not aware of missing neighbors in the dataset.\n\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nEach neighbor is assigned a 0.2 of the total weight, thus, each neighbor’s income will be multiplied by 0.2 before being tallied.\n\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.8 APPLICATION OF SPATIAL WEIGHT MATRIX",
    "text": "3.8 APPLICATION OF SPATIAL WEIGHT MATRIX\nCreate 4 different spatial lagged :\n\nspatial lag with row-standardised weights\nspatial lag as a sum of neighbouring values\nspatial window average\nspatial window sum\n\n\n3.8.1 compute spatial lagged values with row-standardised weights\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n!!!!! the meaning of Spatial lag with row-standardized weights now?\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n3.8.1.1 append the spatially lag values\nappend the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\n\n3.8.1.2 review the values\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n3.8.1.3 plot both the GDPPC and spatial lag GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n3.8.2 calculate spatial lag as a sum of neighboring values\nCalculate spatial lag as a sum of neighboring values.\nNext assign binary weights with glist = in the nb2listw function.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nUse lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nunderstand the meaning of Spatial lag as a sum of neighboring values now?\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.3 calculate spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nAdd the diagonal element before assigning weights.\n\n\nwm_q1 <- wm_q\n\n\n3.8.3.1 add the diagonal element to the neighbour list\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\n\n3.8.3.2 convert into data.frame\nConvert the lag variable listw object into a data.frame by using as.data.frame()\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nqtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n3.8.4 compute spatial window sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nassign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nuse nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConvert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nqtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "in-class_ex/in-class_ex1/In-class_Ex1.html#references",
    "href": "in-class_ex/in-class_ex1/In-class_Ex1.html#references",
    "title": "Spatial Weights & Applications [3]",
    "section": "3.9 References",
    "text": "3.9 References\n\nArrange small multiples in grid layout. https://search.r-project.org/CRAN/refmans/tmap/html/tmap_arrange.html\nConstruct neighbours list from polygon list. https://r-spatial.github.io/spdep/reference/poly2nb.html\nEdzer P. (N.A.). spatial join, spatial filter. r-spatial.github.io, https://r-spatial.github.io/sf/reference/st_join.html\nHadley W., Romain F., Lionel H., Kirill M. (N.A.). Mutating joins. dplyr.tidyverse.org. https://dplyr.tidyverse.org/reference/mutate-joins.html\nqtm: Quick thematic map plot. https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/qtm\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap02.html#data-preparation"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "",
    "text": "Case study : Do functionally similar water points positively co-occur in Nigeria?"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.2-r-package-required",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.2-r-package-required",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.2 R PACKAGE REQUIRED",
    "text": "CS1.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\npacman package : to install and load the following R packages into R environment.\nsf package :\n\nst_read( ) = import and save the shapefiles into simple feature data table.\n\ntidyverse package :\n\ndplyr:\n\nfilter( ) - extract water point records of Nigeria.\n\nreadr :\n\nwrite_rds( ) - save the extracted sf data table into an output file in rds data format.\n\n\ntmap package :\nspdep package :\nfunModeling package :\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.3-geospatial-data",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.3-geospatial-data",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.3 GEOSPATIAL DATA",
    "text": "CS1.3 GEOSPATIAL DATA\n\nCS1.3.1 acquire data source\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\n\nCS1.3.2 import water point geospatial data\nimport the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp <- st_read(dsn = \"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\n\n\nAvoid performing transformation \nif going to use st_intersects() \nin geoprocessing stage. This is \nbecause st_intersects() only \nworks correctly if the geospatial \ndata are in geographic coordinate \nsystem (i.e. wgs84)“write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.”\n\n\nCS1.3.3 write the water point data table into rds data format\n\nwrite_rds(wp, \"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial/wp_nga.rds\")\n\n\n\nCS1.3.4 import Nigeria LGA boundary data\n\nnga <- st_read(dsn = \"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\n“st_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table.’’\n\n\n\nCS1.3.5 data wrangling\n\ncs1.3.5.1 recode NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\ncs1.3.5.2 conduct Exploratory Data Analysis (EDA)\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.4-water-point-data-extraction",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.4-water-point-data-extraction",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.4 WATER POINT DATA EXTRACTION",
    "text": "CS1.4 WATER POINT DATA EXTRACTION\nExtract the water point records by using classes in status_cle field.\n\nCS1.4.1 extract functional water point\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\nCS1.4.2 extract non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\nCS1.4.3 extract water point with unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.5-performing-point-in-polygon-count",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.5-performing-point-in-polygon-count",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.5 PERFORMING POINT-IN-POLYGON COUNT",
    "text": "CS1.5 PERFORMING POINT-IN-POLYGON COUNT\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.6-derive-save-analytical-data-table",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.6-derive-save-analytical-data-table",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.6 DERIVE & SAVE ANALYTICAL DATA TABLE",
    "text": "CS1.6 DERIVE & SAVE ANALYTICAL DATA TABLE\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial/nga_wp.rds\")"
  },
  {
    "objectID": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.7-spatial-distribution-of-water-points-visualisation",
    "href": "in-class_ex/in-class_ex2/In-class_Ex2.html#cs1.7-spatial-distribution-of-water-points-visualisation",
    "title": "In-class Exercise 2 - Case Study 1",
    "section": "CS1.7 SPATIAL DISTRIBUTION OF WATER POINTS VISUALISATION",
    "text": "CS1.7 SPATIAL DISTRIBUTION OF WATER POINTS VISUALISATION\n\nnga_wp <- read_rds(\"/jephOstan/ISSS624/in-class_ex/in-class_ex2/data/geospatial/nga_wp.rds\")\n\n\ntotal <- qtm(nga_wp, \"total wpt\") + tm_layout(legend.height = 0.3, legend.width = 0.3)\nwp_functional <- qtm(nga_wp, \"wpt functional\") + tm_layout(legend.height = 0.3, legend.width = 0.3)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\") + tm_layout(legend.height = 0.3, legend.width = 0.3)\nunknown <- qtm(nga_wp, \"wpt unknown\") + tm_layout(legend.height = 0.3, legend.width = 0.3)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1.5, ncol=2)"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "case study : Delineate Shan State of Myanmar into Homogenous Regions"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#overview",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#overview",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.1 OVERVIEW",
    "text": "5.1 OVERVIEW\nIn geobusiness and spatial policy, it is common to delineate the market or planning area into homogeneous regions by using multivariate data.\nHence, this exercise focuses on delineating homogeneous regions using geographically referenced multivariate data.\nThe two principal analyses in this exercise are :\n\nHierarchical Cluster analysis.\nSpatially Constrained Cluster analysis.\n\n\n5.1.1 Problem Statement\nDelineate Shan State, Myanmar, into homogeneous regions using multiple Information and Communication Technology (ICT) measures : Radio, Television, Landline Phones, Mobile Phones, Computers, and the Internet at home."
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#r-package-required",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#r-package-required",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.2 R PACKAGE REQUIRED",
    "text": "5.2 R PACKAGE REQUIRED\nThe following are the packages required for this exercise :\n\nSpatial data handling\n\nsf\n\nst_read( ) - 5.3.2\nst_set_geometry( ) - 5.6.1\nst_distance( ) - 5.7.2.1\n\nrgdal\nspdep\n\nAttribute data handling\n\ntidyverse\n\nreadr\n-- read_csv( ) - 5.3.3\nggplot2\n-- ggplot( ) - 5.4.1\n-- geom_histogram( ) - 5.4.1\n-- geom_boxplot( ) - 5.4.1\ntibble\n-- row.names( ) - 5.6.1.1\ndplyr:\n-- glimpse( ) - 5.3.2\n-- mutate( ) - 5.3.3\n-- left_join( ) - 5.4.2.1\n-- select( ) - 5.6.1, 5.6.1.1\n-- rename( ) - 5.7.1.1, 5.7.2.1\n\n\nChoropleth mapping\n\ntmap\n\nqtm( )- 5.4.2.2, 5.7.1.1, 5.7.2.2\ntm_fill( ) - 5.4.2.2\ntm_borders( ) - 5.4.2.2\ntmap_arrange( ) - 5.4.2.2\ntm_polygons( ) - 5.4.2.2\ntm_facets( ) - 5.4.2.2\ntm_legend( ) - 5.4.2.2\ntm_layout( ) - 5.4.2.2\n\n\nMultivariate data visualisation and analysis\n\ncoorplot\n\ncorrplot.mixed( ) - 5.5\n\nggpubr\n\nggarrange( ) - 5.4.1.4\n\nheatmaply\n\nnormalise( ) - 5.6.2.1\n\n\nPsych\n\ndescribe ( ) - 5.6.2.2\n\nCluster analysis\n\ncluster\n\nClustGeo\n\nhclustgeo( ) - 5.7.1\nchoicealpha( ) - 5.7.2.1\n\nStats\n\ndist( ) - 5.6.4\nas.dist( ) - 5.7.2.1\ncutree( ) - 5.7.2.1\n\nBase\n\nsummary( ) - 5.3.3, 5.3.3.1 5.6.2.1\nscale( ) - 5.6.2.2\nas.factor( ) - 5.7.1.1, 5.7.2.1\ncbind( ) - 5.7.1.1, 5.7.2.1\n\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ggpubr, cluster, factoextra, NbClust,heatmaply, corrplot, psych, tidyverse, ClustGeo)"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#geospatial-data",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#geospatial-data",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.3 GEOSPATIAL DATA",
    "text": "5.3 GEOSPATIAL DATA\n\n5.3.1 Acquire Data Source\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is GIS data in ESRI shapefile format, captured in polygon features. It consists of township boundary information in.\nShan-ICT.csv : This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\n\n\n5.3.2 Import Shapefile Data\nUsage of the code chunk below :\nst_read( ) - sf - to import and save the Myanmar Township Boundary GIS data and associated attributes table in a simple feature data frame format.\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\jephOstan\\ISSS624\\in-class_ex\\in-class_ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\n!!!!! from 330 down to 55 features means ?\n>> Filter( ) to get 3 shan areas from 330 features down to 55 features.\nsf data frame conformed to Hadley Wickham’s Tidy framework :\n\ngeometry list column ?\nfeature geometry ?\n\nglimpse( ) - dplyr - to reveal the variables’ data type.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\n5.3.3 Import Aspatial Data\nUsage of the code chunk below :\nread_csv( ) - readr - to import csv file that contains the attributes to a data set named “ict”.\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nsummary( ) - base - get summary statistics of “ict” data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nRemark :\nValue of “Lengths” == number of observation\nfields = variables\n\n\n5.3.3 Derive New Variables\n\nThe unit of measurement of the values is the number of households. Using these values directly will be biased by the underlying total number of households.\nGenerally, townships with a relatively higher total number of households will have a higher number of households owning radio, TV, etc.\nTo overcome this bias, derive the penetration rate of each ICT variable by using the code chunk below.\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to adds new variables and preserves existing ones.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\n5.3.3.1 review new variables\nUsage of the code chunk below :\nsummary( ) - base - review the newly derived penetration rates.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.4 EXPLORATORY DATA ANALYSIS (EDA)",
    "text": "5.4 EXPLORATORY DATA ANALYSIS (EDA)\n\n5.4.1 EDA with Statistical Graphics\n\n5.4.1.1 plot histogram for “RADIO” variable\nUsage of the code chunk below :\ngeom_histogram( ) - ggplot2 - to plot the distribution of the variable i.e. ” number of households with radio ” with EDA.\n\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n5.4.1.2 plot boxplot for “RADIO” variable\nUsage of the code chunk below :\ngeom_boxplot( ) - ggplot2 - to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n5.4.1.3 plot histogram for “RADIO_PR” variable\nUsage of the code chunk below : to plot the distribution of Radio Penetration rate.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n5.4.1.4 plot boxplot for “RADIO_PR” variable\nUsage of the code chunk below : to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nBelow are multiple histograms plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\n\n5.4.1.4 multiplot for “ict” variables\nUsage of the code chunk below : consist of two main parts :\n\nCreate individual histograms.\n\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggarrange( ) - ggpubr -to group histograms together.\n\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n5.4.2 EDA with Choropleth Map\n\n5.4.2.1 join geospatial data with aspatial data\nUsage of the code chunk below :\nleft_join( ) - dplyr - to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one before prepare the choropleth map.\n\nThe shan_sf simple feature data.frame will be used as the base data object.\nThe ict_derived data.frame will be used as the join table.\nThe unique identifier used to join both data objects is TS_PCODE.\n\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nRemarks :\nNo new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n5.4.2.2 plot a choropleth map for “RADIO_PR”\nUsage of the code chunk below :\nqtm( ) - tmap - plot a choropleth map to reveal the distribution of Radio penetration rate of Shan State at township level.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n5.4.2.3 plot a choropleth map for “TT_HOUSEHOLDS” and “RADIO”\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, create two choropleth maps :\n\nWith total number of households (i.e. TT_HOUSEHOLDS.map)\nWith total number of household with Radio (RADIO.map)\n\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nRemarks :\nThe townships with relatively larger number of households are also showing relatively higher number of radio ownership.\n\n\n5.4.2.4 plot a choropleth map for “TT_HOUSEHOLDS” and “RADIO_PR”\nPlot the choropleth maps showing the distribution of total number of households and radio penetration rate.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#correlation-analysis",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#correlation-analysis",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.5 CORRELATION ANALYSIS",
    "text": "5.5 CORRELATION ANALYSIS\nBefore perform cluster analysis, it is important to ensure that the cluster variables are not highly correlated.\nUsage of the code chunk below :\ncorrplot.mixed( ) - corrplot - to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nRemarks :\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated.\nThis suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#hierarchy-cluster-analysis",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#hierarchy-cluster-analysis",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.6 HIERARCHY CLUSTER ANALYSIS",
    "text": "5.6 HIERARCHY CLUSTER ANALYSIS\nThe Hierarchical Cluster analysis consists of four(4) major steps :\n\n5.6.1 Extract Clustering Variables\nUsage of the code chunk below :\nselect( ) - dplyr - to extract the clustering variables from the shan_sf simple feature object into data.frame.\nst_set_geometry( ) - sf - set to “NULL” to drop the geometry.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nRemarks :\nThe final clustering variables list does not include variable “INTERNET_PR” because it is highly correlated with variable “COMPUTER_PR”.\n\n5.6.1.1 change row number to township name\nUsage of the code chunk below :\nrow.names( ) - tibble - to replace the row number with township name.\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nselect( ) - dplyr - to delete the “TS.x” variable.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\n5.6.2 Standardise Data\nStandardise the input variables before performing cluster analysis to avoid bias cluster analysis result that due to clustering variables with large values.\n\n5.6.2.1 use Min-Max standardisation\nUsage of the code chunk below :\nnormalise( ) - heatmaply - to stadardise the clustering variables by using Min-Max method.\nsummary( ) - base - display the summary statistics of the standardised clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nRemarks :\nThe values range of the Min-Max Standardised clustering variables are 0-1 now.\n\n\n5.6.2.2 use Z-score Standardisation\nUsage of the code chunk below :\nscale( ) - base - to standardise with Z-score method.\ndescribe( ) - psych - is used here instead of summary() of Base R because the earlier provides standard deviation.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nRemarks :\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\n5.6.3 Visualise Standardised Clustering Variables for Scaled “RADIO_PR”\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphically.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nRemarks :\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large.\n\n\n5.6.4 Compute Proximity Matrix with Euclidean Method\nUsage of the code chunk below :\ndist( ) - stats - to compute the proximity matrix.\n\ndist( ) distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\n\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\nVisual inspect the content of “proxmat”.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "in-class_ex/in-class_ex3/In-class_Ex3.html#spatially-constrained-clustering-clustggeo-method",
    "href": "in-class_ex/in-class_ex3/In-class_Ex3.html#spatially-constrained-clustering-clustggeo-method",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.7 SPATIALLY CONSTRAINED CLUSTERING : ClustgGeo Method",
    "text": "5.7 SPATIALLY CONSTRAINED CLUSTERING : ClustgGeo Method\nSpatially and Non-spatially Constrained Hierarchical cluster analysis is to be done with functions provided by the ClustGeo package.\n\n5.7.1 Ward-like Hierarchical Clustering\nUsage of the code chunk below :\nhclustgeo( ) - ClustGeo - to perform a typical Ward-like hierarchical clustering.\nTo perform non-spatially constrained hierarchical clustering, only need to provide the function of a dissimilarity matrix.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster,\n     cex = 0.5)\nrect.hclust(nongeo_cluster,\n            k = 6,\n            border = 2:5)\n\n\n\n\nRemarks :\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist( ).\n\n5.7.1.1 plot non-spatially constrained hierarchical clusters\nUsage of the code chunk below :\nas.factor( ) - base - to encode a vector as a factor.\n\ngroups <- as.factor(cutree(nongeo_cluster,\n                           k=6)\n                    )\n\ncbind( ) - base - to combine both “shan_sf” and “groups” from “as.matrix”.\nrename( ) - dplyr - change the variable name.\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nqtm( ) - tmap - plot the clusters on a categorical area shaded map.\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n5.7.2 Spatially Constrained Hierarchical Clustering\nDerive spatial distance matrix before perform spatially constrained hierarchical clustering.\n\n5.7.2.1 derive spatial distance matrix\nUsage of the code chunk below :\nst_distance( ) - sf - to return numeric vector of length x or y. The shorter one being recycled.\nas.dist( ) - stats - to convert the data frame into matrix.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nchoicealpha( ) - ClustGeo - to determine a suitable value for the mixing parameter alpha.\n\nThis function calculates the proportion of inertia explained by the partitions in K clusters for a range of mixing parameters alpha.\nWhen the proportion of explained inertia calculated with D0 decreases, the proportion of explained inertia calculated with D1 increases.\nThe plot of the two curves of explained inertia (one for D0 and one for D1) helps the user to choose the mixing parameter alpha.\n\n\nchoicealpha(D0, D1, range.alpha, K, wt = NULL, scale = TRUE, graph = TRUE)\n\nArguments :\n\n* D0 = a dissimilarity matrix of class dist. \n>> The function as.dist can be used to transform an object of class matrix to object of class dist.\n\n* D1 = an other dissimilarity matrix of class dist.\n\n* range.alpha = a vector of real values between 0 and 1.\n\n* K = the number of clusters.\n\n* wt = vector with the weights of the observations. \n>> By default, wt=NULL corresponds to the case where all observations are weighted by 1/n.\n\n* scale = if TRUE the two dissimilarity matrices are scaled i.e. divided by their max.\n\n* graph = if TRUE, two graphics (proportion and normalized proportion of explained inertia) are drawn.\nUsage example.\n\ncr <- choicealpha(proxmat, \n                  distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, \n                  graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\ncutree( ) - stats - to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\n\n5.7.2.2 plot delineated spatially constrained clusters\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex1-1.html",
    "href": "Hands-on_Ex1-1.html",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "",
    "text": "Learning outcome to be expected from this exercise :\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex1-1.html#r-package-required",
    "href": "Hands-on_Ex1-1.html#r-package-required",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.2 R PACKAGE REQUIRED",
    "text": "1.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\nsf for importing, managing, and processing geospatial data.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nreadr for importing csv data\nreadxl for importing Excel worksheet\ntidyr for manipulating data\ndplyr for transforming data\nggplot2 for visualising data\n\n\nThis is the getting start paragraph.\n\npackages = c('sf', 'tidyverse','readr','readxl','tidyr','dplyr','ggplot2','pacman')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nLoading required package: readxl\n\nLoading required package: pacman\n\npacman::p_load(sf, tidyverse, readr, readxl, ggplot2, dplyr, tidyr)\n\nnote : all functions and methods in sf that operate on spatial data are prefixed by “st_” ."
  },
  {
    "objectID": "Hands-on_Ex1-1.html#geospatial-data",
    "href": "Hands-on_Ex1-1.html#geospatial-data",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.3 GEOSPATIAL DATA",
    "text": "1.3 GEOSPATIAL DATA\n\n1.3.1 acquire data source\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n1.3.2 import polygon data in shapefile format\nargument :\nst_read to read simple features from file or database, or retrieve layer names and their geometry type(s)\ndsn to define the data path\nlayer to provide the shapefile name.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nGeometry type : multipolygon features\nDimension : X and Y\n\n\n1.3.3 import polyline data in shapefile form\n\ncyclingpath = st_read(dsn = \"/jephOstan/ISSS624/data/geospatial\",                 \n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nGeometry type : linestring feature\nDimension : X and Y\n\n\n1.3.4 import GIS data in kml format\n\npreschool = st_read(\"/jephOstan/ISSS624/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nGeometry type : point feature\nDimension : X, Y and Z"
  },
  {
    "objectID": "Hands-on_Ex1-1.html#content-review",
    "href": "Hands-on_Ex1-1.html#content-review",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.4 CONTENT REVIEW",
    "text": "1.4 CONTENT REVIEW\n\n1.4.1 retrieve geometry list-column\nThere are 3 methods to do so :\n\nmpsz$geom\nmpsz[[1]]\nst_geometry()\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\nmpsz$geom\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n1.4.2 learn associated attribute\nglimpse() of dplyr reveals the data type of each fields.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n1.4.3 reveal complete information of a feature object\nargument :\nn = number of records to display\n\nhead(mpsz, n=5) \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex1-1.html#plotting-geospatial-data",
    "href": "Hands-on_Ex1-1.html#plotting-geospatial-data",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.5 PLOTTING GEOSPATIAL DATA",
    "text": "1.5 PLOTTING GEOSPATIAL DATA\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n1.5.1 plot geometry only\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n1.5.2 plot with specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex1-1.html#projection-transformation",
    "href": "Hands-on_Ex1-1.html#projection-transformation",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.6 PROJECTION TRANSFORMATION",
    "text": "1.6 PROJECTION TRANSFORMATION\nEnsure both geospatial data are projected using similar coordinate system\n\n1.6.1 assign EPSG code\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\n1.6.2 assign correct EPSG code\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\n\n1.6.3 verify the EPSG code\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n1.6.4 transform wgs84 to svy21\nst_transform() is used whenneed to reproject x from one coordinate system to another coordinate system mathematically, which is not capable by st_set_crs()\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)"
  },
  {
    "objectID": "Hands-on_Ex1-1.html#aspatial-data-importation-and-conversion",
    "href": "Hands-on_Ex1-1.html#aspatial-data-importation-and-conversion",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.7 ASPATIAL DATA IMPORTATION AND CONVERSION",
    "text": "1.7 ASPATIAL DATA IMPORTATION AND CONVERSION\n\n1.7.1 import aspatial data\n\nlistings <- read_csv(\"/jephOstan/ISSS624/data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n1.7.2 review data with list()\n>> listing tibble data frame consists of 4252 rows and 16 columns.\n>> given the decimal in degree format, assumption made i.e. wgs84 Geographic Coordinate System.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\n\n\n1.7.3 create sf data frame from aspatial data frame\nargument :\n\ncoords - provide x-coordinates first before y-coordinates.\ncrs - provide the coordinates system in EPSG format.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nnote : new column - ‘geometry’ is added while ‘longitude’ and ‘latitude’ are removed.\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1-1.html#geoprocessing-gis-analysis",
    "href": "Hands-on_Ex1-1.html#geoprocessing-gis-analysis",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.8 GEOPROCESSING / GIS ANALYSIS",
    "text": "1.8 GEOPROCESSING / GIS ANALYSIS\nFocus on 2 common geoprocessing functions -\n\nbuffering\npoint-in-polygon count\n\n\n1.8.1 set up buffering\nscenario : The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nsolution :\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n\n1.8.2 point-in-polygon count\nscenario : A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nsolution : st_intersects() - identify pre-schools located inside each Planning Subzone\nlength() - calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\n1.8.2.1 list planning subzone with the most number of pre-school\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\n\n1.8.2.2 calculate the density of pre-school by planning subzone.\nstep 1 - use st_area() to derive the area of each planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nstep 2 -\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex1-1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1-1.html#exploratory-data-analysis-eda",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.9 EXPLORATORY DATA ANALYSIS (EDA)",
    "text": "1.9 EXPLORATORY DATA ANALYSIS (EDA)\nggplot2 - hist() to reveal the distribution of PreSch Density. Too basic for further customisation.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n1.9.1 plot histogram\nwith appropriate ggplot2 functions\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n1.9.2 plot scatter plot\nmethod : ggplot2\nplot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nglimpse(mpsz3414)\n\nRows: 323\nColumns: 19\n$ OBJECTID         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ SUBZONE_NO       <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, …\n$ SUBZONE_N        <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERS…\n$ SUBZONE_C        <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BM…\n$ CA_IND           <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\"…\n$ PLN_AREA_N       <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT M…\n$ PLN_AREA_C       <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\",…\n$ REGION_N         <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\",…\n$ REGION_C         <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC          <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13…\n$ FMEL_UPD_D       <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014…\n$ X_ADDR           <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 253…\n$ Y_ADDR           <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 299…\n$ SHAPE_Leng       <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 442…\n$ SHAPE_Area       <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.4…\n$ geometry         <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOL…\n$ `PreSch Count`   <int> 0, 5, 0, 4, 2, 10, 4, 2, 6, 1, 6, 2, 0, 1, 6, 0, 0, 0…\n$ Area             [m^2] 1630379.27 [m^2], 559816.25 [m^2], 160807.50 [m^2], 5…\n$ `PreSch Density` [1/m^2] 0.0000000 [1/m^2], 8.9315022 [1/m^2], 0.0000000 [1/…\n\n\nargument : geom_point (size, color, shape)\n>> [add label next to each observations :]{.underline, style=“color:#ad700c”}\nggplot(dataset, aes(x=variable, y=variable)) + geom_point() + geom_text(label=rownames(dataset))\n>> Change the line type and color : ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape=18, color=“blue”)+ geom_smooth(method=lm, se=FALSE, linetype=“dashed”, color=“darkred”)\n>> Change the confidence interval fill color : ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape=18, color=“blue”)+ geom_smooth(method=lm, linetype=“dashed”, color=“darkred”, fill=“blue”)\n\nggplot(mpsz3414,aes(x= as.numeric(`PreSch Density`), y=(`PreSch Count`))) + geom_point()\n\n\n\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Count\")\n\n$x\n[1] \"Pre-school density (per km sq)\"\n\n$y\n[1] \"Count\"\n\n$title\n[1] \"Are pre-school even distributed in Singapore?\"\n\n$subtitle\n[1] \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\"\n\nattr(,\"class\")\n[1] \"labels\""
  },
  {
    "objectID": "Hands-on_Ex1-1.html#references",
    "href": "Hands-on_Ex1-1.html#references",
    "title": "Geospatial Data Wrangling with R [1]",
    "section": "1.10 References",
    "text": "1.10 References\n\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap02.html#data-preparation\nSTHDA (Statistical tools for high-throughput data analysis), (N.A.), ggplot2 scatter plots : Quick start guide - R software and data visualization. http://www.sthda.com/english/wiki/ggplot2-scatter-plots-quick-start-guide-r-software-and-data-visualization"
  },
  {
    "objectID": "Hands-on_EX1-2.html",
    "href": "Hands-on_EX1-2.html",
    "title": "Choropleth Mapping with R [2]",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\nE.g., use a choropleth map to portray the spatial distribution of aged population of <country>.\nThis exercise focuses on usage of tmap package to create choropleth map."
  },
  {
    "objectID": "Hands-on_EX1-2.html#r-package-required",
    "href": "Hands-on_EX1-2.html#r-package-required",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.2 R PACKAGE REQUIRED",
    "text": "2.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\ntmap :\n\nqtm( )- to plot quick thematic map.\ntm_shape( ) - specify the shape object.\ntm_fill( ) / tm_polygons( ) - draw polygons.\ntm_layout( ) - layout of cartographic map.\ntm_borders( ) - draw polygon borders.\ntm_compass( ) - map compass.\ntm_scale_bar( ) - scale bar.\ntm_grid( ) - draw coordinate grid / graticule lines.\ntm_credits( ) - include credits text.\ntmap_style( ) - set or get the default tmap style.\ntmap_arrange( ) - create multiple stand-alone maps.\ntm_facets( ) - define a group-by variable.\n\nsf : st_read( ) - import shapefile as a simple feature data frame.\ntidyverse, consists the following functions :\n\nreadr :\n\nread_csv( ) - importing delimited text file.\nwrite_rds( ) - exports entire R object (metadata and all).\n\ntidyr :\n\npivot_wider( ) -“widens” data, increasing the number of columns and decreasing the number of rows.\n\ndplyr:\n\nmutate( ) - adds new variables and preserves existing ones.\nmutate_at( ) - affects variables selected with a character vector or vars( ).\nleft_join( ) - join geographical data and attribute table.\nfilter( )\ngroup_by( )\nselect( )\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_EX1-2.html#geospatial-data",
    "href": "Hands-on_EX1-2.html#geospatial-data",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.3 GEOSPATIAL DATA",
    "text": "2.3 GEOSPATIAL DATA\n\n2.3.1 acquire data source\n\nMaster Plan 2014 Subzone Boundary (Web) : (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format from data.gov.sg\n\nThis is a geospatial data.\nConsists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 : csv format (i.e. respopagesextod2011to2020.csv) from Department of Statistics, Singapore\n\nThis is an aspatial data file.\nAlthough it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\n2.3.2 import data into R\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n2.3.3 examine the content of mpsz\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nsyntax of sample()\n\nsample(x, size, replace = FALSE, prob = NULL)\n\narguments :\n\n* x = vector or a data set.\n* size = sample size.\n* replace = with or without replacement of values.\n* prob = probability weights.\n\nmpsz[sample(2, ),]\n\nSimple feature collection with 2 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30177.73\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND   PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y       OUTRAM         OT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n\n\n\n\n\nmpsz[sample(2, ),] != mpsz[sample(2,),]\n\nwith space (2, ) = display 2nd OBJECTID first.\nwithout space (2,) = normal display first 2 rows.\n\nmpsz[sample(2, )] >> display only first 2 columns i.e. OBJECTID & SUBZONE\n\n\n\n2.3.4 import attribute data\n\npopdata <- read_csv(\"/jephOstan/ISSS624/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n2.3.5 prepare data\nPrepare data table to plot thematic map. The variables are :\n\nyoung : age group 0 to 4 until age groyup 20 to 24,\neconomy active : age group 25-29 until age group 60-64,\naged: age group 65 and above,\ntotal : all age group, and\ndependency : the ratio between young and aged against economy active group\n\n\n\n2.3.5.1 wrangling data\n\npivot_wider(\n  data,\n  id_cols = NULL, id_expand = FALSE, names_from = name, names_prefix = \"\",\n  names_sep = \"_\", names_glue = NULL, names_sort = FALSE, names_vary = \"fastest\",\n  names_expand = FALSE, names_repair = \"check_unique\", values_from = value,\n  values_fill = NULL, values_fn = NULL, unused_fn = NULL, ...\n)\n\narguments :\n\n* data = A data frame to pivot.\n\n* id_cols = A set of columns that uniquely identifies each observation. \n>> Defaults to all columns in data except for the columns specified in names_from and values_from. \n>> Typically used when have redundant variables, i.e. variables whose values are perfectly correlated with existing variables.\n\n* id_expand = Should the values in the id_cols columns be expanded by expand() before pivoting? \n>> This results in more rows, the output will contain a complete expansion of all possible values in id_cols. \n>> Implicit factor levels that aren't represented in the data will become explicit. \n>> Additionally, the row values corresponding to the expanded id_cols will be sorted.\n\n* names_from, values_from = A pair of arguments describing which column (or columns) to get the name of the output column (names_from), and which column (or columns) to get the cell values from (values_from).\n>> If values_from contains multiple values, the value will be added to the front of the output column.\nmore arguments for pivot_wider() …\n\nmutate(.data, ...,\n  .keep = c(\"all\", \"used\", \"unused\", \"none\"),\n  .before = NULL,\n  .after = NULL\n)\n\narguments :\n  \n* data = A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr)\n\n* ... = Name-value pairs. The name gives the name of the column in the output.\n\n* keep = Control which columns from .data are retained in the output. \n>> Grouping columns and columns created by ... are aways kept.\n\"all\" retains all columns from .data. This is the default.\n\n\"used\" retains only the columns used in ... to create new columns. This is useful for checking your work, as it displays inputs and outputs side-by-side.\n\n\"unused\" retains only the columns not used in ... to create new columns. This is useful if you generate new columns, but no longer need the columns used to generate them.\n\n\"none\" doesn't retain any extra columns from .data. Only the grouping variables and columns created by ... are kept.\n\n* .before, .after = Optionally, control where new columns should appear (the default is to add to the right hand side).\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n Useful mutate functions :\n\n+, -, log( ), etc., for their usual mathematical meanings\nlead( ), lag( )\ndense_rank( ), min_rank( ), percent_rank( ), row_number( ), cume_dist( ), ntile( )\ncumsum( ), cummean( ), cummin( ), cummax( ), cumany( ), cumall( )\nna_if( ), coalesce( )\nif_else( ), recode( ), case_when( )\n\n\n\n2.3.5.2 join attribute data and geospatial data\nThe 3 scoped variants of mutate( ) to transform multiple variables :\n\n_all affects every variable\n_at affects variables selected with a character vector or vars()\n_if affects variables selected with a predicate function.\n\n\nmutate_at(.tbl, .vars, .funs, ..., .cols = NULL)\n\narguments :\n\n* .tbl = A tbl object.\n\n* .funs = A function, a quosure style lambda ~ fun(.) or a list of either form.\n>> can be a named or unnamed list. If a function is unnamed and the name cannot be derived automatically, a name of the form \"fn#\" is used.\n\n* ... = Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.\n\n*.vars = A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL.\n\n* .cols = This argument has been renamed to .vars to fit dplyr's terminology and is deprecated.\n[Before the georelational join, convert the values in PA and SZ fields to uppercase.]{style=“color:#9e6024”}\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n[To ensure the output is a simple features data frame, join data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.]{style=“color:#9e6024”}\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(\n  x, file, compress = c(\"none\", \"gz\", \"bz2\", \"xz\"), version = 2,\n  refhook = NULL, text = FALSE, path = deprecated(), ...\n)\n\narguments : \n\n* file = The file path to read from/write to.\n\n* refhook = A function to handle reference objects.\n\n* x = R object to write to serialise.\n\n* compress = Compression method to use: \"none\", \"gz\" ,\"bz\", or \"xz\".\n\n* version = Serialization format version to be used. The default value is 2 as it's compatible for R versions prior to 3.5.0. See base::saveRDS() for more details.\n\n* text = If TRUE a text representation is used, otherwise a binary representation is used.\n\n* path = [Deprecated] Use the file argument instead.\n\n* ... = Additional arguments to connection function. For example, control the space-time trade-off of different compression methods with compression. See connections() for more details.\n\nwrite_rds(mpsz_pop2020, \"/jephOstan/ISSS624/data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_EX1-2.html#choropleth-mapping-geospatial-data",
    "href": "Hands-on_EX1-2.html#choropleth-mapping-geospatial-data",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.4 CHOROPLETH MAPPING GEOSPATIAL DATA",
    "text": "2.4 CHOROPLETH MAPPING GEOSPATIAL DATA\n2 tmap approaches to prepare thematic map :\n\nplot thematic map quickly using qtm( ).\nplot highly customisable thematic map.\n\n\n2.4.1 plot choropleth map with quick thematic map (qtm) function\n\nqtm(\n  shp, fill = NA, symbols.size = NULL, symbols.col = NULL, symbols.shape = NULL,\n  dots.col = NULL, text = NULL, text.size = 1, text.col = NA, lines.lwd = NULL,\n  lines.col = NULL, raster = NA, borders = NA, by = NULL, scale = NA, title = NA,\n  projection = NULL, bbox = NULL, basemaps = NA, overlays = NA, style = NULL,\n  format = NULL, ...\n)\n\narguments : \n\n* shp = One of -\n>> shape object, which is an object from a class defined by the sf or stars package. Objects from the packages sp and raster are also supported, but discouraged.\n\n>> Not specified, i.e. qtm() is executed. In this case a plain interactive map is shown.\n\n>> A OSM search string, e.g. qtm(\"Amsterdam\"). In this case a plain interactive map is shown positioned according to the results of the search query (from OpenStreetMap nominatim)\n\n\n* fill = either a color to fill the polygons, or name of the data variable in shp to draw a choropleth. \n>> Only applicable when shp contains polygons. \n>> Set fill = NULL to draw only polygon borders. See also argument borders.\nmore argument details…\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n2.4.2 plot choropleth map with tmap-elements\nArguments for the following function :\n\ntm_shape( ) - specify the shape object.\ntm_fill( ) - draw polygons.\n\n\nargument : \n\n* style = method to process the color scale when col is a numeric variable. \n\n>> Discrete gradient options are \"cat\", \"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\", \"dpih\", \"headtails\", and \"log10_pretty\". \n\n>> A numeric variable is processed as a categorical variable when using \"cat\", i.e. each unique value will correspond to a distinct category. \n\n>> For the other discrete gradient options (except \"log10_pretty\"), see the details in classIntervals (extra arguments can be passed on via style.args). \n\n>> Continuous gradient options are \"cont\", \"order\", and \"log10\". \n\n>> The numeric variable can be either regarded as a continuous variable or a count (integer) variable.\n\n* legend.hist = logical that determines whether a histogram is shown.\n\n* legend.hist.z = index value that determines the position of the histogram legend element.\n\n* legend.is.portrait = logical that determines whether the legend is in portrait mode (TRUE) or landscape (FALSE).\n\ntm_layout( ) - layout of cartographic map.\ntm_borders( ) - draw polygon borders.\n\n\ntm_borders(col = \"grey40\", lwd = 1, lty = \"solid\", alpha = NA)\n\nargument :\n\n* alpha = transparency number between 0 (totally transparent) and 1 (not transparent). \n>> By default, the alpha value of the col is used (normally 1).\n\n* col = border colour.\n\n* lwd = border line width.\n\n* lty = border line type.\n\ntm_compass( ) - map compass.\n\n\ntm_compass(north = 0, type = NA, text.size = 0.8, size = NA,\n  show.labels = 1, cardinal.directions = c(\"N\", \"E\", \"S\", \"W\"),\n  text.color = NA, color.dark = NA, color.light = NA, lwd = 1,\n  position = NA, bg.color = NA, bg.alpha = NA, just = NA, \n  fontsize = NULL\n)\n\narguments :\n  \n* type = compass type : \"arrow\", \"4star\", \"8star\", \"radar\", \"rose\". >> The default is controlled by tm_layout (which uses \"arrow\" for the default style)\n\n* size = size of the compass in number of text lines. \n>> The default values depend on the type: for \"arrow\" it is 2, for \"4star\" and \"8star\" it is 4, and for \"radar\" and \"rose\" it is 6.\n\ntm_scale_bar( ) - scale bar.\ntm_grid( ) - draw coordinate grid / graticule lines.\n\n\ntm_grid(x = NA, y = NA, n.x = NA, n.y = NA, projection = NA,\n  col = NA, lwd = 1, alpha = NA, labels.size = 0.6, labels.col = NA,\n  labels.rot = c(0, 0), labels.format = list(big.mark = \",\"),\n  labels.margin.x = 0, labels.margin.y = 0, labels.inside.frame = TRUE)\n\nargument :\n\n* alpha = transparency of the grid lines. Number between 0 and 1.\n>> By default, the alpha transparency of col is taken.\n\ntm_credits( ) - include credits text.\n\n\ntm_credits(text, size = 0.7, col = NA, alpha = NA, align = \"left\",\n  bg.color = NA, bg.alpha = NA, fontface = NA, fontfamily = NA,\n  position = NA, width = NA, just = NA\n)\n\nargument : \n* position = position of the text. Vector of two values, specifying the x and y coordinates. \n\n>> first value can be \"left\", \"LEFT\", \"center\", \"right\", or \"RIGHT\" >> second value can be \"top\", \"TOP\", \"center\", \"bottom\", or \"BOTTOM\"\n>> or this vector contains two numeric values between 0 and 1 that specifies the x and y value of the center of the text. \n>> The uppercase values correspond to the position without margins (so tighter to the frame).\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nFollowing are the steps to reproduce above map.\n\n2.4.2.1 step 1 - draw a base map\nBasic building block of tmap\n\nuse tm_shape( ) to define the input data\nthen use tm_fill( ) or tm_polygons( ) to draw polygons.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n2.4.2.2 step 2 - draw a choropleth map\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n2.4.2.3 draw a choropleth map with tm_fill( ) & tm_border( )\n\ntm_polygons( ) is a wraper of tm_fill( ) & tm_border( ).\ntm_fill( ) shades the polygons by using the default colour scheme.\ntm_borders( ) adds the borders of the shapefile onto the choropleth map.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n2.4.3 classify data with tmap\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n2.4.3.1 plot with jenks data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.2 plot with equal data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.3 plot with fixed data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fixed\",\n          breaks = c(0.0, 3.8, 7.6, 11.4, 15.2, 19.0)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.4 plot with sd data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.5 plot with kmeans data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.6 plot with hclust data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.7 plot with bclust data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n2.4.3.8 plot with fisher data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.9 plot with quantile data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\n\n2.4.4 plot with custom break\n\nTmap breaks require a minimum and maximum.\nIn order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore setting the break points, use summary( ) to compute descriptive statistics of the “DEPENDENCY” variable.\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\nSet break point at 0.60, 0.70, 0.80, and 0.90.\nNeed to include a minimum and maximum, which set at 0 and 100.\nBreaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "Hands-on_EX1-2.html#colour-scheme",
    "href": "Hands-on_EX1-2.html#colour-scheme",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.5 COLOUR SCHEME",
    "text": "2.5 COLOUR SCHEME\n\n2.5.1 use ColorBrewer\nquick reference for ColorBrewer 2.0 colour options\n\nuse palette argument in tm_fill( )\n\nwithout “-” prefix, darker shade = higher value\nwith “-” prefix to reverse colour scheme, darker shade = smaller value\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_EX1-2.html#map-layouts",
    "href": "Hands-on_EX1-2.html#map-layouts",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.6 MAP LAYOUTS",
    "text": "2.6 MAP LAYOUTS\n\n2.6.1 set map legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.6.2 set map style\n\nuse tmap_style( ) function.\nthe default style is “white”.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "Hands-on_EX1-2.html#other-cartographic-furniture",
    "href": "Hands-on_EX1-2.html#other-cartographic-furniture",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.7 OTHER CARTOGRAPHIC FURNITURE",
    "text": "2.7 OTHER CARTOGRAPHIC FURNITURE\nOther map furniture such as compass, scale bar, grid lines, etc.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n2.7.1 reset to default style\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "Hands-on_EX1-2.html#multiple-small-choropleth-maps",
    "href": "Hands-on_EX1-2.html#multiple-small-choropleth-maps",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.8 MULTIPLE SMALL CHOROPLETH MAPS",
    "text": "2.8 MULTIPLE SMALL CHOROPLETH MAPS\nSmall multiple maps (smm), also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically.\nIn tmap, can be plotted in 3 ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets( ), and\nby creating multiple stand-alone maps with tmap_arrange( ).\n\n\n2.8.1 plot smm by define ncols in tm_fill( )\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n2.8.2 assign multiple values for aesthetic arguments\n\n2 or more different styles, colours, etc.\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n2.8.3 define a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n2.8.4 create multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_EX1-2.html#mapping-spatial-object-with-selection-criterion",
    "href": "Hands-on_EX1-2.html#mapping-spatial-object-with-selection-criterion",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.9 MAPPING SPATIAL OBJECT WITH SELECTION CRITERION",
    "text": "2.9 MAPPING SPATIAL OBJECT WITH SELECTION CRITERION\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_EX1-2.html#references",
    "href": "Hands-on_EX1-2.html#references",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.10 REFERENCES",
    "text": "2.10 REFERENCES\n\nDatacamp. Writing.rds files. https://campus.datacamp.com/courses/reading-data-into-r-with-readr/importing-data-with-readr?ex=7\nDplyr.tidyverse.org. Mutate multiple columns. https://dplyr.tidyverse.org/reference/mutate_all.html\nqtm: Quick thematic map plot. https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/qtm\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap02.html#data-preparation\nRdocumentation.org. tm_shape: Specify the shape object. https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_shape\nTidyr.tidyverse.org. Pivot data from long to wide. https://tidyr.tidyverse.org/reference/pivot_wider.html"
  },
  {
    "objectID": "Hands-on_Ex2-4.html",
    "href": "Hands-on_Ex2-4.html",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "",
    "text": "This exercise focuses :\n\nCompute Global and Local Measure of Spatial Autocorrelation (GLSA).\nSolve analytical scenario :\nApply appropriate spatial statistical methods to discover if development are even distributed geographically.\n\nIf the answer is No, next -- “is there sign of spatial clustering?”.\nIf the answer for this question is Yes, next -- “where are these clusters?”\nExamine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan province, PRC."
  },
  {
    "objectID": "Hands-on_Ex2-4.html#r-package-required",
    "href": "Hands-on_Ex2-4.html#r-package-required",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.2 R PACKAGE REQUIRED",
    "text": "4.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\nspdep compute :\n\npoly2nb( ) - compute contiguity weight matrices for the study area.\nnb2listw( ) - supplements a neighbours list with spatial weights for the chosen coding scheme.\nmoran.test( ) - for spatial autocorrelation using a spatial weights matrix in weights list form.\nmoran.mc( ) - for permutation test with Moran’s I statistic.\ngeary.test( ) - for spatial autocorrelation using a spatial weights matrix in weights list form.\ngeary.mc( ) - for permutation test with Geary’s C statistic.\nsp.correlogram( ) - spatial correlograms for Moran’s I and the autocorrelation coefficient.\nlocalmoran( ) - to calculate local spatial statistics for each zone based on the spatial weights object used.\nmoran.plot( ) - plot of spatial data against its spatially lagged values.\nknearneigh ( ) - return matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nknn2nb( ) - convert knn object to a neighbours list of class nb.\nnbdist( ) - return the length of neighbour relationship edges.\ndnearneigh( ) - derive distance-based weight matrices.\nlocalG( ) - calculate local spatial statistic G for each zone based on the spatial weights object used.\n\nsf compute :\n\nst_read( ) - import shapefile as a simple feature data frame.\nst_centroid( ) - takes a polygon or multipolygon and returns the geometric center of the bounding box of the polygon or multipolygon as a point.\n\ntidyverse, consists the following functions :\n\nreadr :\n\nread_csv( ) - importing delimited text file.\n\ndplyr:\n\nleft_join( ) - join geographical data and attribute table.\n\npurrr:\n\nmap_dbl( ) - output double vectors.\n\n\ntmap package\n\nqtm( )- to plot quick thematic map.\ntm_shape( ) - specify the shape object.\n\nplot( ) - Generic function for plotting of R objects.\nprintCoefmat( ) - print coefficient matrices.\nscale( ) - a generic function whose default method centers and/or scales the columns of a numeric matrix.\nunlist( ) = remove the list structure of the returned object.\n\n\npacman::p_load(spdep, sf, tidyverse, tmap)"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#geospatial-data",
    "href": "Hands-on_Ex2-4.html#geospatial-data",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.3 GEOSPATIAL DATA",
    "text": "4.3 GEOSPATIAL DATA\n\n4.3.1 acquire data source\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n4.3.2 import shapefile\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n4.3.3 import csv file\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n4.3.4 perform relational join\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\n4.3.5 visualise regional development indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2-4.html#global-spatial-autocorrelation",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.4 GLOBAL SPATIAL AUTOCORRELATION",
    "text": "4.4 GLOBAL SPATIAL AUTOCORRELATION\nThis section focuses on :\n\nCompute global spatial autocorrelation statistics.\nPerform spatial complete randomness test for Global Spatial Autocorrelation (GSA).\n\n\n4.4.1 compute contiguity spatial weights\nUse poly2nb( ) first to compute contiguity weight matrices for the study area before can compute the global spatial autocorrelation statistics.\nThis function :\n\nbuilds a neighbours list based on regions with contiguous boundaries.\nby default, return a list of first order neighbours based on Queen criteria.\n\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n4.4.2 compute row-standardised weights matrix\nAssign weights to each neighboring polygon.\nEach neighboring polygon will be assigned equal weight (style=“W”).\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\n\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nWeights constants summary :\n\nn = zone = 88\nnn = n * n = 7744\nS0 = global sum of weights = 88\nS1 = S1 sum of weights = 37.86334\nS2 = S2 sum of weights = 365.9147\n\nThe input of nb2listw( ) must be an object of class nb.\nThe syntax of the function has two major arguments, namely style & zero.polycy.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme (proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n)).\n\nzero.policy = TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list.\n>> These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours).\n>> The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\nnb2listw(neighbours, glist=NULL, style=\"W\", zero.policy=NULL)\n\narguments : \n  \n* neighbours = an object of class nb\n\n* glist = list of general weights corresponding to neighbours\n\n* style = style can take values “W”, “B”, “C”, “U”, “minmax” and “S”\n\n* zero.policy = default NULL, use global option value; \n>> if FALSE stop with error for any empty neighbour sets, \n>> if TRUE permit the weights list to be formed with zero-length weights vectors.\n  \n\n\n4.4.3 test for GSA : Moran’s I method\n\nGiven a set of features and an associated attribute, it evaluates whether the pattern expressed is clustered, dispersed, or random.\nThe tool calculates the Moran’s I Index value and both a a z-score and p-value to evaluate the significance of that Index.\nP-values are numerical approximations of the area under the curve for a known distribution, limited by the test statistic.\n\n\nmoran.test(x, listw, randomisation=TRUE, zero.policy=NULL,\n alternative=\"greater\", rank = FALSE, na.action=na.fail, spChk=NULL,\n adjust.n=TRUE, drop.EI2=FALSE)\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw.\n\n* listw = a listw object created for example by nb2listw.\n\n* randomisation = variance of I calculated under the assumption of randomisation, if FALSE normality.\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA .\n\n* alternative = a character string specifying the alternative hypothesis, must be one of greater (default), less or two.sided.\n\n* rank = logical value - default FALSE for continuous variables, if TRUE, uses the adaptation of Moran's I for ranks suggested by Cliff and Ord (1981, p. 46)\n\n* na.action = a function (default na.fail), can also be na.omit or na.exclude - in these cases the weights list will be subsetted to remove NAs in the data. It may be necessary to set zero.policy to TRUE because this subsetting may create no-neighbour observations. Note that only weights lists created without using the glist argument to nb2listw may be subsetted. If na.pass is used, zero is substituted for NA values in calculating the spatial lag\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* adjust.n = default TRUE, if FALSE the number of observations is not adjusted for no-neighbour observations, if TRUE, the number of observations is adjusted\n\n* drop.EI2 = default FALSE, if TRUE, emulate CrimeStat <= 4.02\n\nmoran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n!!!!! Moron I statistic = Moran’s Index?\n!!!!! Expectation = Expected I?\n!!!! What statistical conclusion can draw from the output above?\nWith Moran I statistic 0.300749970, GDPPC is positively autocorrelated in Hunan, i.e. the data is spatially cluster.\nThere is a statistical significant with p-value (0.000001095) < 0.001, smaller than the alpha value to support the rejection of null hypothesis for the test i.e. there is no spatial autocorrelation in the GDPPC data.\n\nDo a permutation test to evaluate the rank of the observed statistic in relation to the statistic of simulated values.\n\nIn other words, calculate the Moran’s I for each random shuffle, then compare the actual Moran’s I to the random Moran’s I.\nchecked against those of moran.mc permutations.\n\n\n4.4.3.1 compute Monte Carlo Moran’s I\n\nmoran.mc(x, listw, nsim, zero.policy=NULL, alternative=\"greater\",\n    na.action=na.fail, spChk=NULL, return_boot=FALSE, adjust.n=TRUE\n    )\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw.\n\n* listw = a listw object created for example by nb2listw.\n\n* nsim = number of permutations.\n\n* zero.policy = default NULL, use global option value; \n>> if TRUE assign zero to the lagged value of zones without neighbours, \n>> if FALSE assign NA.\n\n* alternative = a character string specifying the alternative hypothesis, must be one of \"greater\" (default), \"two.sided\", or \"less\".\n\n* na.action = a function (default na.fail), can also be na.omit or na.exclude - in these cases the weights list will be subsetted to remove NAs in the data.\n\n>> It may be necessary to set zero.policy to TRUE because this subsetting may create no-neighbour observations.\n\n>> Note that only weights lists created without using the glist argument to nb2listw may be subsetted. \n\n>> na.pass is not permitted because it is meaningless in a permutation test.\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption( )\n\n* return_boot = return an object of class boot from the equivalent permutation bootstrap rather than an object of class htest\n\n* adjust.n = default TRUE, \n>> if FALSE the number of observations is not adjusted for no-neighbour observations, \n>> if TRUE, the number of observations is adjusted.\nThe Monte-Carlo simulation was run for 1000 times.\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n!!!!! what statistical conclusion can you draw from the output above?\nThe random Moran I statistic 0.30075 is very close to the actual Moran I statistic 0.300749970.\nThere is a statistical significant with p-value 0.001 = 0.001?\n\n\n4.4.3.2 visualise Monte Carlo Moran’s I\nExamine the simulated Moran’s I test statistics by plotting the distribution of the statistical values as a histogram.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output above?\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n\n\n4.4.4 test for GSA : Geary’s method\n\n4.4.4.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(x, listw, randomisation=TRUE, zero.policy=NULL,\n    alternative=\"greater\", spChk=NULL, adjust.n=TRUE)\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw\n\n* listw = a listw object created for example by nb2listw\n\n* randomisation = variance of I calculated under the assumption of randomisation, if FALSE normality\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA\n\n* alternative = a character string specifying the alternative hypothesis, must be one of \"greater\" (default), \"less\" or \"two.sided\".\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* adjust.n = default TRUE, if FALSE the number of observations is not adjusted for no-neighbour observations, if TRUE, the number of observations is adjusted.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n!!!!! what statistical conclusion can you draw from the output above?\nWith Geary C statistic 0.6907223, GDPPC is positively autocorrelated in Hunan, i.e. the data is spatially cluster.\nThere is a statistical significant with p-value (0.0001526) < 0.001, smaller than the alpha value to support the rejection of null hypothesis for the test i.e. there is no spatial autocorrelation in the GDPPC data.\n\n\n4.4.4.2 Computing Monte Carlo Geary’s C\n\ngeary.mc(x, listw, nsim, zero.policy=NULL, alternative=\"greater\",\n spChk=NULL, adjust.n=TRUE, return_boot=FALSE)\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw\n\n* listw = a listw object created for example by nb2listw\n\n* nsim = number of permutations\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA\n\n* alternative = a character string specifying the alternative hypothesis, must be one of \"greater\" (default), or \"less\"; this reversal corresponds to that on geary.test described in the section on the output statistic value, based on Cliff and Ord 1973, p. 21 (changed 2011-04-11, thanks to Daniel Garavito).\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* adjust.n = default TRUE, if FALSE the number of observations is not adjusted for no-neighbour observations, if TRUE, the number of observations is adjusted\n\n* return_boot = return an object of class boot from the equivalent permutation bootstrap rather than an object of class htest\n\nset.seed(1234)\nbperm = geary.mc(hunan$GDPPC,\n               listw = rswm_q, \n               nsim = 999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n!!!!! statistical conclusion can you draw from the output above?\n\n\n4.4.4.3 visualise the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n!!!!! statistical conclusion can you draw from the output above?"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#spatial-correlogram",
    "href": "Hands-on_Ex2-4.html#spatial-correlogram",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.5 SPATIAL CORRELOGRAM",
    "text": "4.5 SPATIAL CORRELOGRAM\nExamine patterns of spatial autocorrelation for model residuals.\n\nShow how correlated are pairs of spatial observations when increase the distance (lag).\nPlots index of autocorrelation (Moran’s I or Geary’s c) against distance.\nCorrelogram provides richer information although it is not as fundamental as variograms (a keystone concept of geostatistics)\nVery useful as an exploratory and descriptive tool.\n\n\n4.5.1 compute and plot Moran’s I correlogram\n\nsp.correlogram(neighbours, var, order = 1, method = \"corr\", style = \"W\",      \n                randomisation = TRUE, zero.policy = NULL, spChk = NULL\n                )\n\n\narguments : \n\n* neighbours = an object of class nb.\n\n* var = a numeric vector.\n\n* order = maximum lag order.\n\n* method = \"corr\" for correlation, \"I\" for Moran's I, \"C\" for Geary's C.\n\n* style = style can take values W, B, C, and S.\n\n* randomisation = variance of I or C calculated under the assumption of randomisation, if FALSE normality.\n\n* zero.policy = default NULL, use global option value; if FALSE stop with error for any empty neighbour sets, if TRUE permit the weights list to be formed with zero-length weights vectors.\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption( ).\n\n* x = an object from sp.correlogram( ) of class spcor.\n\n* p.adj.method = correction method as in p.adjust.\n\n* main = an overall title for the plot.\n\n* ylab = a title for the y axis.\n\n* ylim = the y limits of the plot.\n\n* ... = further arguments passed through.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nNot all autocorrelation values are statistically significant, so by plotting the output is insufficient to provide complete interpretation.\nHence, it is important to examine the full analysis report by printing out the analysis results.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n!!!!! statistical conclusion can you draw from the output above?\n\n\n4.5.2 compute and plot Geary’s C correlogram\n\nGC_corr <- sp.correlogram(wm_q, hunan$GDPPC, order = 6, \n                          method = \"C\", style = \"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2-4.html#cluster-and-outlier-analysis",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.6 CLUSTER AND OUTLIER ANALYSIS",
    "text": "4.6 CLUSTER AND OUTLIER ANALYSIS\nUse Local Indicators for Spatial Association (LISA) method, especially local Moran’s I to detect cluster and / or outlier.\n\n4.6.1 compute local Moran’s I\n\nlocalmoran(x, listw, zero.policy=NULL, na.action=na.fail, conditional=FALSE,\n              alternative = \"greater\", p.adjust.method=\"none\", mlvar=TRUE,\n            spChk=NULL, adjust.x=FALSE\n           )\n\nValue\n** Ii = local moran statistic\n\n** E.Ii = expectation of local moran statistic\n\n** Var.Ii = variance of local moran statistic\n\n** Z.Ii = standard deviate of local moran statistic\n\n** Pr() = p-value of local moran statistic\n\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw\n\n* listw = a listw object created for example by nb2listw\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA\n\n* na.action = a function (default na.fail), can also be na.omit or na.exclude \n>> in these cases the weights list will be subsetted to remove NAs in the data. \n>> It may be necessary to set zero.policy to TRUE because this subsetting may create no-neighbour observations. \n>> Note that only weights lists created without using the glist argument to nb2listw may be subsetted. \n>> If na.pass is used, zero is substituted for NA values in calculating the spatial lag. (Note that na.exclude will only work properly starting from R 1.9.0, na.omit and na.exclude assign the wrong classes in 1.8.*)\n\n* conditional = default FALSE: expectation and variance are calculated using the total randomization null (Sokal 1998 Eqs. A3 & A4). If TRUE: expectation and variance are calculated using the conditional randomization null (Sokal 1998 Eqs. A7 & A8). Elaboration of these changes available in Sauer 2021.\n\n* alternative = a character string specifying the alternative hypothesis, must be one of greater (default), less or two.sided.\n\n* p.adjust.method = a character string specifying the probability value adjustment for multiple tests, default \"none\"; see p.adjustSP. Note that the number of multiple tests for each region is only taken as the number of neighbours + 1 for each region, rather than the total number of regions.\n\n* mlvar = default TRUE: values of local Moran's I are reported using the variance of the variable of interest (sum of squared deviances over n), but can be reported as the sample variance, dividing by (n-1) instead; both are used in other implementations.\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* adjust.x = default FALSE, if TRUE, x values of observations with no neighbours are omitted in the mean of x\n\n* nsim = default 499, number of conditonal permutation simulations\n\n* sample_Ei = default TRUE; if conditional permutation, use the sample $E_i$ values, or the analytical values, leaving only variances calculated by simulation.\n\n* iseed = default NULL, used to set the seed for possible parallel RNGs\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\n4.6.1.1 list the local Moran matrix derived\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n4.6.1.2 map the local Moran’s I\nAppend the local Moran’s I dataframe (i.e.localMI) onto hunan SpatialPolygonDataFrame before mapping the local Moran’s I map.\n>> ensure this file - SpatialPolygonDataFrame - included.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.3 plot local Moran’s I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.6.1.4 plot local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values.\nHowever, it is useful to consider the p-values for each of these values, as consider above.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.1.5 plot both local Moran’s I values and p-values\nFor effective interpretation, plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex2-4.html#creating-lisa-cluster-map",
    "href": "Hands-on_Ex2-4.html#creating-lisa-cluster-map",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.7 CREATING LISA CLUSTER MAP",
    "text": "4.7 CREATING LISA CLUSTER MAP\nLISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation.\nFirst step is to plot the Moran scatterplot before generate the LISA cluster map.\n\n4.7.1 plot Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nmoran.plot(x, listw, zero.policy=NULL, spChk=NULL, labels=NULL,\n           xlab=NULL, ylab=NULL, quiet=NULL, plot=TRUE, return_df=TRUE, ...)\n\narguments : \n\n* x = a numeric vector the same length as the neighbours list in listw\n\n* listw = a listw object created for example by nb2listw\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* labels = character labels for points with high influence measures, if set to FALSE, no labels are plotted for points with large influence\n\n* xlab = label for x axis\n\n* ylab = label for x axis\n\n* quiet = default NULL, use !verbose global option value; if TRUE, output of summary of influence object suppressed\n\n* plot = default TRUE, if false, plotting is suppressed\n\n* return_df = default TRUE, invisibly return a data.frame object; if FALSE invisibly return an influence measures object\n\n* ... = further graphical parameters as in par(..)\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants.\nThe top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. (This are the high-high locations in the lesson slide.)\n\n\n4.7.2 plot Moran scatterplot with standardised variable\n\nFirst centering is done by subtracting the mean (omitting NAs) the corresponding columns.\nNext, scaling is done by dividing the (centered) variable by their standard deviations.\n\n\nscale(x, center = TRUE, scale = TRUE)\n\narguments : \n\n* x = a numeric matrix(like object).\n\n* center = either a logical value or numeric-alike vector of length equal to the number of columns of x, where ‘numeric-alike’ means that as.numeric(.) will be applied successfully if is.numeric(.) is not true.\n\n* scale = either a logical value or a numeric-alike vector of length equal to the number of columns of x.\n\n4.7.2.1 ensure data type is vector\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\n\n4.7.2.2 plot Moran scatterplot\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n4.7.3 prepare LISA map classes\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, centers the variable of interest around its mean.\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \n\nCenter the local Moran’s around the mean.\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\nNext, set a statistical significance level for the local Moran.\n\nsignif <- 0.05       \n\n4 command lines define the high-high, low-low, low-high and high-low categories based on the local Moran’s I value (C_mI) :\nquadrant[DV >0 & C_mI>0] <- 4 == cluster\nquadrant[DV <0 & C_mI<0] <- 2 == outliers\nquadrant[DV <0 & C_mI>0] <- 1 == cluster\nquadrant[DV >0 & C_mI<0] <- 3 == outlier\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3\n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\nCombined all the steps into one single code chunk as shown below:\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.7.4 plot LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\n!!!!! What statistical conclusion can you draw from the LISA map above?"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2-4.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.8 HOT SPOT AND COLD SPOT AREA ANALYSIS",
    "text": "4.8 HOT SPOT AND COLD SPOT AREA ANALYSIS\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 analyse with Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995).\nIt looks at neighbours within a defined proximity to identify where either high or low values cluster spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 derive distance-based weight matrix\nFirst, need to define a new set of neighbours.\nWhist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix :\n\nfixed distance weight matrix;\nadaptive distance weight matrix.\n\n\n4.8.2.1 derive the centroid\nNeed points to associate with each polygon before can plot the connectivity graph.\nIt will be a little more complicated than just running st_centroid( ) on the sf object: us.bound.\nCoordinates in a separate data frame is required.\nWith the mapping function applies a given function to each element of a vector and returns a vector of the same length.\nThe input vector will be the geometry column of us.bound and the function will be st_centroid( ).\nLastly, map_dbl variation of map from the purrr package.\n\nGet longitude values by map the st_centroid( ) function over the geometry column of us.bound\nAccess the longitude value through double bracket notation [[]] and 1, which is the first value in each centroid.\n\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 determine the cut-off distance\nDetermine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours.\nConvert the knn object returned into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists(). The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n!!!!! Why the upper threshold value can give such certainty?\n\n\n4.8.2.3 compute fixed distance weight matrix\ncompute the distance weight matrix with dnearneigh().\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n4.8.3 compute adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours.\n\nHaving many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.\n\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2-4.html#computing-gi-statistics",
    "href": "Hands-on_Ex2-4.html#computing-gi-statistics",
    "title": "Global & Local Measures of Spatial Autocorrelation [4]",
    "section": "4.9 COMPUTING GI STATISTICS",
    "text": "4.9 COMPUTING GI STATISTICS\n\n4.9.1 Gi statistics using fixed distance\n\nlocalG(x, listw, zero.policy=NULL, spChk=NULL, return_internals=FALSE, GeoDa=FALSE)\n\narguments :\n\n* x = a numeric vector the same length as the neighbours list in listw\n\n* listw = a listw object created for example by nb2listw\n\n* zero.policy = default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA\n\n* spChk = should the data vector names be checked against the spatial objects for identity integrity, TRUE, or FALSE, default NULL to use get.spChkOption()\n\n* return_internals = default FALSE, if TRUE, return internal values of G, EI and VG as as attribute matrix\n\n* GeoDa = default FALSE, if TRUE, drop x values for no-neighbour and self-neighbour only observations from all summations\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG( ) is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score.\n\nGreater values represent a greater intensity of clustering.\nDirection (positive or negative) indicates high or low clusters.\n\nNext, join the Gi values to their corresponding hunan sf data frame.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks :\n\nConvert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix( ).\nJoin hunan@data and gi.fixed matrix with cbind( ) to produce a new SpatialPolygonDataFrame called hunan.gi.\nRename the field name of the gi values to gstat_fixed by using rename( ).\n\n\n\n4.9.2 plot Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n!!!!! What statistical observation can you draw from the Gi map above?\n\n\n4.9.3 compute Gi statistics using adaptive distance\nCompute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n4.9.4 plot Gi values with adaptive distance weights\nVisualise the locations of hot spot and cold spot areas.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n!!!!! What statistical observation can you draw from the Gi map above?"
  },
  {
    "objectID": "Hands-on_Ex3-5.html",
    "href": "Hands-on_Ex3-5.html",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "case study : Delineate Shan State of Myanmar into Homogenous Regions"
  },
  {
    "objectID": "Hands-on_Ex3-5.html#overview",
    "href": "Hands-on_Ex3-5.html#overview",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.1 OVERVIEW",
    "text": "5.1 OVERVIEW\nIn geobusiness and spatial policy, it is common to delineate the market or planning area into homogeneous regions by using multivariate data.\nHence, this exercise focuses on delineating homogeneous regions using geographically referenced multivariate data.\nThe two principal analyses in this exercise are :\n\nHierarchical Cluster analysis.\nSpatially Constrained Cluster analysis.\n\n\n5.1.1 Problem Statement\nDelineate Shan State, Myanmar, into homogeneous regions using multiple Information and Communication Technology (ICT) measures : Radio, Television, Landline Phones, Mobile Phones, Computers, and the Internet at home."
  },
  {
    "objectID": "Hands-on_Ex3-5.html#r-package-required",
    "href": "Hands-on_Ex3-5.html#r-package-required",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.2 R PACKAGE REQUIRED",
    "text": "5.2 R PACKAGE REQUIRED\nThe following are the packages required for this exercise :\n\nSpatial data handling\n\nsf\n\nst_read( ) - import shapefile as a simple feature data frame.\n\nrgdal\nspdep\n\nAttribute data handling\n\ntidyverse,\n\nreadr\n-- read_csv( ) - import csv file.\nggplot2\n-- geom_histogram( ) - display the counts with bars.\ndplyr:\n-- glimpse( ) - list variables by rows, data by columns.\n-- mutate( ) - adds new variables and preserves existing ones.\n\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot\nggpubr\n\nggarrange( ) - Arrange multiple ggplots on the same page.\n\nheatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\nsummary( ) - Generic function to produce summaries.\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ggpubr, cluster, factoextra, NbClust,heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex3-5.html#geospatial-data",
    "href": "Hands-on_Ex3-5.html#geospatial-data",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.3 GEOSPATIAL DATA",
    "text": "5.3 GEOSPATIAL DATA\n\n5.3.1 Acquire Data Source\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is GIS data in ESRI shapefile format, captured in polygon features. It consists of township boundary information in.\nShan-ICT.csv : This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\n\n\n5.3.2 Import Shapefile Data\nUsage of the code chunk below :\nst_read( ) - sf - to import and save the Myanmar Township Boundary GIS data and associated attributes table in a simple feature data frame format.\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\n!!!!! from 330 down to 55 features means ?\n>> Filter( ) to get 3 shan areas from 330 features down to 55 features.\nsf data frame conformed to Hadley Wickham’s Tidy framework :\n\ngeometry list column ?\nfeature geometry ?\n\nglimpse( ) - dplyr - to reveal the variables’ data type.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\n5.3.3 Import Aspatial Data\nUsage of the code chunk below :\nread_csv( ) - readr - to import csv file that contains the attributes to a data set named “ict”.\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nsummary( ) - base - get summary statistics of “ict” data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nRemark :\nValue of “Lengths” == number of observation\nfields = variables\n\n\n5.3.3 Derive New Variables\n\nThe unit of measurement of the values is the number of households. Using these values directly will be biased by the underlying total number of households.\nGenerally, townships with a relatively higher total number of households will have a higher number of households owning radio, TV, etc.\nTo overcome this bias, derive the penetration rate of each ICT variable by using the code chunk below.\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to adds new variables and preserves existing ones.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived$`RADIO_PR`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.05  138.95  210.95  215.68  268.07  484.52 \n\n\n\n5.3.3.1 review new variables\nUsage of the code chunk below : review the newly derived penetration rates.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Hands-on_Ex3-5.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex3-5.html#exploratory-data-analysis-eda",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.4 EXPLORATORY DATA ANALYSIS (EDA)",
    "text": "5.4 EXPLORATORY DATA ANALYSIS (EDA)\n\n5.4.1 EDA with Statistical Graphics\nUsage of the code chunk below :\nggplot( ) - sf - to plot the distribution of the variable i.e. ” number of households with radio ”\ngeom_histogram( ) - ggplot2 - to plot histogram to display the counts with bars.\n\nThe histogram provide visual distribution of a single continuous variable by dividing the x axis into bins and counting the number of observations in each bin.\n\n\n\nVisual aid to identify the overall distribution of the data values i.e. left skew, right skew or normal distribution.\nUnlike frequency polygons geom_histogram( ) that are more suitable to compare the distribution across the levels of a categorical variable.\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\ngeom_boxplot( ) - ggplot2 - to :\n\nplot boxplot for the distribution of a continuous variable.\ndetect outliers.\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n5.4.2 EDA using choropleth map\n\n5.4.2.1 Joining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nsummary(shan_sf)\n\n    OBJECTID          ST              ST_PCODE              DT           \n Min.   :  0.0   Length:55          Length:55          Length:55         \n 1st Qu.: 67.5   Class :character   Class :character   Class :character  \n Median :128.0   Mode  :character   Mode  :character   Mode  :character  \n Mean   :140.7                                                           \n 3rd Qu.:209.0                                                           \n Max.   :268.0                                                           \n   DT_PCODE              TS              TS_PCODE             ST_2          \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    LABEL2           SELF_ADMIN           ST_RG            T_NAME_WIN       \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  T_NAME_M3              AREA               geometry \n Length:55          Min.   : 629   MULTIPOLYGON :55  \n Class :character   1st Qu.:1727   epsg:NA      : 0  \n Mode  :character   Median :2704   +proj=long...: 0  \n                    Mean   :2830                     \n                    3rd Qu.:3760                     \n                    Max.   :6028                     \n\n\n\nls(ict_derived)\n\n [1] \"COMPUTER\"      \"COMPUTER_PR\"   \"DT\"            \"DT_PCODE\"     \n [5] \"INTERNET\"      \"INTERNET_PR\"   \"LLPHONE\"       \"LLPHONE_PR\"   \n [9] \"MPHONE\"        \"MPHONE_PR\"     \"RADIO\"         \"RADIO_PR\"     \n[13] \"TS\"            \"TS_PCODE\"      \"TT_HOUSEHOLDS\" \"TV\"           \n[17] \"TV_PR\"        \n\n\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n5.4.2.2 Preparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Hands-on_Ex3-5.html#correlation-analysis",
    "href": "Hands-on_Ex3-5.html#correlation-analysis",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.5 CORRELATION ANALYSIS",
    "text": "5.5 CORRELATION ANALYSIS\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-on_Ex3-5.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex3-5.html#hierarchy-cluster-analysis",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.6 Hierarchy Cluster Analysis",
    "text": "5.6 Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n5.6.1 Extract clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\nst_set_geometry( ) set to NULL to drop the geometry.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n5.6.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n5.6.3 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n5.6.4 Z-score standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n5.6.5 Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large.\n\n\n5.6.6 Compute Proximity Matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n5.6.7 Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\ncex to scale down to display township labels.\n\nplot(hclust_ward, cex = 0.65)\n\n\n\n\n\n\n5.6.8 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n5.6.9 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.6.9.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n5.6.10 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n5.6.11 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.6.11.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n5.6.11.2 Plotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n5.6.12 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex3-5.html#spatially-constrained-clustering---skater-approach",
    "href": "Hands-on_Ex3-5.html#spatially-constrained-clustering---skater-approach",
    "title": "Spatially Constrained Clustering Techniques",
    "section": "5.7 SPATIALLY CONSTRAINED CLUSTERING - SKATER APPROACH",
    "text": "5.7 SPATIALLY CONSTRAINED CLUSTERING - SKATER APPROACH\nDerive spatially constrained cluster by using skater() method of spdep package.\n\n5.7.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\n5.7.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n5.7.3 Computing minimum spanning tree\n\n5.7.3.1 Calculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n5.7.4 Computing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst <- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n5.7.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\n\n\n\n\n5.7.6 Plot Clusters Choropleth Map\nUsage of the code chunk below : plot the newly derived clusters by the SKATER method.\n\ngroups_mat <- as.matrix(clust6$groups)\n\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\n\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nPlace both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other for easy comparison.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex4-6.html",
    "href": "Hands-on_Ex4-6.html",
    "title": "Geographically Weighted Regression",
    "section": "",
    "text": "case study : Build hedonic models for condominiums in 2015."
  },
  {
    "objectID": "Hands-on_Ex4-6.html#overview",
    "href": "Hands-on_Ex4-6.html#overview",
    "title": "Geographically Weighted Regression",
    "section": "6.1 OVERVIEW",
    "text": "6.1 OVERVIEW\nGeographically weighted regression (GWR) is a spatial statistical technique that considers non-stationary variables (e.g., climate, demographic factors and physical environment characteristics). It models the local relationships between the independent variables and an outcome of interest, otherwise known as the dependent variable.\nThis exercise focuses on building hedonic pricing models by using GWR methods.\n\nThe dependent variable is the resale prices of condominiums in 2015.\nThe independent variables are divided into either structural or location."
  },
  {
    "objectID": "Hands-on_Ex4-6.html#r-package-required",
    "href": "Hands-on_Ex4-6.html#r-package-required",
    "title": "Geographically Weighted Regression",
    "section": "6.2 R PACKAGE REQUIRED",
    "text": "6.2 R PACKAGE REQUIRED\nThe following are the packages required for this exercise :\n\nBuilding OLS and performing diagnostics tests\n\nolsrr\n\nols.regress( ) - 6.5.3\nols.vif.tol( ) - 6.5.5\nols_plot_resid_fit( ) - 6.5.5.1\nols_plot_resid_hist( ) - 6.5.5.2\nols_test_normality( ) - 6.5.5.2\n\n\nCalibrating geographically weighted family of models\n\nGWmodel\n\nbw.gwr( ) - 6.6.1.1\n\n\nMultivariate data visualisation and analysis\n\ncorrplot\n\ncorrplot( ) - 6.5.2.1\n\n\nSpatial data handling\n\nsf\n\nst_read( ) - 6.3.2\nst_transform( ) - 6.3.2.1\nst_crs( ) - 6.3.2.2\nst_bbox( ) - 6.3.2.3\nst_as_sf( ) - 6.3.4.1\nas_spatial( ) - 6.5.5.3\n\n\nAttribute data handling\n\ntidyverse\n\nreadr\n-- read_csv( ) - 6.3.3\nggplot2\n-- ggplot( ) - 6.4.1\n-- geom_point( ) - 6.5.1.2\ndplyr\n-- glimpse( ) - 6.3.3.1\n-- mutate( ) - 6.4.2.1\nutils\n-- head( ) - 6.3.3.2, 6.3.3.3\n\n\nChoropleth mapping\n\ntmap\n\ntmap_mode( ) - 6.4.4.1, 6.4.4.3\ntm_dots( ) - 6.4.4.2\ntm_view( ) - 6.4.4.2\n\n\nggpubr\n\nggarrange( ) - 6.4.3,\n\ngtsummary\n\ntbl_regression( ) - 6.5.4\n\nspdep\n\nnb2listw( ) - 6.5.5.5\nlm.morantest( ) - 6.5.5.5\n\nstats\n\nlm( ) - 6.5.1\n\nBase\n\nsummary( ) - 6.3.3.4\n\n\nThe code chunks below to install and launches these R packages into the R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, utils)\n\nRemarks :\nGWmodel package provides a collection of localised spatial statistical methods, namely :\n\nGW summary statistics,\nGW principal components analysis,\nGW discriminant analysis and various forms of GW regression;\nBasic and robust (outlier resistant) forms.\n\nOlsrr package is specially programmed for performing OLS regression. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures"
  },
  {
    "objectID": "Hands-on_Ex4-6.html#geospatial-data",
    "href": "Hands-on_Ex4-6.html#geospatial-data",
    "title": "Geographically Weighted Regression",
    "section": "6.3 GEOSPATIAL DATA",
    "text": "6.3 GEOSPATIAL DATA\n\n6.3.1 Acquire Data Source\nTwo data sets will be used in this model-building exercise, they are:\n\nURA Master Plan subzone boundary :\n\nESRI shapefile format (i.e. MP14_SUBZONE_WEB_PL) in svy21 projected coordinates systems\nConsists of URA Master Plan 2014’s planning subzone boundaries.\nPolygon features are used to represent these geographic boundaries.\n\ncondo_resale_2015 :\n\nCSV format, i.e. condo_resale_2015.csv.\n\n\n\n\n6.3.2 Import Geospatial Data\nUsage of the code chunk below :\nst_read( ) - sf - to import MP_SUBZONE_WEB_PL shapefile.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nRemarks :\n\nmpsz is the R simple-feature object contain the imported MP14_SUBZONE_WEB_PL shapefile.\nThe geometry type is multipolygon.\nmpsz simple feature object does not have EPSG information.\n\n\n6.3.2.1 update CRS information\nUsage of the code chunk below :\nst_transform( ) - sf - to update the newly imported mpsz with the correct ESPG code, i.e. 3414.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\n\n\n6.3.2.2 verify transformed projection coordinate system\nUsage of the code chunk below :\nst_crs( ) - sf - to verify the projection metadata of the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nRemarks :\nEPSG code is indicated as 3414.\n\n\n6.3.2.3 reveal mpsz_svy21\nUsage of the code chunk below :\nst_bbox( ) - sf - to return bounding of the mpsz_svy21 simple feature set.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n6.3.3 Import Aspatial Data\nUsage of the code chunk below :\nread_csv( ) - readr - to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"/jephOstan/ISSS624/data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n6.3.3.1 examine condo_resale\nglimpse( ) - dplyr - to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\n6.3.3.2 examine data in xcoord column\nhead( ) - utils - to list the value of “LONGITUDE” under condo_resale.\n\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n\n6.3.3.3 examine data in ycoord column\nhead( ) - utils - to list the value of “LATITUDE” under condo_resale.\n\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\n\n6.3.3.4 summarise cond_resale\nUsage of the code chunk below :\nsummary( ) - base - to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\n6.3.4 Wrangle Aspatial Data\n\n6.3.4.1 convert aspatial data frame into a sf object\nUsage of the code chunk below :\nst_as_sf( ) - sf - to convert aspatial condo_resale tibble data frame to a sf object.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nRemarks :\nThe coordinates from wgs84, i.e. crs : 4326 to svy21, i.e. crs : 3414.\nhead( ) - utils - to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nRemarks :\nThe output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex4-6.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex4-6.html#exploratory-data-analysis-eda",
    "title": "Geographically Weighted Regression",
    "section": "6.4 EXPLORATORY DATA ANALYSIS (EDA)",
    "text": "6.4 EXPLORATORY DATA ANALYSIS (EDA)\nUse statistical graphics functions to perform EDA.\n\n6.4.1 Plot Distribution of “SELLING_PRICE”\nUsage of the code chunk below :\nggplot( ) - ggplot2 - to plot the distribution of “SELLING_PRICE”.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nRemarks :\n\nThe figure above reveals a right-skewed distribution. This means that more condominium units were transacted at relatively lower prices.\nStatistically, the skewed distribution can be normalised by using log transformation.\n\n\n\n6.4.2 Plot “LOG_SELLING_PRICE”\n\n6.4.2.1 derive new variable :: “LOG_SELLING_PRICE”\nUsage of the code chunk below :\nmutate( ) - dplyr - to derive a new variable - “LOG_SELLING_PRICE” by using a log transformation on the variable “SELLING_PRICE”.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\n\n6.4.2.2 plot “LOG_SELLING_PRICE”\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nRemarks :\nNotice the distribution is relatively less skewed after the transformation.\n\n\n\n6.4.3 Plot Multiple Histogram :: Distribution of Variables\nUsage of the code chunk below :\nggarrange( ) - ggpubr - to draw multiple small histograms (also known as trellis plot) consisting of 12 histograms. Then, ggarrange() is used to organise these histograms into 3 columns by 4 rows of multiple small plots.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.4.4 Plot Statistical Point Map\nReveal the geospatial distribution condominium resale prices in Singapore.\n\n6.4.4.1 set tmap mode to interactive viewing\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\n\n6.4.4.2 plot interactive point symbol map\nUsage of the code chunk below :\ntm_dots( ) - tmap - to create an interactive point symbol map.\ntm_view( ) - tmap - use set.zoom.limits function to set the minimum and maximum zoom level to 11 and 14 respectively.\n\ntm_shape(mpsz_svy21)+\n  tm_polygons()+\n  tmap_options(check.and.fix = TRUE)+\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n6.4.4.3 turn R display into “plot” mode\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hands-on_Ex4-6.html#hedonic-pricing-modelling",
    "href": "Hands-on_Ex4-6.html#hedonic-pricing-modelling",
    "title": "Geographically Weighted Regression",
    "section": "6.5 HEDONIC PRICING MODELLING",
    "text": "6.5 HEDONIC PRICING MODELLING\nBuild hedonic pricing models for condominium resale units using lm() of R base.\n\n6.5.1 Build with Simple Linear Regression Method\nUsage of the code chunk below :\nlm( ) - stats - to build a simple linear regression model by using :\n\n“SELLING_PRICE” as the dependent variable.\n“AREA_SQM” as the independent variable.\n\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nRemarks :\n\nlm( ) returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\nThe generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\n\n6.5.1.1 summarise condo.slr\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nRemarks :\n\nThe output report reveals that the “SELLING_PRICE” can be explained by using the formula :\n*y = - 258121.1 + 14719 x1*\nThe R-squared of 0.4518 reveals that the simple regression model can explain about 45% of the resale prices.\nThe p-value is smaller than 0.0001, rejecting the null hypothesis. Therewith, the simple linear regression model is inferred to be a good estimator for “SELLING_PRICE”.\nThe Coefficients : both p-values for the “Intercept” and “ARA_SQM” are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. Thus, B0 and B1 are inferred to be good parameter estimates.\n\n\n\n6.5.1.2 visualise fit curve on scatterplot\nUsage of the code chunk below :\ngeom_point( ) - ggplot2 - to visualise the best fit curve on a scatter plot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nRemarks :\nThere are a few statistical outliers with relatively high selling prices.\n\n\n\n6.5.2 Multiple Linear Regression Method\n\nBefore building a multiple regression model, it is important to ensure that the independent variables used are not highly correlated to each other.\nMulticollinearity happens when highly correlated independent variables are used in building a regression model, and the quality of the model will be compromised.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables.\nBesides the pairs() of R, many packages support the display of a correlation matrix.\n\n\n6.5.2.1 Visualising the relationships of the independent variables\nUsage of the code chunk below :\ncorrplot( ) - corrplot - to plot a scatter plot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nRemarks :\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix.\nThere are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”.\nAOE = orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n6.5.2.2 build hedonic pricing model\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nRemarks :\nNot all the independent variables are statistically significant. The model will be calibrated by removing those variables which are not statistically significant.\n\n\n\n6.5.3 Prepare Publication Quality Table :: olsrr method\nUsage of the code chunk below :\nols_regress( ) - olsrr - to calibrate the model.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n6.5.4 Prepare Publication Quality Table :: gtsummary method\nUsage of the code chunk below :\ntbl_regression( ) - gtsummary - to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nRemarks :\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n6.5.5 Check Multicolinearity\nUsage of the code chunk below :\nols_vif_tol( ) - olsrr - to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nRemarks :\nSince the VIF of the independent variables is less than 10, can safely conclude that there is no sign of multicollinearity among the independent variables.\n\n6.5.5.1 test for Non-Linearity\nIn multiple linear regression, it is important to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nUsage of the code chunk below :\nols_plot_resid_fit( ) - olsrr - to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nRemarks :\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.5.5.2 test for Normality Assumption\nUsage of the code chunk below :\nols_plot_resid_hist( ) - olsrr - to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nRemarks :\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nols_test_normality( ) - olsrr - to use formal statistical test methods.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nRemarks :\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence, reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n6.5.5.3 test for Spatial Autocorrelation\n\nThe hedonic model is using geographically referenced attributes, hence it is also important to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, condo_resale.sf need to be converted from sf data frame into a SpatialPointsDataFrame.\nFirst, export the residual of the hedonic pricing model and save it as a data frame.\n\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nUsage of the code chunk below :\nas_spatial( ) - sf - to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\n\n6.5.5.4 create interactive point symbol map\nUse tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nRemarks :\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof the observation is true, the Moran’s I test will be performed.\n\n\n6.5.5.5 compute distance-based weight matrix\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nnb2listw( ) - spdep - to convert the output neighbours lists, i.e. nb into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nlm.morantest( ) - spdep - to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nRemarks :\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, the residuals are inferred to resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex4-6.html#hedonic-pricing-modelling-gwmodel",
    "href": "Hands-on_Ex4-6.html#hedonic-pricing-modelling-gwmodel",
    "title": "Geographically Weighted Regression",
    "section": "6.6 HEDONIC PRICING MODELLING :: GWmodel",
    "text": "6.6 HEDONIC PRICING MODELLING :: GWmodel\nBuild hedonic pricing modelling using both the fixed and adaptive bandwidth schemes.\n\n6.6.1 Build Fixed Bandwidth GWR Model\n\n6.6.1.1 define stopping rule for fixed bandwith\nUsage of the code chunk below :\nbw.gwr( ) - GWmodel - to determine the optimal fixed bandwidth to use in the model.\nadaptive argument is set to FALSE = compute the fixed bandwidth.\nTwo (2) approaches to determine the stopping rule :\n\nCV cross-validation approach\nAIC corrected (AICc) approach\n\nFor 6.6.1.1, the stopping rule is defined using approach argeement.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nRemarks :\nThe result shows that the recommended bandwidth is 971.3398 metres.\n\n\n6.6.1.2 calibrate gwr model\nCalibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-15 03:06:01 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-15 03:06:02 \n\n\nRemarks :\nThe report shows that the adjusted r-square of the gwr is 0.8430 which is significantly better than the globel multiple linear regression model of 0.6472.\n\n\n\n6.6.2 Build Adaptive Bandwidth GWR Model\nCalibrate the gwr-absed hedonic pricing model by using adaptive bandwidth approach.\n\n6.6.2.1 compute the adaptive bandwidth\nUsage of the code chunk below : to determine the recommended data point to use.\n\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nRemarks :\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.6.2.2 construct adaptive bandwidth gwr model\nUsage of the code chunk below : calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-15 03:06:09 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-15 03:06:10 \n\n\nRemarks :\nThe report shows that the adjusted r-square of the gwr is 0.8561 which is significantly better than the globel multiple linear regression model of 0.6472.\n\n\n\n6.6.3 Visualise GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted : these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates is higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n6.6.4 Convert SDF into sf data.frame\nUsage of the code chunk below : to covert SDF into sf data.frame.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n6.6.5 Visualise Local R2\nUsage of the code chunk below : to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n6.6.5.1 plot with URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "Hands-on_Ex4-6.html#reference",
    "href": "Hands-on_Ex4-6.html#reference",
    "title": "Geographically Weighted Regression",
    "section": "6.7 REFERENCE",
    "text": "6.7 REFERENCE\n\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap06.html#hedonic-pricing-modelling-in-r"
  },
  {
    "objectID": "personal_note/gwlr.html",
    "href": "personal_note/gwlr.html",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "",
    "text": "#PERSONAL NOTES"
  },
  {
    "objectID": "personal_note/gwlr.html#suitability-of-linear-regression",
    "href": "personal_note/gwlr.html#suitability-of-linear-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Suitability of Linear Regression",
    "text": "Suitability of Linear Regression\nWhen the value of a variable is a binary response, the linear regression assumptions are not valid based on the following :\n\nthe relationship between the independent variable and predictor variable is not linear.\nthe error terms are :\n\nheteroscedastic\nnot normally distributed\n\n\n\n\n\n\n\n\nViolated Linear Regression Assumptions\n\n\n\nIf proceeding in light of these violations, the results would be :\n\nthe predicted probabilities can be greater than 1 or less than 0.\nthe magnitude of the effects of independent variables may be greatly underestimated.\n\n\n\nA simple linear regression modelled the mean μ of the response variable y as a linear function of the explanatory variable : 𝜇 = 𝛽0 + 𝛽1𝑥.\nA logistic regression would model the mean of the response variable p in terms of an explanatory variable x.\n\nBUT, this is not a good model when relating p and x through the equation 𝑝 = 𝛽0 + 𝛽1𝑥.\nAs long as 𝛽0 ≠ 0, extreme values of x will give values of 𝛽0 + 𝛽1𝑥 that is inconsistent with the fact that 0 ≤ p ≤ 1.\n\n\n\n\n\n\n\nLogistic Regression Solution :: Log Odds\n\n\n\nTransform the odds to get odds ratio, 𝑝 / 1−𝑝\nnote : logistic regressions work with odds rather than proportions.\n\n\n\nModel the log odds as a linear function of the explanatory variable.\nThe slope in a logistic regression model = the difference between the log(ODDS) for churn and the log(ODDS) for not churn.\nLogistic distribution constrains the estimated probability between 0 and 1, via :\n𝑝 = 1 / 1+𝑒−(𝛽0+𝛽1𝑥)\n\n𝛽0 + 𝛽1𝑥 = 0 , then p = .50\n𝛽0 + 𝛽1𝑥 gets really big, p approaches 1\n𝛽0 + 𝛽1𝑥 gets really small, p approaches 0"
  },
  {
    "objectID": "personal_note/gwlr.html#definition-of-odds",
    "href": "personal_note/gwlr.html#definition-of-odds",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Definition of Odds",
    "text": "Definition of Odds\nOdds are the ratio of the proportions for the two possible outcomes.\nOdds(event) = P(event) / 1-P(event)\n\n\n\n\n\n\nExample 2\n\n\n\n\n\nTotal customers = 13,196\nChurn = 1,091\nSample proportion, p^ = 1,091 / 13,196 = 0.0827\nOdds = 0.0827 / 0.9173 = 0.0902\nInterpretation :\nThe odds that a customer is going to churn as 9 to 100."
  },
  {
    "objectID": "personal_note/gwlr.html#interpretation-of-a-simple-logistic-regression",
    "href": "personal_note/gwlr.html#interpretation-of-a-simple-logistic-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Interpretation of a simple logistic regression",
    "text": "Interpretation of a simple logistic regression\n\n\n\n\n\n\nExample 3\n\n\n\n\n\nsimple logistic regression, ln (𝑃 / 1 − 𝑝) = 0.5954 + −0.0255(account_age)\nFor account_age = 20,\nln (𝑃 / 1 − 𝑃) = 0.5954 + −0.0255(20) = 0.0854\n𝑒0.0854 / (1 + 𝑒0.0854) = 0.5213\nnote :\n\nFor every 1 month increase in account_age, the logit of the probability of a churn decrease by 0.0255.\nGiven account_age of a customer is 20, the log-odds = 0.0854\nProbability of Churn (also known as probability of log-odds) = 0.5213\n\nInterpretation :\nA customer with 20 months account_age has an average of 0.5213 chance that she/he will churn."
  },
  {
    "objectID": "personal_note/gwlr.html#differences-between-multiple-logistic-regression-and-linear-regression",
    "href": "personal_note/gwlr.html#differences-between-multiple-logistic-regression-and-linear-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Differences between Multiple Logistic Regression and Linear Regression",
    "text": "Differences between Multiple Logistic Regression and Linear Regression\nInstead of using a least-squared deviations criterion for the best fit, it uses a maximum likelihood method, which maximizes the probability of getting the observed results given the fitted regression coefficients.\nA consequence is that the goodness of fit and overall significance statistics used in logistic regression\ndiffer from those used in linear regression.\n\nAssumptions of Logistic Regression\n\nLogistic regression does not assume a linear relationship between the dependent and independent variables.\nFor binary logistic regression, the dependent variable must be a dichotomy (2 categories).\nThe independent variables need not be interval, normally distributed, linearly related, nor of equal variance within each group.\nThe categories (groups) must be mutually exclusive and exhaustive.\nA case can only be in one group and every case must be a member of one of the groups.\n\nFor logistic regression, a larger samples are needed than for linear regression because maximum likelihood coefficients are large sample estimates.\n\n\n\n\n\n\nMinimum of 50 cases per predictor is recommended."
  },
  {
    "objectID": "personal_note/gwlr.html#workflow-diagram-logistic-regression-modelling",
    "href": "personal_note/gwlr.html#workflow-diagram-logistic-regression-modelling",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Workflow Diagram :: Logistic Regression Modelling",
    "text": "Workflow Diagram :: Logistic Regression Modelling\n\n\nUnivariate Analysis\nCheck for outliers and determine the distribution of each predictor variable.\nDetermine the numbers of dummy variables to create for a predictor variable.\n\n\n\n\n\nA margin image\n\n\n\nE.g. the figure above shows that when “Non-churn” cases are strongly related to “Moving” and “Check Account” under the “Complain Code” variable.\n\nConsider combining both “Moving” and “Check Account” to form a group.\n\n\n\n\nBivariate Analysis\nSimilar to multiple linear regression, logistic regression model is sensitive to multicollinearity.\n-   Multicollinearity occurs when some of the predictors are highly correlated.\n\n\nModel Performance Evaluation\nThere are several statistics which can be used for comparing alternative models or evaluating the performance of a logistic regression model :\n\nWhole model test\nFit statistics\nAssessing individual parameters\n\n\n1. Whole Model Test\nTesting :\n𝐻0 : The logistic model is NOT useful 𝐻1 : The logistic model is useful\n\n\n\n\n\nA margin image\n\n\nThe test is analogous to the Analysis of Variance table for continuous responses.\nThe negative log-likelihood corresponds to the sums of squares, and the Chi-square test corresponds to the F-test.\n\n\n\n\n\n\nDecision :\n\n\n\nReject 𝐻0 if the Chi Square is large and the 𝑝 value is smaller than the critical value (i.e. 0.05, or 0.01, 0.001, 0.0001).\n\nThe 𝑝-value < 0.0001* indicates that the logistic model is useful to explain the ODDS(churn).\nIn other words, the overall model is significant at the .0001 level according to the Model chi-square statistic.\n\n\n\n\n\n2. Lack fof Fit Test (Goodness of Fit)\nTesting :\n𝐻0 : The model is adequate 𝐻1 : The model is inadequate, i.e. there is lack of fit.\n\n\n\n\n\nA margin image\n\n\n\n\n\n\n\n\nDecision :\n\n\n\nReject 𝐻0 if the Chi Square statistics is large and the 𝑝 value is smaller than the critical value (i.e. 0.05, or 0.01, 0.001, 0.0001).\nThe above figure shows that the Lack of Fit Chi-square is not significant (Prob > ChiSq = 0.4223) and supports the conclusion that there is little to be gained by introducing additional variables.\n\n\n\n\n3. Assessing Individual Parameters\nTesting :\n𝐻0 : 𝛽1 = 0\n𝐻1 : 𝛽1 ≠ 0\nTest statistics, 𝑍 = 𝑏1 / 𝑆𝐸𝑏1\n\nStatistical inference for multiple logistic regression is similar to statistical inference for multiple linear regression.\nCalculate estimates of the model parameters and standard errors for these estimates.\nConfidence intervals are formed in the usual way but use standard normal z∗-values rather than critical values from the t distributions.\nThe ratio of the estimate to the standard error is the basis for hypothesis tests.\nOften the test statistics are given as the squares of these ratios.\n\nIn this case, the P-values are obtained from the chi-square distributions with 1 degree of freedom.\nThe statistic z is sometimes called a Wald statistic.\n\n\n\nOutput from some statistical software reports the significance test results in terms of chi-square statistic, i.e. square of the z statistic\n𝑋2 = 𝑥2\n\nWhen the null hypothesis is true, it has a distribution that is approximately a 𝑥2 distribution with 1 degree of freedom, and the P-value is calculated as P(𝑥2 ≥ 𝑋2).\nBecause the square of a standard normal random variable has a 𝑥2 distribution with 1 degree of freedom, the 𝑧 statistic and the chi-square statistic give the same results for statistical inference.\n\nThe Parameter Estimates report reveals that not all predictor variables are significant.\nIn fact, only Avg Days Delinquent and Account Age with p-values < 0.0001.\nThe Condition of Current Handset is not significant.\n\n\n\n\nLikelihood-ratio Test (LRT)\nLRT tests are computed iteratively and can be computationally intensive for some models, so historically Wald’s tests had been used more often.\nThe Effect Likelihood Ratio Tests report above show that both predictor variables Avg Days Delinquent and Account Age are significant at p < 0.0001 and predictor Condition of Current Handset is not significant p = 0.3181.\n\n\n\n\n\n\nNote : LRT are more reliable than Wald’s tests, so use LRT when possible."
  },
  {
    "objectID": "personal_note/gwlr.html#geographically-weighted-multiple-logistic-regression-model",
    "href": "personal_note/gwlr.html#geographically-weighted-multiple-logistic-regression-model",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Geographically Weighted Multiple Logistic Regression Model",
    "text": "Geographically Weighted Multiple Logistic Regression Model\nAs an expansion to the standard logistic regression, logistic GWR incorporates a set geographical location to the models :\n\n\n\n\n\n\nlogit ( pi ) = log ( pi / 1 - pi ) = 𝛽0( ui , vi ) + 𝛽1( ui , vi )𝑥1\n\n\n\nwhere, 𝛽0i and 𝛽1i = local model parameters specific to location at ( ui , vi ) coordinate.\n\n\nGWLR is the geographically weighted extension to the logistic regression model and similar to ordinary regression. But with the help of a moving window or kernel function facility provided by geographically weighted methods, local regression models are computed at locations all over the study region.\nThe GWR discussed in previous lesson can be extended to GWLR with the help of a logit function as shown in the formula above.\nThe distance weights of GWLR are distance-based.\nTwo commonly used distance weights :\n\nfixed-distance weighted\nadaptive-distance weighted\n\nThe minimum bandwidth distance or size can be determined by :\n\nAkaike Information criterion (AIC)\nCross-validation (CV)\n\nSimilar to basic gwr method, five (5) spatial kernel6 namely :6 Exploratory Spatial Data Analysis with gwpcorMapper: an Interactive Mapping Tool for Geographically Weighted Correlation and Partial Correlation - Scientific Figure on ResearchGate. Available from: https://www.researchgate.net/figure/Kernel-functions-available-in-gwpcorMapper-a-Gaussian-b-exponential-c-box-car-d_fig2_360992908 [accessed 15 Dec, 2022]\n\nGaussian,\nExponential,\nBox-car,\nBi-square\nTri-cube smoothing methods\n\nReferences - Method • Kleinbaum, D.G. and Klein, M (2010) Logistic Regression: A Self‐Learning Text (3rd Edition). Springer New York. • Hosmer, D. W., JR. et. al (2013) Applied Logistic Regression (3rd Edition). John Wiley & Sons, Inc., Hoboken, New Jersey. • Atkinson PM, German SE, Sear DQ and Clark MJ (2003) “Exploring the relations between riverbank erosion and geomorphological controls using geographically weighted logistic regression”. Geographical Analysis 35(1): 58–82."
  },
  {
    "objectID": "personal_note/gwlr.html#𝛽0-ui-vi-𝛽1-ui-vi-𝑥1",
    "href": "personal_note/gwlr.html#𝛽0-ui-vi-𝛽1-ui-vi-𝑥1",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "= 𝛽0( ui , vi ) + 𝛽1( ui , vi )𝑥1",
    "text": "= 𝛽0( ui , vi ) + 𝛽1( ui , vi )𝑥1\nwhere,\n𝛽0i and 𝛽1i = local model parameters specific to location at ( ui , vi ) coordinate."
  },
  {
    "objectID": "personal_note/gwlr.html#predictive-modelling",
    "href": "personal_note/gwlr.html#predictive-modelling",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "Predictive Modelling",
    "text": "Predictive Modelling\n\nContigency Table\nFor predictive modelling, the accuracy of the predictive model will be assessed by referring to the contingency table on the side.\nIn binomial logistic regression, the classification table is a 2 x 2 table that contains\nthe observed and predicted model results (shown in the figure below). It is\npopularly known as contingency table. The table is often called an “error table” or a\n“confusion matrix”. ::: column-margin  :::\nThe contingency table has 4 data cells:\n1. Actual 0 Predicted 0 – The number of cases that were both predicted and\nobserved as 0. The records in this cell are referred to as true negatives.\nThe model classification was correct for these records.\n2. Actual 0 Predicted 1 – The number of cases that were predicted as 1 yet\nobserved as 0. The records in this cell are referred to as false positives. The\nmodel classification was incorrect for these records.\n3. Actual 1 Predicted 1 – The number of cases that were both predicted and\nobserved as 1. The records in this cell are referred to as true positives. The\nmodel classification was correct for these records.\n4. Actual 1 Predicted 0 – The number of cases that were predicted as 0 yet\nobserved as 1. The records in this cell are referred to as false negatives. The\nmodel classification was incorrect for these records.\n\nThe classification table is computed by taking a data set, usually either training data -\nthe data the model was built on or test data – a data set that was not used to\ncompute model coefficients and is used for model quality evaluation. The model\nthen is used to classify each data record using the computed probability given by the\nmodel (a value between 0 and 1) and the cut value which is the minimal value of\nprobability that should be classified as 1. It is important to understand that the\nconfusion matrix is a function of some threshold score. The default “cut value”\nvalue is 0.5, determines that a data record that has a value larger than 0.5 should be\nclassified as 1. Obviously, if the threshold change to, say, 0.55, so will the elements\nof the confusion matrix.\nDifferent fields of applications require different rates of false positives and false\nnegatives since in some applications false positives can not be tolerated while in\nother applications, false negatives can not be tolerated.\n20\n\n\nAssessing the performance of the model\n\n• The Classification Table (Contingency Table)\n\nIn order to assess the overall performance of a logistic regression model, we tend to\nrefer Misclassification Rate. The classification table above shows that there are 346\nfalse negative and 275 false positive. The overall misclassification error is 22.06%\n(i.e. (346+275)/2815).\nAccording to the Misclassification Rate measure, the model predicts 77.94% of the\nchurn cases correctly.\nContingency Analysis\n𝑨𝒄𝒄𝒖𝒓𝒂𝒄𝒚 = 𝑻𝑷 + 𝑻𝑵\n𝑻𝑷 + 𝑭𝑷 + 𝑭𝑵 + 𝑻𝑵\n𝑺𝒆𝒏𝒔𝒊𝒕𝒊𝒗𝒊𝒕𝒚 = 𝑻𝑷\n𝑻𝑷 + 𝑭𝑵\n𝑺𝒑𝒆𝒄𝒊𝒇𝒊𝒄𝒊𝒕𝒚 = 𝑻𝑵\n𝑻𝑵 + 𝑭𝑷\n𝑭𝒂𝒍𝒔𝒆 𝑷𝒐𝒔𝒊𝒕𝒊𝒗𝒆 𝑹𝒂𝒕𝒆 = 𝑭𝑷\n𝑻𝑵 + 𝑭𝑷\nA wide variety of statistics can be calculated from the elements of the contingency\ntable.\nThe overall accuracy is the sum of the number of correctly classified observations\ndivided by the total number of observations. This statistics is not a particularly\nuseful measure because it gives equal weight to all components. Imagine that you\nare trying to predict a rare event, say, cell phone churn, when only 1% of customers\nchurn. If you simple predict that all customers do not churn, your accuracy rate will\nbe 99% (Since you are not predicting any churn, FP=0 and TN=0).\nSensitivity is also known as true positive rate or recall. It answers the question, “If\nthe model predicts a positive event, what is the probability that it really is positive?”\nSpecificity is the true negative rate. It answer the question, “If the model predicts a\nnegative event, what is the probability that it really is negative?”.\nThe false positive rate can be also defined as 1-specificity. It answers the question,\n“If the model predicts a negative event, what is the probability that it is making a\nmistake?”\n\n\n\n\nReceiver Operating Characteristic (ROC) Curve\n\n\n\nAn ROC curve shows how rapidly the true positive and false negative transition\nhappens, with the goal being to have diagnostics that maximize the area under the\ncurve.\nTwo standard definitions used in predictive modelling are as follows:\n• Sensitivity, the probability that a given x value (a test or measure) correctly\npredicts an existing condition. For a given x, the probability of incorrectly\npredicting the existence of a condition is 1 – sensitivity.\n• Specificity, the probability that a test correctly predicts that a condition does not\nexist.\nA ROC curve is a plot of sensitivity by (1 – specificity) for each value of x. The area\nunder the ROC curve is a common index used to summarize the information\ncontained in the curve.\nIn the plot, a light yellow line is drawn at a 45 degree angle tangent to the ROC\nCurve. This marks a good cutoff point under the assumption that false negatives and\nfalse positives have similar costs.\nROC Gives a good indication to model performance (values are between 0.5 and 1).\nThis variable should be as high as possible with some restrictions. Typical values\nindicate the following:\n• 0.5 – No distinguish ability (the model has no meaning).\n• 0.51 – 0.7 – Low distinguish ability (not a very good model yet the model can be\nused).\n• 0.71 – 0.9 – Very good distinguish ability.\n• 0.91 – 1 – Excellent distinguish ability.\nWarning: In some fields, logistic regression models can have an excellent distinguish\nability, however this might indicate that the model is “too good to be true”. Double\nand triple check your model making sure that no variables from the future are\npresent and that the model has no other odd parameter values.\n23"
  },
  {
    "objectID": "personal_note/gwlr.html#accuracy-of-predictive-modelling",
    "href": "personal_note/gwlr.html#accuracy-of-predictive-modelling",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "4.2 Accuracy of Predictive Modelling",
    "text": "4.2 Accuracy of Predictive Modelling\n\n4.2.1 Contigency Table / Error Table / Confusion Matrix\nIn binomial logistic regression, the classification table is a 2 x 2 table that contains the observed and predicted model results.\n\n\n\nThe contingency table has 4 data cells :\n\nActual 0 Predicted 0 – The number of cases predicted and observed as 0.\n\nThe records in this cell are referred to as true negatives.\nThe model classification was correct for these records.\n\nActual 0 Predicted 1 – The number of cases predicted as 1 yet observed as 0.\n\nThe records in this cell are referred to as false positives.\nThe model classification was incorrect for these records.\n\nActual 1 Predicted 1 – The number of cases predicted and observed as 1.\n\nThe records in this cell are referred to as true positives.\nThe model classification was correct for these records.\n\nActual 1 Predicted 0 – The number of cases predicted as 0 yet observed as 1.\n\nThe records in this cell are referred to as false negatives.\nThe model classification was incorrect for these records.\n\n\nThe model classifies each data record based on :\n\nThe computed probability is between 0 and 1.\nThe threshold / cut value = the minimal probability value to classify as 0 or 1.\n\nThe default “cut value” is 0.5. When a value is greater than 0.5, it will be classified as 1.\n\n\n\n\n\n\n\n\nDifferent fields of applications has different tolerable rates of false positives and false negatives.\n\n\n\n\n\n\n\n\n4.2.2 Assess Model Performance :: Misclassification Rate\nClassification Table / Contigency Table is used to assess the overall performance of a logistic regression model.\n\n\n\n\nThe classification table above shows that there are 346 false negative and 275 false positive. The overall misclassification error is 22.06%, i.e. ( 346 + 275 ) / 2815 ).\nAccording to the Misclassification Rate measure, the model predicts 77.94% of the churn cases correctly.\n\n\n4.2.2.1 Contingency Analysis\n\nOverall Accuracy\nRefers to the correctly classified observations divided by the total number of observations.\n\nThis statistics is not a particularly useful measure because it gives equal weight to all components.\n\n\n\n\n\n\n\n\noverall_accuracy = ( 𝑻𝑷 + 𝑻𝑵 ) / ( 𝑻𝑷 + 𝑭𝑷 + 𝑭𝑵 + 𝑻𝑵 )\n\n\n\n\n\n\n\nSensitivity refers to the true positive rate.\n\n\n\n\n\n\n\nsensitivty = ( 𝑻𝑷 ) / ( 𝑻𝑷 + 𝑭𝑵 )\n\n\n\n\n\n\n\nSpecificity refers to the true negative rate.\n\n\n\n\n\n\n\nspecificity = ( 𝑻𝑵 ) / ( 𝑻𝑵 + 𝑭𝑷 )\n\n\n\n\n\n\n\nFalse Positive rate indicates the probability of predicted non-negative event.\n\n\n\n\n\n\n\nfalse positive = ( 𝑭𝑷 ) / ( 𝑻𝑵 + 𝑭𝑷)\n\n\n\n\n\n\n\n\n4.2.2.2 Receiver Operating Characteristic (ROC) Curve\n\n\n\nAn ROC curve shows how rapidly the true positive and false negative transition happens, with the goal being to have diagnostics that maximise the area under the curve.\nTwo standard definitions used in predictive modelling :\n\nSensitivity = the probability that a given x value (a test or measure) correctly predicts an existing condition.\nSpecificity = the probability that a test correctly predicts that a condition does not exist.\n\nA ROC curve is a plot of sensitivity by (1 – specificity) for each value of x. The area under the ROC curve is a common index used to summarize the information contained in the curve.\n\nIn the plot, a light yellow line is drawn at a 45-degree angle tangent to the ROC Curve.\nThis marks a good cutoff point under the assumption that false negatives and false positives have similar costs.\n\nROC values (between 0.5 and 1) provide a good indication of model performance :\n\n0.5 – No distinguish ability (the model has no meaning).\n0.51 – 0.7 – Low distinguish ability (not a very good model yet the model can be used).\n0.71 – 0.9 – Very good distinguish ability.\n0.91 – 1 – Excellent distinguish ability.\n\n\n\n\n\n\n\nWarning\n\n\n\nIn some fields, logistic regression models can have an excellent distinguish ability, however this might indicate that the model is “too good to be true”.\nReview the model to ensure no variables from the future or other odd parameter values."
  },
  {
    "objectID": "personal_note/Personal_notes.html#common-errors",
    "href": "personal_note/Personal_notes.html#common-errors",
    "title": "Common Errors and Basic Concepts",
    "section": "COMMON ERRORS",
    "text": "COMMON ERRORS\n\nDuring importing geospatial data, the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nInput feature class contains less than 30 features.\n>> produce low reliability results.\nThe input field in categorical attribute field.\nUse WGS84, or even undefined.\n>> Should always use projection based coordinates."
  },
  {
    "objectID": "personal_note/SpatialConstrainedClusterAnalysis.html#typology-of-cluster-analysis-technique",
    "href": "personal_note/SpatialConstrainedClusterAnalysis.html#typology-of-cluster-analysis-technique",
    "title": "Spatially Constrained Cluster Analysis",
    "section": "Typology of Cluster Analysis Technique",
    "text": "Typology of Cluster Analysis Technique\n\nHierarchical Clustering\n\n\n1.1 Agglomerative Clustering ( AGNES or Agglomerative Nesting)\n\nBottom-up. Plot with dendrogram.\nEach object initially considered as a single-element cluster (leaf).\nAlgorithm for each step is to combine 2 clusters that are most similar into a new bigger cluster (node).\n\ncompute proximity matrix before the combination of data points. Subsequently, update the proximity matrix each iteration.\n\n3 common methods to calculate proximity matrix :\n- Euclidean distance\n- City-block distance\n- Chebychev distance\n\ncommon methods :\n\nMaximum / Complete Linkage Clustering\nMinimum / Single Linkage Clustering\nMean / Average Linkage\nCentroid\nWard’s Minimum Variance method\n\n\n\n\n\n1.2 Divisive Clustering ( DIANA or Divise Analysis )\n\nTop-down.\nEach step, the most heterogeneous cluster is divided into two.\n\n\n\n\nPartitioning Clustering (K-means)\n==========\n\n\nUnivariate EDA\n\ncheck the distribution of the cluster variables.\ndetermine the differences in data ranges.\nvariable standardisation techniques if unable to change the scales for the variables’ value :\n\nZ-score\nMin-max = value range of 0 to 1\nDecimal scaling\n\nvariable standardisation techniques above need to be done first before the transformation for clustering.\n\n\n\nBivariate EDA\n\ncheck the correlation between input variables (i.e. correlation coefficient >= 0.85).\nnot recommended to apply PCA for highly correlated social economic aspects. Unless clustering analysis is single/home value, e.g. reflection index value from satellite images.\nVIF (variance inflation factor) method to determine which highly correlated variables not to include in the analysis - regression? (!!!!! confirm this statement)\nstandardisation should not change distribution, should provide quite similar output while transformation can resulted relatively large differences. (!!!!! confirm this statement)\n\n==========\n\n\nSpatially Constrained Clustering Methods\n2 grouping approaches :\n\nGrouping Objects\n\ngrouping similar contiguous objects into new aggregrate areal units.\n\ntension between attribute similarity\n\n\nGrouping Observations\n\nlocational similarity : group spatially contiguous observations only.\n\n\n==========\n\n\nSpatial Kluster Analysis (SKATER) method\n\nConstruct minimum spanning tree from adjacency graph.\nPrune the tree (cut edges) to achieve maximum internal homogeneity.\nSpatially Constrained Clustering using SKATER method.\n\nReference: AssunÇão, R. M ; Neves, M. C ; Câmara, G ; Da Costa Freitas, C (2006) “Efficient regionalization techniques for socio-economic geographical units using\nminimum spanning trees”, International Journal of Geographical Information Science, Vol.20 (7), p.797-811\n\n==========\n\n\nContiguity as a Graph\n\nObjective is to minimize within-group dissimilarity (maximize between-group).\nNetwork connectivity based on adjacency between nodes (locations).\nEdge value reflects dissimilarity between nodes.\n\n==========\n\n\nMinimum Spanning Tree Algorithm\n\nConnectivity graph, G = (V, L),\nV = vertices (nodes),\nL = edges path - a sequence of nodes connected by edges v1 to vk :\n(v1,v2), ..., (vk-1,vk).\nSpanning tree - tree with n nodes of G unique path connecting any two nodes n-1 edges.\nMinimum spanning tree - spanning tree that minimizes a cost function minimise sum of dissimilarities over all nodes.\n\n\n\nReferences\nWhat Is Geographic Segmentation And Why You Need It.. https://manychat.com/blog/geographic-segmentation/\nOctober 16, 2019 Michael Keenan"
  },
  {
    "objectID": "personal_note/gwlr.html#overview",
    "href": "personal_note/gwlr.html#overview",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "1. OVERVIEW",
    "text": "1. OVERVIEW\n\n\n\n\n\n\nKey Focuses\n\n\n\n\nUnderstand the differences between binary and continuous outcomes.\nUnderstand the basic concepts and methods of logistic regression models.\nInterpret the model and analysis results accurately.\nCompare and evaluate predictive models generated using logistic regression.\n\nKey Questions :\n\nHow do I tell if my model is good?\nHow do I tell if the explanatory variable helping my model?\nHow do I tell if my model is providing reasonable prediction?"
  },
  {
    "objectID": "personal_note/gwlr.html#data-type",
    "href": "personal_note/gwlr.html#data-type",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "2. DATA TYPE",
    "text": "2. DATA TYPE\nVarious types of data :\n\nBranch (Categorical: Toronto, Montreal, Seattle, etc.)\nAttrition (Binary: Stay, Churn)\nPromotion (Binary: Promoted, Not Promoted)\nSales Plan (Continuous, this is how much an employee must sell in that month)\n\nBut, in the context of spatial data, there are two (2) primary types1 :1 GISGeography. (2022, May 28 May). Vector vs Raster: What’s the Difference Between GIS Spatial Data Types? https://gisgeography.com/spatial-data-types-vector-raster/\n\nVector data is comprised of vertices and paths.\n\n3 basic symbol types :\n\npoints = XY coordinates with a spatial reference frame.\nlines = Each dot representing a vertex. Lines connect each vertex in a set order to be a vector line.\npolygons (areas) = vector polygon formed when joining a set of vertices in a particular order and closing it.\n\n\n\nRaster data consists of 2 categories :\n\nDiscrete Raster has a distinct theme or category.\n\nEach land cover cell is definable.\nIt can be discreetly defined where the class begins and ends.\nUsually consists of integers to present classes. E.g. value 1 = urban areas, 2 = forest, etc.\n\nContinuous Raster (non-discrete) are grid cells with gradually changing data.\n\nE.g. elevation, temperature, aerial photograph, etc.\nA continuous raster surface can be derived from a fixed registration point.\n-- Digital elevation models use sea level as a registration point.\n-- Cell values for aspect map2 have fixed directions such as north, east, south, or west.\n\n\n2 GISGeography. (2022, November 9). What is an Aspect Map? https://gisgeography.com/aspect-map/Continuous data is poorly stored and displayed as vectors. To display continuous data as a vector would require substantial generalisation. Although topology is useful for vector data, it is often processing intensive.\n\n\n\n\n\nGenerally, quantitative analysis is intuitive with discrete or continuous raster. However, it can be potentially huge at the cost of processing speed and data storage.\n\n\n\n\n\n\nExample 1\n\n\n\n\n\nWhether a customer churns, (y = 1) or not churns (y = 0) after signed up a mobile service contract.\n\nprobability (p) depends on x.\nx is the explanatory variable (either categorical (discrete) or quantitative), such as :\n\naccount age\ncurrent billing amount\naverage days delinquent"
  },
  {
    "objectID": "personal_note/gwlr.html#logistic-regression-models",
    "href": "personal_note/gwlr.html#logistic-regression-models",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "3. LOGISTIC REGRESSION MODELS",
    "text": "3. LOGISTIC REGRESSION MODELS\nLogistic regression model can be used as :\n\nexplanatory model\npredictive model\n\nThe logistic model (or logit model)3 is a statistical model that models the probability of an event taking place by having the log-odds for the event be a linear combination of one or more independent variables.3 Wikipedia. (n.d.). Logistic regression. https://en.wikipedia.org/wiki/Logistic_regression\nIn regression analysis, logistic regression (or logit regression) estimates the parameters of a logistic model (the coefficients in the linear combination).\n\n\n\n\n\n\nRevision Note\n\n\n\nRegression analysis4 is a set of statistical processes for estimating the relationships between :4 Wikipedia. (n.a.). Regression analysis. https://en.wikipedia.org/wiki/Regression_analysis\n\na dependent variable (often called the ‘outcome’ or ‘response’ variable, or a ‘label’ in machine learning parlance), and\none or more independent variables (often called ‘predictors’, ‘covariates’, ‘explanatory variables’ or ‘features’)\n\n\n\nIn Binary Logistic Regression, usually consists :\n\nA single binary dependent variable, coded by an indicator variable, where the two values are labelled “0” and “1”.\nThe independent variables can each be a binary variable (two classes coded by an indicator variable) or a continuous variable (any real value).\n\nThe corresponding probability of the value labelled “1” can vary between 0 and 1.\nLogistic function converts log-odds to probability.\n-- Logistic functions are used in logistic regression to model how the probability p of an event may be affected by one or more explanatory variables.\nThe unit of measurement for the log-odds scale is called a logit, from logistic unit."
  },
  {
    "objectID": "personal_note/gwlr.html#linear-regression",
    "href": "personal_note/gwlr.html#linear-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "3.1 Linear Regression",
    "text": "3.1 Linear Regression\n\n3.1.1 Assumptions of Linear Regression\nWhen the value of a variable is a binary response, the linear regression assumptions are not valid based on the following :\n\nthe relationship between the independent variable and predictor variable is not linear.\nthe error terms are :\n\nheteroscedastic\nnot normally distributed\n\n\n\n\n\n\n\n\nViolated Linear Regression Assumptions\n\n\n\nIf proceeding in light of these violations, the results would be :\n\nthe predicted probabilities can be greater than 1 or less than 0.\nthe magnitude of the effects of independent variables may be greatly underestimated."
  },
  {
    "objectID": "personal_note/gwlr.html#logistic-regression",
    "href": "personal_note/gwlr.html#logistic-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "3.2 Logistic Regression",
    "text": "3.2 Logistic Regression\nA simple linear regression modeled the mean μ of the response variable y as a linear function of the explanatory variable : 𝜇 = 𝛽0 + 𝛽1𝑥.\nA logistic regression would model the mean of the response variable p in terms of an explanatory variable x.\n\nBUT, this is not a good model when relating p and x through the equation 𝑝 = 𝛽0 + 𝛽1𝑥.\nAs long as 𝛽0 ≠ 0, extreme values of x will give values of 𝛽0 + 𝛽1𝑥 that is inconsistent with the fact that 0 ≤ p ≤ 1.\n\n\n3.2.1 Assumptions of Logistic Regression\n\nLogistic regression does not assume a linear relationship between the dependent and independent variables.\nFor binary logistic regression, the dependent variable must be a dichotomy (2 categories).\nThe independent variables need not be interval, normally distributed, linearly related, nor of equal variance within each group.\nThe categories (groups) must be mutually exclusive and exhaustive.\nA case can only be in one group, and every case must be a member of one of the groups.\n\nUnlike linear regression, larger samples are needed for logistic regression because maximum likelihood coefficients are large sample estimates.\n\n\n\n\n\n\nMinimum of 50 observations / cases per indepdent variables / predictors is recommended.\n\n\n\n\n\n\n\n\n\n\n\n\nLogistic Regression Solution :: Log Odds\n\n\n\nTransform the odds to get odds ratio, 𝑝 / 1−𝑝\nnote : logistic regressions work with odds rather than proportions.\n\n\n\nModel the log odds as a linear function of the explanatory variable.\nThe slope in a logistic regression model = the difference between the log(ODDS) for churn and the log(ODDS) for not churn.\nLogistic distribution constrains the estimated probability between 0 and 1, via :\n𝑝 = 1 / 1+𝑒−(𝛽0+𝛽1𝑥)\n\n𝛽0 + 𝛽1𝑥 = 0 , then p = .50\n𝛽0 + 𝛽1𝑥 gets really big, p approaches 1\n𝛽0 + 𝛽1𝑥 gets really small, p approaches 0\n\n\n\n\n3.2.1 Odds Definition\nOdds are the ratio of the proportions for the two possible outcomes.\nOdds(event) = P(event) / 1-P(event)\n\n\n\n\n\n\nExample 2\n\n\n\n\n\nTotal customers = 13,196\nChurn = 1,091\nSample proportion, p^ = 1,091 / 13,196 = 0.0827\nOdds = 0.0827 / 0.9173 = 0.0902\nInterpretation :\nThe odds that a customer is going to churn as 9 to 100.\n\n\n\n\n\n3.2.2 Interpret Simple Logistic Regression\n\n\n\n\n\n\nExample 3\n\n\n\n\n\nsimple logistic regression, ln (𝑃 / 1 − 𝑝) = 0.5954 + −0.0255(account_age)\nFor account_age = 20,\nln (𝑃 / 1 − 𝑃) = 0.5954 + −0.0255(20) = 0.0854\n𝑒0.0854 / (1 + 𝑒0.0854) = 0.5213\nnote :\n\nFor every 1 month increase in account_age, the logit of the probability of a churn decrease by 0.0255.\nGiven account_age of a customer is 20, the log-odds = 0.0854\nProbability of Churn (also known as probability of log-odds) = 0.5213\n\nInterpretation :\nA customer with 20 months account_age has an average of 0.5213 chance that she/he will churn."
  },
  {
    "objectID": "personal_note/gwlr.html#difference-of-multiple-logistic-regression-linear-regression",
    "href": "personal_note/gwlr.html#difference-of-multiple-logistic-regression-linear-regression",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "3.3 Difference of Multiple Logistic Regression & Linear Regression",
    "text": "3.3 Difference of Multiple Logistic Regression & Linear Regression\nInstead of using a least-squared deviations criterion for the best fit, it uses a maximum likelihood method, which maximizes the probability of getting the observed results given the fitted regression coefficients.\nA consequence is that the goodness of fit and overall significance statistics used in logistic regression differ from those used in linear regression.\n\n3.3.1 Workflow Diagram :: Logistic Regression Modelling\n\n\n3.3.2.1 Univariate Analysis\nCheck for outliers and determine the distribution of each predictor variable.\nDetermine which dummy variables to create as a predictor variables.\n\n\n\n\n\ncompare “No Churn” value among variables\n\n\n\nE.g. the figure above shows that when “No churn” cases are strongly related to “Moving” and “Check Account” under the “Complain Code” variable.\n\nConsider combining “Moving” and “Check Account” to form a group.\n\n\n\n\n3.3.2.2 Bivariate Analysis\nSimilar to multiple linear regression, the logistic regression model is sensitive to multicollinearity.\n\nMulticollinearity occurs when some of the predictors are highly correlated."
  },
  {
    "objectID": "personal_note/gwlr.html#methods-to-evaluate-logistic-regression-model",
    "href": "personal_note/gwlr.html#methods-to-evaluate-logistic-regression-model",
    "title": "Geographically Weighted Logistic Regression (GWLR)",
    "section": "4.1 Methods to Evaluate Logistic Regression Model",
    "text": "4.1 Methods to Evaluate Logistic Regression Model\nThere are several statistics which can be used for comparing alternative models or evaluating the performance of a logistic regression model :\n\nWhole model test\nFit statistics\nAssessing individual parameters\n\n\n4.1.1 Whole Model Test\nTesting :\n𝐻0 : The logistic model is NOT useful.\n𝐻1 : The logistic model is useful.\n\n\n\nThe test is analogous to the Analysis of Variance table for continuous responses.\nThe negative log-likelihood corresponds to the sums of squares, and the Chi-square test corresponds to the F-test.\n\n\n\n\n\n\nDecision :\n\n\n\nReject 𝐻0 if the Chi Square is large and the 𝑝 value is smaller than the critical value (i.e. 0.05, or 0.01, 0.001, 0.0001).\n\nThe 𝑝-value < 0.0001* indicates that the logistic model is useful to explain the ODDS(churn).\nIn other words, the overall model is significant at the .0001 level according to the Model chi-square statistic.\n\n\n\n\n\n4.1.2 Lack of Fit Test (Goodness of Fit)\nTesting :\n𝐻0 : The model is adequate.\n𝐻1 : The model is inadequate, i.e. there is lack of fit.\n\n\n\n\n\n\n\n\n\nDecision :\n\n\n\nReject 𝐻0 if the Chi Square statistics is large and the 𝑝 value is smaller than the critical value (i.e. 0.05, or 0.01, 0.001, 0.0001).\nThe above figure shows that the Lack of Fit Chi-square is not significant (Prob > ChiSq = 0.4223) and supports the conclusion that there is little to be gained by introducing additional variables.\n\n\n\n4.1.2.1 Likelihood-ratio Test (LRT, Wilks Test)\nThe likelihood-ratio test assesses the goodness of fit of two competing statistical models based on the ratio of their likelihoods5, specifically one found by maximisation over the entire parameter space and another found after imposing some constraint.5 Wikipedia. (n.d.). Likelihood-ratio test. https://en.wikipedia.org/wiki/Likelihood-ratio_test\nLRT tests are computed iteratively and can be computationally intensive for some models. So, historically Wald’s tests had been used more often.\nThe Effect Likelihood Ratio Tests report above show that both predictor variables Avg Days Delinquent and Account Age are significant at p < 0.0001 and predictor Condition of Current Handset is not significant p = 0.3181.\n\n\n\n\n\n\nNote : LRT are more reliable than Wald’s tests, so use LRT when possible.\n\n\n\n\n\n\n\n\n\n4.1.3 Assessing Individual Parameters\nTesting :\n𝐻0 : 𝛽1 = 0\n𝐻1 : 𝛽1 ≠ 0\nTest statistics, 𝑍 = 𝑏1 / 𝑆𝐸𝑏1\nStatistical inference for multiple logistic regression is similar to statistical inference for multiple linear regression.\n\nCalculate estimates of the model parameters and standard errors.\n\n\n\nConfidence intervals are formed in the usual way but use standard normal z∗-values rather than critical values from the t distributions.\nThe ratio of the estimate to the standard error is the basis for hypothesis tests.\nOften the test statistics are given as the squares of these ratios.\n\nIn this case, the P-values are obtained from the chi-square distributions with 1 degree of freedom.\n\n\n\nOutput from some statistical software reports the significance test results in terms of chi-square statistic, i.e. square of the z statistic / Wald statistic.\n𝑋2 = 𝑥2\n\nWhen the null hypothesis is true, it has a distribution that is approximately a 𝑥2 distribution with 1 degree of freedom, and the P-value is calculated as P ( 𝑥2 ≥ 𝑋2 ).\nBecause the square of a standard normal random variable has a 𝑥2 distribution with 1 degree of freedom, the 𝑧 statistic and the chi-square statistic give the same results for statistical inference.\n\nThe Parameter Estimates report reveals that not all predictor variables are significant.\nIn fact, only Avg Days Delinquent and Account Age with p-values < 0.0001.\nThe Condition of Current Handset is not significant."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#visualise-correlation-matrix-1",
    "href": "class_project/project_2/Regionalisation_scca.html#visualise-correlation-matrix-1",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.1 Visualise Correlation Matrix",
    "text": "4.1 Visualise Correlation Matrix\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\n\n\n\nThis plot allows to identify the pattern and the relationship in the matrix.\n\n\nShow the code\ncorrplot.mixed((cor(cluster_vars)),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\n\nRemarks :\nFollowing are the pairs with strong correlation :\n\n\n\ncorrelation coefficients\nvariable_1\nvariable_2\n\n\n\n\n1.00\npct_uc1000\npct_ucN1000\n\n\n1.00\npct_mechPump\npct_uc1000\n\n\n-1.00\npct_mechPump\npct_ucN1000\n\n\n-1.00\npct_uc1000\npct_ucN1000\n\n\n0.99\npct_tapStand\npct_uc250\n\n\n0.99\npct_uc300\npct_ucN1000\n\n\n-0.99\npct_mechPump\npct_uc300\n\n\n-0.99\npct_uc300\npct_uc1000\n\n\n\nSince only “usage_capacity” and “water_tech_category” are showing multicollinearity, hence the study will be split into 2 models with water point status by -\n1) “water_tech_category”\n2) “usage_capacity”"
  },
  {
    "objectID": "personal_note/Summary_R_packages.html",
    "href": "personal_note/Summary_R_packages.html",
    "title": "Summary of R Packages",
    "section": "",
    "text": "ggplot2 :: Bar Charts\n\n\n\n\n\n2 types of bar charts :\n\ngeom_bar()\ngeom_col(). geom_bar() makes the height of the bar proportional to the number of cases in each group (or if the weight aesthetic is supplied, the sum of the weights)\n\ngeom_col() for the heights of the bars to represent values in the data, uses stat_identity(): it leaves the data as is.\ngeom_bar() uses stat_count() by default: it counts the number of cases at each x position.\n\n\n\n\n\n\n\n\narguments :: geom_bar( )\n\n\n\n\n\nmapping = NULL,\ndata = NULL,\nstat = “count”,\nposition = “stack”,\n…, often aesthetics arguments, e.g. colour = “red” or size = 3\njust = 0.5,\nwidth = NULL,\nna.rm = FALSE,\norientation = NA,\nshow.legend = NA,\ninherit.aes = TRUE\n)\n\n\n\n\n\n\n\n\n\nDanger\n\n\n\n\n\narguments :: geom_col(\nmapping = NULL,\ndata = NULL,\nposition = “stack”,\n…,\njust = 0.5,\nwidth = NULL,\nna.rm = FALSE,\nshow.legend = NA,\ninherit.aes = TRUE\n)\n\n\n\n\n\n\n\n\n\narguments :: stat_identity( )\n\n\n\n\n\nstat_identity(\nmapping = NULL,\ndata = NULL,\ngeom = “point”,\nposition = “identity”,\n…,\nshow.legend = NA,\ninherit.aes = TRUE )\n\n\n\n\n\n\n\n\n\nNote\n\n\n\np <- ggplot(mtcars,\naes(wt, mpg))\np + stat_identity( )"
  },
  {
    "objectID": "personal_note/func_arg.html",
    "href": "personal_note/func_arg.html",
    "title": "Functions & Arguments",
    "section": "",
    "text": "ggplot2 :: Bar Charts\n\n\n\n\n\n2 types of bar charts :\n\ngeom_bar()\n\ngeom_bar() uses stat_count() by default: it counts the number of cases at each x position.\n\ngeom_col(). geom_bar() makes the height of the bar proportional to the number of cases in each group (or if the weight aesthetic is supplied, the sum of the weights)\n\ngeom_col() for the heights of the bars to represent values in the data, uses stat_identity(): it leaves the data as is.\n\n\n\n\n\n\n\n\narguments :: geom_bar( )\n\n\n\n\n\nmapping = NULL,\ndata = NULL,\nstat = “count”,\ncomputed variables can be either “count” or “prop”\nposition = “stack”,\n…,\n\nOften aesthetics arguments, e.g. colour = “red” or size = 3\n\njust = 0.5,\n\nAdjustment for column placement.\nDefault = 0.5 = columns to be centered about axis breaks.\nSet to 0 or 1 to place columns to the left / right of axis breaks.\n\nwidth = NULL,\n\nBar width.\nDefault = 90% of the resolution( ) of the data.\nFor discrete variable, the resolution is 1.\n\nna.rm = FALSE,\n\nDefault = FALSE = missing values are removed with a warning.\nTRUE = missing values are silently removed.\n\norientation = NA,\nshow.legend = NA,\n\nDefault = NA = includes if any aesthetics are mapped.\nFALSE = never includes, and TRUE always includes.\n\ninherit.aes = TRUE\n\n\n\n\n\n\n\n\n\nExample : flip the bar chart orientation by mapping variable to y\n\n\n\nggplot(mpg) + geom_bar(aes(y = class))\n\n\n\n\n\n\n\n\n\nExample : auto stacked\n\n\n\ng <- ggplot(mpg, aes(class)) g + geom_bar(aes(fill = drv))\n\n\n\n\n\n\n\n\n\nExample : auto stacked horizontally\n\n\n\nggplot(mpg, aes( y = class)) + geom_bar(aes( fill = drv), position = position_stack(reverse = TRUE)) + theme(legend.position = “top”)\n\n\n\n\n\n\n\n\n\narguments :: geom_col\n\n\n\n\n\nmapping = NULL,\ndata = NULL,\nposition = “stack”,\n…,\njust = 0.5,\nwidth = NULL,\nna.rm = FALSE,\nshow.legend = NA,\ninherit.aes = TRUE\n\n\n\n\n\n\n\n\n\narguments :: stat_identity( )\n\n\n\n\n\nstat_identity(\nmapping = NULL,\ndata = NULL,\ngeom = “point”,\nposition = “identity”,\n…,\nshow.legend = NA,\ninherit.aes = TRUE\n\n\n\n\n\n\n\n\n\nExample for stat_identity( )\n\n\n\np <- ggplot(mtcars,\naes(wt, mpg))\np + stat_identity( )"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#usage-of-the-code-chunk-below-2",
    "href": "class_project/project_2/Regionalisation_scca.html#usage-of-the-code-chunk-below-2",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "Usage of the code chunk below :",
    "text": "Usage of the code chunk below :\nfreq.na( ) - questionr - to generate frequency table of missing value.\n\nfreq.na(bdy_nga$shapeName)\n\nmissing       % \n      0       0 \n\n\n\n3.3.1.2 check for duplication :: “shapeName”\nUsage of the code chunk below :\nduplicated( ) - base - to determine duplicate elements.\n\nfreq(duplicated(bdy_nga$shapeName))\n\n        n    % val%\nFALSE 768 99.2 99.2\nTRUE    6  0.8  0.8\n\n\n\n\n3.3.1.3 list the duplicated value :: “shapeName”\nUsage of the code chunk below :\nadd_count( ) - dplyr - to count observations by group\nfilter( ) - dplyr - to retain shapeName that has count not equal to 1.\n\nwp_duplShapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nwp_duplShapeName\n\nSimple feature collection with 12 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n\n\n\n\n3.3.1.4 verify findings in section 3.3.1.3\nUsage of the code chunk below :\ntmap_mode( ) - tmap - to set tmap mode to static plotting or interactive.\ntm_shape( ) - tmap - to specify the shape object.\ntm_polygons( ) - tmap - to fill the polygons and draw the polygon borders.\ntm_view( ) - tmap - to set the options for the interactive tmap viewer.\ntm_fill( ) - tmap - to specify either which colour to be used or which data variable mapped to the colour palette.\ntm_borders( ) - tmap - to draw the polygon borders.\ntmap_style( ) - tmap - to set the tmap style.\ntm_layout( ) - tmap - to set the layout of cartographic map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(wp_duplShapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nRemarks :\nThe plot above indicates those duplicated water points are from different Nigeria states.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n3.3.1.5 acquire State info for duplicated value\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\nstate_dd_coordinates\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.75 6.75\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n9.16667 9.75\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n11.5 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.53 7.7\n\n\nObi\n546\nObi\nNasarawa\nNG.NA.OB\n8.53 7.7\n\n\nObi\n547\nObarike-Ito\nBenue\nNG.BE.OB\n7.33333 8.75\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.5 3.35\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.07 4.41"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html",
    "title": "GWLR - Osun Water Points",
    "section": "",
    "text": "case study : Modelling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression (GWLR)."
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#objectives",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#objectives",
    "title": "GWLR - Osun Water Points",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\nTo build an explanatory model to discover factor affecting water point status in Osun State, Nigeria :"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#scope-of-works",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#scope-of-works",
    "title": "GWLR - Osun Water Points",
    "section": "1.2 Scope of Works",
    "text": "1.2 Scope of Works\nSome of the specific tasks for this study are :\n\nimport the shapefile into R with the appropriate sf method, and save it in a simple feature data frame format;"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#note",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#note",
    "title": "GWLR - Osun Water Points",
    "section": "note",
    "text": "note\nThree (3) Projected Coordinate Systems of Nigeria, EPSG : 26391, 26392, and 26303.\n\nderive the proportion of functional and non-functional water points at LGA level (i.e. ADM2) by appropriate tidyr and dplyr methods;\ncombine geospatial and aspatial data frames into a simple feature data frame.\ndelineate water points measures functional regions by using :\n\nconventional hierarchical clustering.\nspatially constrained clustering algorithms.\n\nplot two (2) main types of maps below :\nThematic Mapping\nShow the derived water-point measures by appropriate statistical graphics and choropleth mapping technique.\nAnalytical Mapping\nPlot delineated functional regions using non-spatially constrained and spatially constrained clustering algorithms."
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#load-r-packages-into-r-environment",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#load-r-packages-into-r-environment",
    "title": "GWLR - Osun Water Points",
    "section": "2.1 Load R Packages into R Environment",
    "text": "2.1 Load R Packages into R Environment\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, funModeling, blorr, corrplot, ggpubr, spdep, GWmodel, tmap, skimr, caret, questionr, berryFunctions)"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#acquire-data-source",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#acquire-data-source",
    "title": "GWLR - Osun Water Points",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nOsun_wp_sf.rds, contained water points within Osun state.\n\nIt is in sf point data frame.\n\n\nGeospatial Data\n\nOsun.rds, contains LGAs boundaries of Osun State.\n\nIt is in sf polygon data frame"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#import-aspatial-data",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#import-aspatial-data",
    "title": "GWLR - Osun Water Points",
    "section": "3.2 Import Aspatial Data",
    "text": "3.2 Import Aspatial Data\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\nUsage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to import and save the comma separated value (CSV) file as a data frame, with title “wp_coord”.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nwp_coord <- read_csv(\"/jephOstan/ISSS624/class_project/project_2/data/aspatial/WPdx_NGAv1.1.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nRows: 95008 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): New Georeferenced Column, lat_lon_deg\ndbl (3): row_id, #lat_deg, #lon_deg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(wp_coord)\n\nRemarks :\nUpload and create new data frames according to the context of the variables. Therewith, these data frames can be used as and when the requirements fit the context thereof.\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\nUsage of the code chunk below :\n\n\n\n\n\nwrite_rds( ) - readr - to save wp_coord data table into an RDS format.\n\nnote : compress the file with “xz”.\n\nread_rds( ) - readr - to read wp_coord RDS file into wp_coord.\n\n\n\n\nwrite_rds(wp_coord,\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_coord.rds\",compress = \"xz\")\n\nwp_coord <- read_rds(\"/jephOstan/ISSS624/class_project/project_2/data/geodata/wp_coord.rds\")"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#import-data",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#import-data",
    "title": "GWLR - Osun Water Points",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Boundary RDS File\n\n\nShow the code\nbdy_osun <- read_rds(\"data/geodata/Osun.rds\")\n\n\n\n3.2.1.1 review imported data\n\n\nShow the code\nskim(bdy_osun)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_osun\n\n\nNumber of rows\n30\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nADM2_EN\n0\n1\n3\n14\n0\n30\n0\n\n\nADM2_PCODE\n0\n1\n8\n8\n0\n30\n0\n\n\nADM1_EN\n0\n1\n4\n4\n0\n1\n0\n\n\nADM1_PCODE\n0\n1\n5\n5\n0\n1\n0\n\n\ngeometry\n0\n1\n1805\n7898\n0\n30\n0\n\n\n\n\n\n\n\n\n3.2.2 Import Attribute RDS\n\n\nShow the code\nwp_osun <- read_rds(\"data/geodata/Osun_wp_sf.rds\")\n\n\n\n3.2.2.1 review imported data\n\n\nShow the code\nskim(wp_osun)\n\n\nWarning: Couldn't find skimmers for class: sfc_POINT, sfc; No user-defined `sfl`\nprovided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nwp_osun\n\n\nNumber of rows\n4760\n\n\nNumber of columns\n75\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n47\n\n\nlogical\n5\n\n\nnumeric\n23\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1.00\n5\n44\n0\n2\n0\n\n\nreport_date\n0\n1.00\n22\n22\n0\n42\n0\n\n\nstatus_id\n0\n1.00\n2\n7\n0\n3\n0\n\n\nwater_source_clean\n0\n1.00\n8\n22\n0\n3\n0\n\n\nwater_source_category\n0\n1.00\n4\n6\n0\n2\n0\n\n\nwater_tech_clean\n24\n0.99\n9\n23\n0\n3\n0\n\n\nwater_tech_category\n24\n0.99\n9\n15\n0\n2\n0\n\n\nfacility_type\n0\n1.00\n8\n8\n0\n1\n0\n\n\nclean_country_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nclean_adm1\n0\n1.00\n3\n5\n0\n5\n0\n\n\nclean_adm2\n0\n1.00\n3\n14\n0\n35\n0\n\n\nclean_adm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nclean_adm4\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\ninstaller\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement_clean\n1573\n0.67\n5\n37\n0\n7\n0\n\n\nstatus_clean\n0\n1.00\n9\n32\n0\n7\n0\n\n\npay\n0\n1.00\n2\n39\n0\n7\n0\n\n\nfecal_coliform_presence\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nsubjective_quality\n0\n1.00\n18\n20\n0\n4\n0\n\n\nactivity_id\n4757\n0.00\n36\n36\n0\n3\n0\n\n\nscheme_id\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nwpdx_id\n0\n1.00\n12\n12\n0\n4760\n0\n\n\nnotes\n0\n1.00\n2\n96\n0\n3502\n0\n\n\norig_lnk\n4757\n0.00\n84\n84\n0\n1\n0\n\n\nphoto_lnk\n41\n0.99\n84\n84\n0\n4719\n0\n\n\ncountry_id\n0\n1.00\n2\n2\n0\n1\n0\n\n\ndata_lnk\n0\n1.00\n79\n96\n0\n2\n0\n\n\nwater_point_history\n0\n1.00\n142\n834\n0\n4750\n0\n\n\nclean_country_id\n0\n1.00\n3\n3\n0\n1\n0\n\n\ncountry_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nwater_source\n0\n1.00\n8\n30\n0\n4\n0\n\n\nwater_tech\n0\n1.00\n5\n37\n0\n20\n0\n\n\nadm2\n0\n1.00\n3\n14\n0\n33\n0\n\n\nadm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement\n1573\n0.67\n5\n47\n0\n7\n0\n\n\nadm1\n0\n1.00\n4\n5\n0\n4\n0\n\n\nNew Georeferenced Column\n0\n1.00\n16\n35\n0\n4760\n0\n\n\nlat_lon_deg\n0\n1.00\n13\n32\n0\n4760\n0\n\n\npublic_data_source\n0\n1.00\n84\n102\n0\n2\n0\n\n\nconverted\n0\n1.00\n53\n53\n0\n1\n0\n\n\ncreated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nupdated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nGeometry\n0\n1.00\n33\n37\n0\n4760\n0\n\n\nADM2_EN\n0\n1.00\n3\n14\n0\n30\n0\n\n\nADM2_PCODE\n0\n1.00\n8\n8\n0\n30\n0\n\n\nADM1_EN\n0\n1.00\n4\n4\n0\n1\n0\n\n\nADM1_PCODE\n0\n1.00\n5\n5\n0\n1\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nrehab_year\n4760\n0\nNaN\n:\n\n\nrehabilitator\n4760\n0\nNaN\n:\n\n\nis_urban\n0\n1\n0.39\nFAL: 2884, TRU: 1876\n\n\nlatest_record\n0\n1\n1.00\nTRU: 4760\n\n\nstatus\n0\n1\n0.56\nTRU: 2642, FAL: 2118\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n68550.48\n10216.94\n49601.00\n66874.75\n68244.50\n69562.25\n471319.00\n▇▁▁▁▁\n\n\nlat_deg\n0\n1.00\n7.68\n0.22\n7.06\n7.51\n7.71\n7.88\n8.06\n▁▂▇▇▇\n\n\nlon_deg\n0\n1.00\n4.54\n0.21\n4.08\n4.36\n4.56\n4.71\n5.06\n▃▆▇▇▂\n\n\ninstall_year\n1144\n0.76\n2008.63\n6.04\n1917.00\n2006.00\n2010.00\n2013.00\n2015.00\n▁▁▁▁▇\n\n\nfecal_coliform_value\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ndistance_to_primary_road\n0\n1.00\n5021.53\n5648.34\n0.01\n719.36\n2972.78\n7314.73\n26909.86\n▇▂▁▁▁\n\n\ndistance_to_secondary_road\n0\n1.00\n3750.47\n3938.63\n0.15\n460.90\n2554.25\n5791.94\n19559.48\n▇▃▁▁▁\n\n\ndistance_to_tertiary_road\n0\n1.00\n1259.28\n1680.04\n0.02\n121.25\n521.77\n1834.42\n10966.27\n▇▂▁▁▁\n\n\ndistance_to_city\n0\n1.00\n16663.99\n10960.82\n53.05\n7930.75\n15030.41\n24255.75\n47934.34\n▇▇▆▃▁\n\n\ndistance_to_town\n0\n1.00\n16726.59\n12452.65\n30.00\n6876.92\n12204.53\n27739.46\n44020.64\n▇▅▃▃▂\n\n\nrehab_priority\n2654\n0.44\n489.33\n1658.81\n0.00\n7.00\n91.50\n376.25\n29697.00\n▇▁▁▁▁\n\n\nwater_point_population\n4\n1.00\n513.58\n1458.92\n0.00\n14.00\n119.00\n433.25\n29697.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n4\n1.00\n2727.16\n4189.46\n0.00\n176.00\n1032.00\n3717.00\n36118.00\n▇▁▁▁▁\n\n\ncrucialness_score\n798\n0.83\n0.26\n0.28\n0.00\n0.07\n0.15\n0.35\n1.00\n▇▃▁▁▁\n\n\npressure_score\n798\n0.83\n1.46\n4.16\n0.00\n0.12\n0.41\n1.24\n93.69\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n560.74\n338.46\n300.00\n300.00\n300.00\n1000.00\n1000.00\n▇▁▁▁▅\n\n\ndays_since_report\n0\n1.00\n2692.69\n41.92\n1483.00\n2688.00\n2693.00\n2700.00\n4645.00\n▁▇▁▁▁\n\n\nstaleness_score\n0\n1.00\n42.80\n0.58\n23.13\n42.70\n42.79\n42.86\n62.66\n▁▁▇▁▁\n\n\nlocation_id\n0\n1.00\n235865.49\n6657.60\n23741.00\n230638.75\n236199.50\n240061.25\n267454.00\n▁▁▁▁▇\n\n\ncluster_size\n0\n1.00\n1.05\n0.25\n1.00\n1.00\n1.00\n1.00\n4.00\n▇▁▁▁▁\n\n\nlat_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nlon_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ncount\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#correlation-analysis",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#correlation-analysis",
    "title": "GWLR - Osun Water Points",
    "section": "4. CORRELATION ANALYSIS",
    "text": "4. CORRELATION ANALYSIS\n\n4.1 Create Data Table for Correlation Matrix Analysis\n\n4.1.1 Get Column Index for the Key Variable\n\nmatch(c(\"distance_to_primary_road\",\n        \"distance_to_secondary_road\",\n        \"distance_to_tertiary_road\",\n        \"distance_to_city\",\n        \"distance_to_town\",\n        \"water_point_population\",\n        \"local_population_1km\",\n        \"usage_capacity\",\n        \"is_urban\",\n        \"water_source_clean\",\n        \"status\",\n        \"geometry\"),\n      names(wp_osun.sf))\n\n [1] 35 36 37 38 39 42 43 46 47  7 57 NA\n\n\n\n\n4.1.2 Create Data Table for Correlation Analysis\n\nwp_osun.sf_clean <- wp_osun.sf %>%\n  select(c(7, 35:39, 42:43, 46:47, 57)) %>%\n  st_set_geometry(NULL)\n\n\n\n\n4.2 Visualise Correlation Matrix\n\ncluster_vars.cor = cor(wp_osun.sf_clean[,2:7])\n\ncorrplot.mixed(cluster_vars.cor,\n              lower = \"ellipse\",\n              upper = \"number\",\n              tl.pos = \"lt\",\n              diag = \"l\",\n              tl.col = \"black\")\n\n\n\n\n\nmodel <- glm(status ~\n               distance_to_primary_road +\n               distance_to_secondary_road +\n               distance_to_tertiary_road +\n               distance_to_city +\n               distance_to_town +\n               is_urban +\n               usage_capacity +\n               water_source_clean +\n               water_point_population +\n               local_population_1km,\n             data = wp_osun.sf,\n             family = binomial(link = 'logit'))\n\n\n\nCreate Model Overview\n\nblr_regress(model)\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4744           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3887        0.1124      3.4588       5e-04 \n        distance_to_primary_road            1      0.0000        0.0000     -0.7153      0.4744 \n       distance_to_secondary_road           1      0.0000        0.0000     -0.5530      0.5802 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.6708      0.0000 \n            distance_to_city                1      0.0000        0.0000     -4.7574      0.0000 \n            distance_to_town                1      0.0000        0.0000     -4.9170      0.0000 \n              is_urbanTRUE                  1     -0.2971        0.0819     -3.6294       3e-04 \n           usage_capacity1000               1     -0.6230        0.0697     -8.9366      0.0000 \nwater_source_cleanProtected Shallow Well    1      0.5040        0.0857      5.8783      0.0000 \n   water_source_cleanProtected Spring       1      1.2882        0.4388      2.9359      0.0033 \n         water_point_population             1      -5e-04        0.0000    -11.3686      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.2953      0.0000 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7347          Somers' D        0.4693   \n% Discordant          0.2653          Gamma            0.4693   \n% Tied                0.0000          Tau-a            0.2318   \nPairs                5585188          c                0.7347   \n---------------------------------------------------------------\n\n\n\n\ncreate response profile\nextract maximum likelihood estimates.\nestimate concordant\n\nblr_confusion_matrix(model, cutoff = 0.5)\n\nConfusion Matrix and Statistics \n\n          Reference\nPrediction FALSE TRUE\n         0  1301  738\n         1   813 1904\n\n                Accuracy : 0.6739 \n     No Information Rate : 0.4445 \n\n                   Kappa : 0.3373 \n\nMcNemars's Test P-Value  : 0.0602 \n\n             Sensitivity : 0.7207 \n             Specificity : 0.6154 \n          Pos Pred Value : 0.7008 \n          Neg Pred Value : 0.6381 \n              Prevalence : 0.5555 \n          Detection Rate : 0.4003 \n    Detection Prevalence : 0.5713 \n       Balanced Accuracy : 0.6680 \n               Precision : 0.7008 \n                  Recall : 0.7207 \n\n        'Positive' Class : 1\n\n\n\n\nBuild Geographical Weight\nspatial point data frame\nwp_osun_sf_clean is the cleaned version without missing value.\n\nwp_osun.sp <- wp_osun.sf %>%\n  select(c(status,\n           distance_to_primary_road,\n           distance_to_secondary_road,\n           distance_to_tertiary_road,\n           distance_to_city,\n           distance_to_town,\n           is_urban,\n           usage_capacity,\n           water_source_clean,\n           water_point_population,\n           local_population_1km)) %>%\n  as_Spatial()\n\nwp_osun.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 11\nnames       : status, distance_to_primary_road, distance_to_secondary_road, distance_to_tertiary_road, distance_to_city, distance_to_town, is_urban, usage_capacity, water_source_clean, water_point_population, local_population_1km \nmin values  :      0,        0.014461356813335,          0.152195902540837,         0.017815121653488, 53.0461399623541, 30.0019777713073,        0,           1000,           Borehole,                      0,                    0 \nmax values  :      1,         26909.8616132094,           19559.4793799085,          10966.2705628969,  47934.343603562, 44020.6393368124,        1,            300,   Protected Spring,                  29697,                36118 \n\n\n\nbw.fixed <- bw.ggwr(status ~ distance_to_primary_road +\n                      distance_to_secondary_road +\n                      distance_to_tertiary_road +\n                      distance_to_city +\n                      distance_to_town +\n                      is_urban +\n                      usage_capacity +\n                      water_source_clean +\n                      water_point_population +\n                      local_population_1km,\n                    data = wp_osun.sp,\n                    family = \"binomial\",\n                    approach = \"AIC\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\n\nbw.fixed\n\n\ngwlr.fixed <- ggwr.basic(status ~\n                           distance_to_primary_road + \n                           distance_to_secondary_road +\n                           distance_to_tertiary_road +\n                           distance_to_city +\n                           distance_to_town +\n                           is_urban +\n                           usage_capacity +\n                           water_source_clean +\n                           water_point_population +\n                           local_population_1km,\n                    data = wp_osun.sp,\n                    bw = 2599.672,\n                    family = \"binomial\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\n Iteration    Log-Likelihood\n=========================\n       0        -1958 \n       1        -1676 \n       2        -1526 \n       3        -1443 \n       4        -1405 \n       5        -1405 \n\n\n\ngwr.fixed <- as.data.frame(gwlr.fixed$SDF)\n\nSet the yhat (threshold value) to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called most.\n\ngwr.fixed <- gwr.fixed %>% \n  mutate(most = ifelse(\n    gwr.fixed$yhat >= 0.5, T, F\n  ))\n\n\nfreq(gwr.fixed$most)\n\n         n    % val%\nFALSE 2087 43.9 43.9\nTRUE  2669 56.1 56.1\n\n\n\ngwr.fixed$y <- as.factor(gwr.fixed$y)\ngwr.fixed$most <- as.factor(gwr.fixed$most)\nCM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)\nCM\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1824  263\n     TRUE    290 2379\n                                          \n               Accuracy : 0.8837          \n                 95% CI : (0.8743, 0.8927)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7642          \n                                          \n Mcnemar's Test P-Value : 0.2689          \n                                          \n            Sensitivity : 0.8628          \n            Specificity : 0.9005          \n         Pos Pred Value : 0.8740          \n         Neg Pred Value : 0.8913          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3835          \n   Detection Prevalence : 0.4388          \n      Balanced Accuracy : 0.8816          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n\n\nwp_osun.sf_selected <- wp_osun.sf %>% \n  select(c(ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE, status))\n\n\ngwr_sf.fixed <- cbind(wp_osun.sf_selected, gwr.fixed)\n\n\nVisualise Coefficient Estimates\nCreate interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nprob_T <- tm_shape(bdy_osun) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf.fixed) +\n  tm_dots(col = \"yhat\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(8,14))\nprob_T\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntertiary_TV <- tm_shape(bdy_osun) + \n  tm_polygons(alpha = 0.1) + \n  tm_shape(gwr_sf.fixed) + \n  tm_dots(col = \"distance_to_tertiary_road_TV\", \n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(8,14))\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#study-area",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#study-area",
    "title": "GWLR - Osun Water Points",
    "section": "1.2 Study Area",
    "text": "1.2 Study Area\nOsun State, Nigeria"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#exploratory-data-analysis-eda",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#exploratory-data-analysis-eda",
    "title": "GWLR - Osun Water Points",
    "section": "3.3 Exploratory Data Analysis (EDA)",
    "text": "3.3 Exploratory Data Analysis (EDA)\n\n3.3.1 Plot Bar Chart\n\n3.3.1.1 visualise “status”\n\n\nShow the code\nwp_osun %>% freq(input = \"status\")\n\n\n\n\n3.3.1.2 visualise “status” by “water_tech_category”\n\n\nShow the code\ncross_plot(data = wp_osun, input = \"water_tech_category\", target = \"status\")\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n3.3.1.3 visualise “status” by “usage_capacity”\n\n\nShow the code\ncross_plot(data = wp_osun, input = \"usage_capacity\", target = \"status\")\n\n\n\n\n\n\n\n\n3.3.2 Visualise Distribution of “status” Variable\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_osun) +\n  tm_polygons(alpha = 0.4) +\n  \ntm_shape(wp_osun) +\n  tm_dots(col = \"status\",\n          alpha = 0.6) +\n  tm_view(set.zoom.limits = c(8.5,12))\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#data-wrangling",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#data-wrangling",
    "title": "GWLR - Osun Water Points",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1. Edit Key Variables\n\n\nShow the code\nwp_osun.sf <- wp_osun %>%\n  filter_at(vars(status,\n                 distance_to_primary_road,\n                 distance_to_secondary_road,\n                 distance_to_tertiary_road,\n                 distance_to_city,\n                 distance_to_town,\n                 water_point_population,\n                 local_population_1km,\n                 usage_capacity,\n                 is_urban,\n                 water_source_clean),\n            all_vars(!is.na(.)))%>%\n  mutate(usage_capacity = as.factor(usage_capacity))\n\n\nRemarks :\nConvert “usage_capacity” from numeric to categorical variable via as.factor( ) function.\n\n\n3.4.2 Get Column Index\n\n\nShow the code\nmatch(c(\"distance_to_primary_road\",\n        \"distance_to_secondary_road\",\n        \"distance_to_tertiary_road\",\n        \"distance_to_city\",\n        \"distance_to_town\",\n        \"water_point_population\",\n        \"local_population_1km\",\n        \"usage_capacity\",\n        \"is_urban\",\n        \"water_source_clean\",\n        \"status\",\n        \"geometry\"),\n      names(wp_osun.sf))\n\n\n [1] 35 36 37 38 39 42 43 46 47  7 57 NA\n\n\n\n\n3.4.3 Create Correlation Analysis Data Table\n\n\nShow the code\nwp_osun.sf_clean <- wp_osun.sf %>%\n  select(c(7, 35:39, 42:43, 46:47, 57)) %>%\n  st_set_geometry(NULL)"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#build-logistic-regression-model",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#build-logistic-regression-model",
    "title": "GWLR - Osun Water Points",
    "section": "5.1 Build Logistic Regression Model",
    "text": "5.1 Build Logistic Regression Model\n\n\nShow the code\nmodel <- glm(status ~\n               distance_to_primary_road +\n               distance_to_secondary_road +\n               distance_to_tertiary_road +\n               distance_to_city +\n               distance_to_town +\n               is_urban +\n               usage_capacity +\n               water_source_clean +\n               water_point_population +\n               local_population_1km,\n             data = wp_osun.sf,\n             family = binomial(link = 'logit'))\n\n\n\n5.1.1 Create Model Overview\n\n\nShow the code\nblr_regress(model)\n\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4744           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3887        0.1124      3.4588       5e-04 \n        distance_to_primary_road            1      0.0000        0.0000     -0.7153      0.4744 \n       distance_to_secondary_road           1      0.0000        0.0000     -0.5530      0.5802 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.6708      0.0000 \n            distance_to_city                1      0.0000        0.0000     -4.7574      0.0000 \n            distance_to_town                1      0.0000        0.0000     -4.9170      0.0000 \n              is_urbanTRUE                  1     -0.2971        0.0819     -3.6294       3e-04 \n           usage_capacity1000               1     -0.6230        0.0697     -8.9366      0.0000 \nwater_source_cleanProtected Shallow Well    1      0.5040        0.0857      5.8783      0.0000 \n   water_source_cleanProtected Spring       1      1.2882        0.4388      2.9359      0.0033 \n         water_point_population             1      -5e-04        0.0000    -11.3686      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.2953      0.0000 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7347          Somers' D        0.4693   \n% Discordant          0.2653          Gamma            0.4693   \n% Tied                0.0000          Tau-a            0.2318   \nPairs                5585188          c                0.7347   \n---------------------------------------------------------------\n\n\n\n\n5.1.2 Generate Confusion Matrix :: model\n\n\nShow the code\nblr_confusion_matrix(model, cutoff = 0.5)\n\n\nConfusion Matrix and Statistics \n\n          Reference\nPrediction FALSE TRUE\n         0  1301  738\n         1   813 1904\n\n                Accuracy : 0.6739 \n     No Information Rate : 0.4445 \n\n                   Kappa : 0.3373 \n\nMcNemars's Test P-Value  : 0.0602 \n\n             Sensitivity : 0.7207 \n             Specificity : 0.6154 \n          Pos Pred Value : 0.7008 \n          Neg Pred Value : 0.6381 \n              Prevalence : 0.5555 \n          Detection Rate : 0.4003 \n    Detection Prevalence : 0.5713 \n       Balanced Accuracy : 0.6680 \n               Precision : 0.7008 \n                  Recall : 0.7207 \n\n        'Positive' Class : 1\n\n\nRemarks :\nFor a logistic regression model, the specificity rate is only 0.6154."
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#convert-simple-feature-to-spatialpointsdataframe",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#convert-simple-feature-to-spatialpointsdataframe",
    "title": "GWLR - Osun Water Points",
    "section": "6.1 Convert Simple Feature to SpatialPointsDataFrame",
    "text": "6.1 Convert Simple Feature to SpatialPointsDataFrame\n\nwp_osun.sp <- wp_osun.sf %>%\n  select(c(status,\n           distance_to_primary_road,\n           distance_to_secondary_road,\n           distance_to_tertiary_road,\n           distance_to_city,\n           distance_to_town,\n           is_urban,\n           usage_capacity,\n           water_source_clean,\n           water_point_population,\n           local_population_1km)) %>%\n  as_Spatial()\n\nwp_osun.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 11\nnames       : status, distance_to_primary_road, distance_to_secondary_road, distance_to_tertiary_road, distance_to_city, distance_to_town, is_urban, usage_capacity, water_source_clean, water_point_population, local_population_1km \nmin values  :      0,        0.014461356813335,          0.152195902540837,         0.017815121653488, 53.0461399623541, 30.0019777713073,        0,           1000,           Borehole,                      0,                    0 \nmax values  :      1,         26909.8616132094,           19559.4793799085,          10966.2705628969,  47934.343603562, 44020.6393368124,        1,            300,   Protected Spring,                  29697,                36118"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#fixed-bandwidth-gwr-model",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#fixed-bandwidth-gwr-model",
    "title": "GWLR - Osun Water Points",
    "section": "6.2 Fixed Bandwidth GWR Model",
    "text": "6.2 Fixed Bandwidth GWR Model\n\n6.2.1 Compute Fixed Bandwidth\n\n\nShow the code\nbw.fixed <- bw.ggwr(status ~ distance_to_primary_road +\n                      distance_to_secondary_road +\n                      distance_to_tertiary_road +\n                      distance_to_city +\n                      distance_to_town +\n                      is_urban +\n                      usage_capacity +\n                      water_source_clean +\n                      water_point_population +\n                      local_population_1km,\n                    data = wp_osun.sp,\n                    family = \"binomial\",\n                    approach = \"AIC\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\n\n\n\nShow the code\nbw.fixed\n\n\nRemarks :\nRecommended bandwidth is 2,599.672 metres.\n\n\n6.2.2 Perform Fixed Bandwidth GWR Model\n\n\nShow the code\ngwr.fixed <- ggwr.basic(status ~\n                           distance_to_primary_road + \n                           distance_to_secondary_road +\n                           distance_to_tertiary_road +\n                           distance_to_city +\n                           distance_to_town +\n                           is_urban +\n                           usage_capacity +\n                           water_source_clean +\n                           water_point_population +\n                           local_population_1km,\n                    data = wp_osun.sp,\n                    bw = 2599.672,\n                    family = \"binomial\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\n\n Iteration    Log-Likelihood\n=========================\n       0        -1958 \n       1        -1676 \n       2        -1526 \n       3        -1443 \n       4        -1405 \n       5        -1405 \n\n\n\n\nShow the code\ngwr.fixed\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-24 19:00:10 \n   Call:\n   ggwr.basic(formula = status ~ distance_to_primary_road + distance_to_secondary_road + \n    distance_to_tertiary_road + distance_to_city + distance_to_town + \n    is_urban + usage_capacity + water_source_clean + water_point_population + \n    local_population_1km, data = wp_osun.sp, bw = 2599.672, family = \"binomial\", \n    kernel = \"gaussian\", adaptive = FALSE, longlat = FALSE)\n\n   Dependent (y) variable:  status\n   Independent variables:  distance_to_primary_road distance_to_secondary_road distance_to_tertiary_road distance_to_city distance_to_town is_urban usage_capacity water_source_clean water_point_population local_population_1km\n   Number of data points: 4756\n   Used family: binomial\n   ***********************************************************************\n   *              Results of Generalized linear Regression               *\n   ***********************************************************************\n\nCall:\nNULL\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-124.555    -1.755     1.072     1.742    34.333  \n\nCoefficients:\n                                           Estimate Std. Error z value Pr(>|z|)\nIntercept                                 3.887e-01  1.124e-01   3.459 0.000543\ndistance_to_primary_road                 -4.642e-06  6.490e-06  -0.715 0.474422\ndistance_to_secondary_road               -5.143e-06  9.299e-06  -0.553 0.580230\ndistance_to_tertiary_road                 9.683e-05  2.073e-05   4.671 3.00e-06\ndistance_to_city                         -1.686e-05  3.544e-06  -4.757 1.96e-06\ndistance_to_town                         -1.480e-05  3.009e-06  -4.917 8.79e-07\nis_urbanTRUE                             -2.971e-01  8.185e-02  -3.629 0.000284\nusage_capacity1000                       -6.230e-01  6.972e-02  -8.937  < 2e-16\nwater_source_cleanProtected Shallow Well  5.040e-01  8.574e-02   5.878 4.14e-09\nwater_source_cleanProtected Spring        1.288e+00  4.388e-01   2.936 0.003325\nwater_point_population                   -5.097e-04  4.484e-05 -11.369  < 2e-16\nlocal_population_1km                      3.451e-04  1.788e-05  19.295  < 2e-16\n                                            \nIntercept                                ***\ndistance_to_primary_road                    \ndistance_to_secondary_road                  \ndistance_to_tertiary_road                ***\ndistance_to_city                         ***\ndistance_to_town                         ***\nis_urbanTRUE                             ***\nusage_capacity1000                       ***\nwater_source_cleanProtected Shallow Well ***\nwater_source_cleanProtected Spring       ** \nwater_point_population                   ***\nlocal_population_1km                     ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 6534.5  on 4755  degrees of freedom\nResidual deviance: 5688.0  on 4744  degrees of freedom\nAIC: 5712\n\nNumber of Fisher Scoring iterations: 5\n\n\n AICc:  5712.099\n Pseudo R-square value:  0.1295351\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 2599.672 \n   Regression points: the same locations as observations are used.\n   Distance metric: A distance matrix is specified for this model calibration.\n\n   ************Summary of Generalized GWR coefficient estimates:**********\n                                                   Min.     1st Qu.      Median\n   Intercept                                -8.7229e+02 -4.9955e+00  1.7600e+00\n   distance_to_primary_road                 -1.9389e-02 -4.8031e-04  2.9618e-05\n   distance_to_secondary_road               -1.5921e-02 -3.7551e-04  1.2317e-04\n   distance_to_tertiary_road                -1.5618e-02 -4.2368e-04  7.6179e-05\n   distance_to_city                         -1.8416e-02 -5.6217e-04 -1.2726e-04\n   distance_to_town                         -2.2411e-02 -5.7283e-04 -1.5155e-04\n   is_urbanTRUE                             -1.9790e+02 -4.2908e+00 -1.6864e+00\n   usage_capacity1000                       -2.0772e+01 -9.7231e-01 -4.1592e-01\n   water_source_cleanProtected.Shallow.Well -2.0789e+01 -4.5190e-01  5.3340e-01\n   water_source_cleanProtected.Spring       -5.2235e+02 -5.5977e+00  2.5441e+00\n   water_point_population                   -5.2208e-02 -2.2767e-03 -9.8875e-04\n   local_population_1km                     -1.2698e-01  4.9952e-04  1.0638e-03\n                                                3rd Qu.      Max.\n   Intercept                                 1.2763e+01 1073.2156\n   distance_to_primary_road                  4.8443e-04    0.0142\n   distance_to_secondary_road                6.0692e-04    0.0258\n   distance_to_tertiary_road                 6.6815e-04    0.0128\n   distance_to_city                          2.3718e-04    0.0150\n   distance_to_town                          1.9271e-04    0.0224\n   is_urbanTRUE                              1.2841e+00  744.3099\n   usage_capacity1000                        3.0322e-01    5.9281\n   water_source_cleanProtected.Shallow.Well  1.7849e+00   67.6343\n   water_source_cleanProtected.Spring        6.7663e+00  317.4133\n   water_point_population                    5.0102e-04    0.1309\n   local_population_1km                      1.8157e-03    0.0392\n   ************************Diagnostic information*************************\n   Number of data points: 4756 \n   GW Deviance: 2795.084 \n   AIC : 4414.606 \n   AICc : 4747.423 \n   Pseudo R-square value:  0.5722559 \n\n   ***********************************************************************\n   Program stops at: 2022-12-24 19:01:14 \n\n\n\n\nShow the code\ngwr.fixed <- as.data.frame(gwr.fixed$SDF)\n\n\n\n\n6.2.3 Set Threshold Value\n\nSet this exercise’s threshold value, otherwise known as “yhat” to 0.5.\nThe value will be assigned to 1 when greater than 0.5, else 0, and saved under the “most” variable.\n\n\n\nShow the code\ngwr.fixed <- gwr.fixed %>% \n  mutate(most = ifelse(gwr.fixed$yhat >= 0.5, T, F))\n\n\n\n6.2.3.1 Visualise “most”\n\n\nShow the code\nfreq(gwr.fixed$most)\n\n\n         n    % val%\nFALSE 2087 43.9 43.9\nTRUE  2669 56.1 56.1\n\n\n\n\n\n6.2.4 Generate Confusion Matrix\n\n\nShow the code\ngwr.fixed$y <- as.factor(gwr.fixed$y)\ngwr.fixed$most <- as.factor(gwr.fixed$most)\nCM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)\nCM\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1824  263\n     TRUE    290 2379\n                                          \n               Accuracy : 0.8837          \n                 95% CI : (0.8743, 0.8927)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7642          \n                                          \n Mcnemar's Test P-Value : 0.2689          \n                                          \n            Sensitivity : 0.8628          \n            Specificity : 0.9005          \n         Pos Pred Value : 0.8740          \n         Neg Pred Value : 0.8913          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3835          \n   Detection Prevalence : 0.4388          \n      Balanced Accuracy : 0.8816          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n\n\n\n6.2.5 Visualise GWLR\n\n6.2.5.1 extract administrative variables\n\n\nShow the code\nwp_osun.sf_selected <- wp_osun.sf %>% \n  select(c(ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE, status))\n\n\n\n\n6.2.5.2 combine wp_osun.sf_selected and gwr.fixed\n\n\nShow the code\ngwr_sf.fixed <- cbind(wp_osun.sf_selected, gwr.fixed)\n\n\n\n\n6.2.5.3 visualise Coefficient Estimates\nCreate interactive point symbol map.\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\nprob_T <- tm_shape(bdy_osun) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf.fixed) +\n  tm_dots(col = \"yhat\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(8.5,14))\nprob_T\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#calibrate-logistic-regression-model",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#calibrate-logistic-regression-model",
    "title": "GWLR - Osun Water Points",
    "section": "7.1 Calibrate Logistic Regression Model",
    "text": "7.1 Calibrate Logistic Regression Model\nRemove the insignificant variables “distance_to_primary_road” and “distance_to_secondary_road” that identified under section 5.2.\n\n\nShow the code\nmodel_calibr <- glm(status ~  distance_to_tertiary_road +\n                 distance_to_city +\n                 distance_to_town +\n                 water_point_population +\n                 local_population_1km +\n                 usage_capacity +\n                 is_urban +\n                 water_source_clean,\n             data = wp_osun.sf,\n             family = binomial(link = \"logit\"))"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#create-model-overview-model_calibr",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#create-model-overview-model_calibr",
    "title": "GWLR - Osun Water Points",
    "section": "7.2 Create Model Overview :: model_calibr",
    "text": "7.2 Create Model Overview :: model_calibr\n\n\nShow the code\nblr_regress(model_calibr)\n\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4746           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3540        0.1055      3.3541       8e-04 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.9096      0.0000 \n            distance_to_city                1      0.0000        0.0000     -5.2022      0.0000 \n            distance_to_town                1      0.0000        0.0000     -5.4660      0.0000 \n         water_point_population             1      -5e-04        0.0000    -11.3902      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.4069      0.0000 \n           usage_capacity1000               1     -0.6206        0.0697     -8.9081      0.0000 \n              is_urbanTRUE                  1     -0.2667        0.0747     -3.5690       4e-04 \nwater_source_cleanProtected Shallow Well    1      0.4947        0.0850      5.8228      0.0000 \n   water_source_cleanProtected Spring       1      1.2790        0.4384      2.9174      0.0035 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7349          Somers' D        0.4697   \n% Discordant          0.2651          Gamma            0.4697   \n% Tied                0.0000          Tau-a            0.2320   \nPairs                5585188          c                0.7349   \n---------------------------------------------------------------"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#generate-confusion-matrix-model_calibr",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#generate-confusion-matrix-model_calibr",
    "title": "GWLR - Osun Water Points",
    "section": "7.3 Generate Confusion Matrix :: model_calibr",
    "text": "7.3 Generate Confusion Matrix :: model_calibr\n\n\nShow the code\nblr_confusion_matrix(model_calibr, cutoff = 0.5)\n\n\nConfusion Matrix and Statistics \n\n          Reference\nPrediction FALSE TRUE\n         0  1300  743\n         1   814 1899\n\n                Accuracy : 0.6726 \n     No Information Rate : 0.4445 \n\n                   Kappa : 0.3348 \n\nMcNemars's Test P-Value  : 0.0761 \n\n             Sensitivity : 0.7188 \n             Specificity : 0.6149 \n          Pos Pred Value : 0.7000 \n          Neg Pred Value : 0.6363 \n              Prevalence : 0.5555 \n          Detection Rate : 0.3993 \n    Detection Prevalence : 0.5704 \n       Balanced Accuracy : 0.6669 \n               Precision : 0.7000 \n                  Recall : 0.7188 \n\n        'Positive' Class : 1\n\n\nRemarks :\nThe specificity rate, 0.6149 is slightly lower than the original logistic regression model, which is 0.6154.\n\n\nShow the code\nwp_osun.sp2 <- wp_osun.sf %>%\n  select(c(status,\n           distance_to_tertiary_road,\n           distance_to_city,\n           distance_to_town,\n           water_point_population,\n           local_population_1km,\n           usage_capacity,\n           is_urban,\n           water_source_clean)) %>%\n  as_Spatial()\n\nwp_osun.sp2\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 9\nnames       : status, distance_to_tertiary_road, distance_to_city, distance_to_town, water_point_population, local_population_1km, usage_capacity, is_urban, water_source_clean \nmin values  :      0,         0.017815121653488, 53.0461399623541, 30.0019777713073,                      0,                    0,           1000,        0,           Borehole \nmax values  :      1,          10966.2705628969,  47934.343603562, 44020.6393368124,                  29697,                36118,            300,        1,   Protected Spring"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#fixed-bandwidth-gwr-model-model_calibr",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#fixed-bandwidth-gwr-model-model_calibr",
    "title": "GWLR - Osun Water Points",
    "section": "7.4 Fixed Bandwidth GWR Model :: model_calibr",
    "text": "7.4 Fixed Bandwidth GWR Model :: model_calibr\n\n\nShow the code\nbw.fixed_calibr <- bw.ggwr(status ~ distance_to_tertiary_road+\n                 distance_to_city+\n                 distance_to_town+\n                 water_point_population+\n                 local_population_1km+\n                 usage_capacity+\n                 is_urban+\n                 water_source_clean,\n             data = wp_osun.sp2,\n             family = 'binomial',\n             approach = 'AIC',\n             kernel = 'gaussian',\n             adaptive = FALSE,\n             longlat = FALSE)\n\n\n\n\nShow the code\nbw.fixed_calibr\n\n\nRemark :\nThe recommended bandwidth is 2,377.371 metres.\n\n7.4.1 Compute Fixed Bandwidth\n\n\nShow the code\ngwlr.fixed_calibr <- ggwr.basic(status ~ distance_to_tertiary_road +\n                                  distance_to_city +\n                                  distance_to_town +\n                                  water_point_population +\n                                  local_population_1km +\n                                  usage_capacity +\n                                  is_urban +\n                                  water_source_clean,\n                                data = wp_osun.sp2,\n                                bw = 2377.371,\n                                family = 'binomial',\n                                kernel = 'gaussian',\n                                adaptive = FALSE,\n                                longlat = FALSE)\n\n\n Iteration    Log-Likelihood\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1531 \n       3        -1447 \n       4        -1413 \n       5        -1413 \n\n\n\n\nShow the code\ngwlr.fixed_calibr\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-24 19:01:16 \n   Call:\n   ggwr.basic(formula = status ~ distance_to_tertiary_road + distance_to_city + \n    distance_to_town + water_point_population + local_population_1km + \n    usage_capacity + is_urban + water_source_clean, data = wp_osun.sp2, \n    bw = 2377.371, family = \"binomial\", kernel = \"gaussian\", \n    adaptive = FALSE, longlat = FALSE)\n\n   Dependent (y) variable:  status\n   Independent variables:  distance_to_tertiary_road distance_to_city distance_to_town water_point_population local_population_1km usage_capacity is_urban water_source_clean\n   Number of data points: 4756\n   Used family: binomial\n   ***********************************************************************\n   *              Results of Generalized linear Regression               *\n   ***********************************************************************\n\nCall:\nNULL\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-129.368    -1.750     1.074     1.742    34.126  \n\nCoefficients:\n                                           Estimate Std. Error z value Pr(>|z|)\nIntercept                                 3.540e-01  1.055e-01   3.354 0.000796\ndistance_to_tertiary_road                 1.001e-04  2.040e-05   4.910 9.13e-07\ndistance_to_city                         -1.764e-05  3.391e-06  -5.202 1.97e-07\ndistance_to_town                         -1.544e-05  2.825e-06  -5.466 4.60e-08\nwater_point_population                   -5.098e-04  4.476e-05 -11.390  < 2e-16\nlocal_population_1km                      3.452e-04  1.779e-05  19.407  < 2e-16\nusage_capacity1000                       -6.206e-01  6.966e-02  -8.908  < 2e-16\nis_urbanTRUE                             -2.667e-01  7.474e-02  -3.569 0.000358\nwater_source_cleanProtected Shallow Well  4.947e-01  8.496e-02   5.823 5.79e-09\nwater_source_cleanProtected Spring        1.279e+00  4.384e-01   2.917 0.003530\n                                            \nIntercept                                ***\ndistance_to_tertiary_road                ***\ndistance_to_city                         ***\ndistance_to_town                         ***\nwater_point_population                   ***\nlocal_population_1km                     ***\nusage_capacity1000                       ***\nis_urbanTRUE                             ***\nwater_source_cleanProtected Shallow Well ***\nwater_source_cleanProtected Spring       ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 6534.5  on 4755  degrees of freedom\nResidual deviance: 5688.9  on 4746  degrees of freedom\nAIC: 5708.9\n\nNumber of Fisher Scoring iterations: 5\n\n\n AICc:  5708.923\n Pseudo R-square value:  0.129406\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 2377.371 \n   Regression points: the same locations as observations are used.\n   Distance metric: A distance matrix is specified for this model calibration.\n\n   ************Summary of Generalized GWR coefficient estimates:**********\n                                                   Min.     1st Qu.      Median\n   Intercept                                -3.7021e+02 -4.3797e+00  3.5590e+00\n   distance_to_tertiary_road                -3.1622e-02 -4.5462e-04  9.1291e-05\n   distance_to_city                         -5.4555e-02 -6.5623e-04 -1.3507e-04\n   distance_to_town                         -8.6549e-03 -5.2754e-04 -1.6785e-04\n   water_point_population                   -2.9696e-02 -2.2705e-03 -1.2277e-03\n   local_population_1km                     -7.7730e-02  4.4281e-04  1.0548e-03\n   usage_capacity1000                       -5.5889e+01 -1.0347e+00 -4.1960e-01\n   is_urbanTRUE                             -7.3554e+02 -3.4675e+00 -1.6596e+00\n   water_source_cleanProtected.Shallow.Well -1.8842e+02 -4.7295e-01  6.2378e-01\n   water_source_cleanProtected.Spring       -1.3630e+03 -5.3436e+00  2.7714e+00\n                                                3rd Qu.      Max.\n   Intercept                                 1.3755e+01 2171.6375\n   distance_to_tertiary_road                 6.3011e-04    0.0237\n   distance_to_city                          1.5921e-04    0.0162\n   distance_to_town                          2.4490e-04    0.0179\n   water_point_population                    4.5879e-04    0.0765\n   local_population_1km                      1.8479e-03    0.0333\n   usage_capacity1000                        3.9113e-01    9.2449\n   is_urbanTRUE                              1.0554e+00  995.1841\n   water_source_cleanProtected.Shallow.Well  1.9564e+00   66.8914\n   water_source_cleanProtected.Spring        7.0805e+00  208.3749\n   ************************Diagnostic information*************************\n   Number of data points: 4756 \n   GW Deviance: 2815.659 \n   AIC : 4418.776 \n   AICc : 4744.213 \n   Pseudo R-square value:  0.5691072 \n\n   ***********************************************************************\n   Program stops at: 2022-12-24 19:02:05 \n\n\n\n\n7.4.2 Convert Data Frame\n\n\nShow the code\ngwr.fixed_calibr <- as.data.frame(gwlr.fixed_calibr$SDF)\n\n\n\n\n7.4.3 Set Threshold Value\n\n\nShow the code\ngwr.fixed_calibr <- gwr.fixed_calibr %>%\n  mutate(most = ifelse(\n    gwr.fixed_calibr$yhat >= 0.5, T, F))\n\n\n\n\n7.4.4 Generate Confusion Matrix\n\n\nShow the code\ngwr.fixed_calibr$y <- as.factor(gwr.fixed_calibr$y)\ngwr.fixed_calibr$most <- as.factor(gwr.fixed_calibr$most)\nCM <- confusionMatrix(data = gwr.fixed_calibr$most, \n                      reference = gwr.fixed_calibr$y)\nCM\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1833  268\n     TRUE    281 2374\n                                          \n               Accuracy : 0.8846          \n                 95% CI : (0.8751, 0.8935)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7661          \n                                          \n Mcnemar's Test P-Value : 0.6085          \n                                          \n            Sensitivity : 0.8671          \n            Specificity : 0.8986          \n         Pos Pred Value : 0.8724          \n         Neg Pred Value : 0.8942          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3854          \n   Detection Prevalence : 0.4418          \n      Balanced Accuracy : 0.8828          \n                                          \n       'Positive' Class : FALSE"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#visualise-gwlr-1",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#visualise-gwlr-1",
    "title": "GWLR - Osun Water Points",
    "section": "7.5 Visualise GWLR",
    "text": "7.5 Visualise GWLR\n\n\nShow the code\nwp_osun.sf_selected_calibr <- wp_osun.sf %>%\n  select(c(ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE, status))\n\n\n\n\nShow the code\ngwr_sf.fixed_calibr <- cbind(wp_osun.sf_selected_calibr, gwr.fixed_calibr)"
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#visualise-functional-non-functional-water-point",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#visualise-functional-non-functional-water-point",
    "title": "GWLR - Osun Water Points",
    "section": "7.6 Visualise Functional & Non-Functional Water Point",
    "text": "7.6 Visualise Functional & Non-Functional Water Point\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\nprob_TCalibr <- tm_shape(bdy_osun) + \n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf.fixed_calibr) + \n  tm_dots(col = \"yhat\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(9,14))\n\nprob_TCalibr"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#study-area",
    "href": "class_project/project_2/Regionalisation_scca.html#study-area",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.2 Study Area",
    "text": "1.2 Study Area\n\n\n\n\n\n\nDanger\n\n\n\n\n\nwater points in Federal Republic of Nigeria\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.Vegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n3 https://rainforests.mongabay.com/20nigeria.htm"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#study-area-introduction",
    "href": "class_project/project_2/Regionalisation_scca.html#study-area-introduction",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.2 Study Area Introduction",
    "text": "1.2 Study Area Introduction\n\n\n\n\n\n\nWater points in Federal Republic of Nigeria\n\n\n\n\n\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\n\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\nVegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.3 https://rainforests.mongabay.com/20nigeria.htm"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#load-r-packages",
    "href": "class_project/project_2/Regionalisation_scca.html#load-r-packages",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#import-attribute-data",
    "href": "class_project/project_2/Regionalisation_scca.html#import-attribute-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.2 Import Attribute Data",
    "text": "3.2 Import Attribute Data\nFour (4) data frames to be created for different context, i.e.\n\nwp_coord = coordinated related variables.\nwp_cond = status and conditions related variables.\nwp_adm = administrative and measurements related variables.\nwp = master file that combine all three (3) data frames above.\n\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to import and save the comma separated value (CSV) file as a data frame, with title “wp_coord”.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nwp_coord <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nproblems(wp_coord)\n\n\nRemarks :\nUpload and create new data frames according to the context of the variables. Therewith, these data frames can be used as and when the requirements fit the context thereof.\n\n\n\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nwrite_rds( ) - readr - to save wp_coord data table into an RDS format.\nnote : reduce the file size with this function -> compress = “xz”.\nread_rds( ) - readr - to read wp_coord RDS file into wp_coord.\n\n\n\n\n\nShow the code\nwrite_rds(wp_coord,\n          \"data/geodata/wp_coord.rds\",\n          compress = \"xz\")\n\n\n\nwp_coord <- read_rds(\"data/geodata/wp_coord.rds\")\n\n\n\n\n\n\n3.2.1.2 review data frame :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nskim( ) - skimr - to get a broad overview of wp_coord data frame.\n\n\n\n\n\nShow the code\nskim(wp_coord)\n\n\n\nData summary\n\n\nName\nwp_coord\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1\n11\n45\n0\n95008\n0\n\n\nlat_lon_deg\n0\n1\n8\n42\n0\n95008\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nlat_deg\n0\n1\n9.33\n2.48\n4.30\n7.36\n9.09\n11.83\n13.87\n▃▇▅▅▆\n\n\nlon_deg\n0\n1\n7.50\n2.25\n2.71\n5.52\n7.89\n9.08\n14.22\n▃▃▇▃▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_cond <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`,\n                                    `#status_id`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`,\n         status_id = `#status_id`)\n\nproblems(wp_cond)\n\n\n\n\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_cond,\n          \"data/geodata/wp_cond.rds\",\n          compress = \"xz\")\n\n\n\nwp_cond <- read_rds(\"data/geodata/wp_cond.rds\")\n\n\n\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_cond)\n\n\n\nData summary\n\n\nName\nwp_cond\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nwater_source\n0\n1.00\n3\n32\n0\n16\n0\n\n\nwater_source_clean\n302\n1.00\n8\n22\n0\n5\n0\n\n\nwater_source_category\n302\n1.00\n4\n11\n0\n3\n0\n\n\nwater_tech_clean\n10055\n0.89\n8\n26\n0\n11\n0\n\n\nwater_tech_category\n10055\n0.89\n8\n15\n0\n4\n0\n\n\nstatus_clean\n10656\n0.89\n9\n32\n0\n8\n0\n\n\nstatus\n10656\n0.89\n14\n156\n0\n834\n0\n\n\nstatus_id\n0\n1.00\n2\n7\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.5\n189726.1\n10732\n52632.75\n86952.5\n323671.5\n681838\n▇▃▂▂▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Import Admistrative and Measure-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_adm <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`)) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nproblems(wp_adm)\n\n\n\n\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_adm,\n          \"data/geodata/wp_adm.rds\",\n          compress = \"xz\")\n\n\n\nwp_adm <- read_rds(\"data/geodata/wp_adm.rds\")\n\n\n\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_adm)\n\n\n\nData summary\n\n\nName\nwp_adm\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nlogical\n1\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nclean_adm1\n0\n1\n3\n25\n0\n37\n0\n\n\nclean_adm2\n0\n1\n3\n19\n0\n753\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nis_urban\n0\n1\n0.21\nFAL: 75444, TRU: 19564\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nwater_point_population\n539\n0.99\n1246.32\n4027.41\n0.00\n117.00\n413.00\n1169.00\n384595.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n539\n0.99\n3723.15\n7417.59\n0.00\n597.00\n1756.00\n4393.00\n384595.00\n▇▁▁▁▁\n\n\ncrucialness_score\n6879\n0.93\n0.41\n0.34\n0.00\n0.13\n0.30\n0.63\n1.00\n▇▅▃▁▅\n\n\npressure_score\n6879\n0.93\n3.21\n9.04\n0.00\n0.40\n1.18\n3.10\n776.97\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n488.63\n310.95\n50.00\n300.00\n300.00\n1000.00\n1000.00\n▁▇▁▁▃\n\n\nstaleness_score\n0\n1.00\n44.94\n6.29\n23.13\n41.49\n42.87\n44.34\n99.00\n▁▇▁▁▁\n\n\nrehab_priority\n53109\n0.44\n1545.45\n5243.53\n0.00\n136.50\n522.00\n1527.00\n384595.00\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.4 Create Master File\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to combine wp_coord, wp_cond and wp_adm.\n\n\n\n\n\nShow the code\nwp <- left_join(\n  (left_join\n   (wp_coord,wp_cond,\n     by = c(\"row_id\")\n     )),\n  wp_adm, \n  by = c(\"row_id\"))\n\n\n\n\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_as_sfc( ) - sf - to convert foreign geometry object `New Georeferenced Column` to an sfc object\n\n\n\n\n\nShow the code\nwp$geometry = st_as_sfc(wp$`New Georeferenced Column`)\n\n\n\n\n\n\n\n3.2.5.2 convert to SF Data Frame\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_sf( ) - sf - to convert the tibble data frame into sf data frame with crs first set to WGS 84 (EPSG : 4326).\nst_crs( ) - sf - to retrieve coordinate reference system from the object.\n\n\n\n\n\nShow the code\nwp_sf<- st_sf(wp, crs = 4326)\nst_crs(wp_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#import-boundary-data",
    "href": "class_project/project_2/Regionalisation_scca.html#import-boundary-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.3 Import Boundary Data",
    "text": "3.3 Import Boundary Data\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_read( ) - sf - to read simple features.\nselect( ) - dplyr - to select “shapeName” variable.\n\n\n\n\n\nShow the code\nbdy_nga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nproblems(bdy_nga)\n\n\n\n\n\n\n3.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(bdy_nga,\n          \"data/geodata/bdy_nga.rds\",\n          compress = \"xz\")\n\n\n\nbdy_nga <- read_rds(\"data/geodata/bdy_nga.rds\")\n\n\n\n\n\n\n3.3.2 Review Imported File\n\n3.3.2.1 check for missing and duplicated data\n\n\n\n\n\n\n\n\nShow the code\nskim(bdy_nga)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_nga\n\n\nNumber of rows\n774\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nshapeName\n0\n1\n3\n18\n0\n768\n0\n\n\ngeometry\n0\n1\n878\n33370\n0\n774\n0\n\n\n\n\n\nRemarks :\n\nThere is no missing data.\nThere 774 unique “geometry” but only 768 unique “shapeName”\n\nThat’s mean there are 6 values of “shapeName” duplicated among the identified unique shapeNames.\n\n\n\n\n\n\n\n3.3.2.2 list the unique “shapeName” associated with duplication\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nadd_count( ) - dplyr - to count observations by group\nfilter( ) - dplyr - to retain shapeName that has count not equal to 1.\n\n\n\n\n\nShow the code\ndupl_shapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n != 1) %>%\n  select(-n)\n\nfreq(dupl_shapeName$shapeName)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n       var frequency percentage cumulative_perc\n1    Bassa         2      16.67           16.67\n2 Ifelodun         2      16.67           33.34\n3 Irepodun         2      16.67           50.01\n4 Nasarawa         2      16.67           66.68\n5      Obi         2      16.67           83.35\n6 Surulere         2      16.67          100.00\n\n\n\n\n\n\n\n3.3.2.3 verify findings in section 3.3.2.2\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ntmap_mode( ) - tmap - to set tmap mode to static plotting or interactive.\ntm_shape( ) - tmap - to specify the shape object.\ntm_polygons( ) - tmap - to fill the polygons and draw the polygon borders.\ntm_view( ) - tmap - to set the options for the interactive tmap viewer.\ntm_fill( ) - tmap - to specify either which colour to be used or which data variable mapped to the colour palette.\ntm_borders( ) - tmap - to draw the polygon borders.\ntmap_style( ) - tmap - to set the tmap style.\ntm_layout( ) - tmap - to set the layout of cartographic map.\n\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(bdy_nga) +\n  tm_polygons() +\n  tm_view(set.zoom.limits = c(6,8)) +\n\ntm_shape(dupl_shapeName) +\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"albatross\") +\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nRemarks :\nThe plot above indicates those duplicated water points are not within the same location.\n\n\n\n\n\n3.3.2.4 acquire State info for duplicated value\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nFirst, retrieve the centroid coordinate for each “shapeName”.\nThereafter, get the coordinates for LGA Headquarters or Secretariat office via Google Maps.\nLastly, match the duplicated LGA’s coordinate with the offices’ coordinates to determine the State therein.\nThe steps to update can be referred to in section 3.4.1.\n\n\n\n\ncentroid_dupl <- dupl_shapeName %>%\n  mutate(st_centroid(\n    dupl_shapeName$geometry, \n    of_largest_polygon = FALSE))\n\ncentroid_dupl[[4]]\n\nGeometry set for 12 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3.346919 ymin: 6.493217 xmax: 8.782946 ymax: 12.00446\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT (7.031827 7.791971)\n\n\nPOINT (8.782946 10.08015)\n\n\nPOINT (5.052235 8.544311)\n\n\nPOINT (4.636735 7.920948)\n\n\nPOINT (4.926215 8.169349)\n\n\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\ndupl_shapeName_coord\nlga_office_coord\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.791971, 7.031827\n7.80932, 6.74853\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n10.08015, 8.782946\n10.11143, 8.71559\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.544311, 5.052235\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.920948, 4.636735\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.169349, 4.926215\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.84861, 4.498797\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n12.00446, 8.578262\n11.5, 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.304034, 7.760272\n8.53477, 7.70153\n\n\nObi\n546\nObarike-Ito\nBenue\nNG.BE.OB\n7.022495, 8.281026\n7.01129, 8.33118\n\n\nObi\n547\nObi\nNasarawa\nNG.NA.OB\n8.35534, 8.734777\n8.37944, 8.78561\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.493217, 3.346919\n6.50048, 3.35488\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.088897, 4.393574\n8.08459, 4.38538"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#extract-water-point-by-attribute",
    "href": "class_project/project_2/Regionalisation_scca.html#extract-water-point-by-attribute",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.5 Extract Water Point by Attribute",
    "text": "3.5 Extract Water Point by Attribute\n\n3.5.1 Extract Functional Water Point :: wpt_functional\n\n\n\n\n\n\n\nwpt_functional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n3.5.1.1 save and read RDS file :: wpt_functional\n\n\nShow the code\nwrite_rds(wpt_functional,\n          \"data/geodata/wpt_functional.rds\",\n          compress = \"xz\")\n\n\n\nwpt_functional <- read_rds(\"data/geodata/wpt_functional.rds\")\n\n\n\n3.5.1.2 compute data table for clustering analysis\n\n\nShow the code\nwp_nga <- bdy_nga %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(bdy_nga, \n                  wp_joined1))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(bdy_nga, \n                  wpt_functional))) %>%\n  mutate(`pct_functional` = (`wp_functional`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.2 Extract Non-Functional Water Point :: wpt_nonFunctional\n\n\n\n\n\n\n\nwpt_nonFunctional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Non-Functional\",\n             \"Non-Functional due to dry season\"))\n\n\n3.5.2.1 save and read RDS file :: wpt_nonFuntional\n\n\nShow the code\nwrite_rds(wpt_nonFunctional,\n          \"data/geodata/wpt_nonFunctional.rds\",\n          compress = \"xz\")\n\n\n\nwpt_nonFunctional <- read_rds(\"data/geodata/wpt_nonFunctional.rds\")\n\n\n\n3.5.2.2 compute additional variables into wp_nga\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_nonFunctional` = lengths(\n    st_intersects(bdy_nga, \n                  wpt_nonFunctional))) %>%\n  mutate(`pct_nonFunctional` = (`wp_nonFunctional`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.3 Extract Unknown Water Point\n\n\n\n\n\n\n\nwpt_unknown <- wp_joined1 %>%\n  filter(status_clean == \"Unknown\")\n\n\n3.5.3.1 save and read RDS file :: wpt_unknown\n\n\nShow the code\nwrite_rds(wpt_unknown,\"data/geodata/wpt_unknown.rds\")\n\n\n\nwpt_unknown <- read_rds(\"data/geodata/wpt_unknown.rds\")\n\n\n\n3.5.3.2 compute additional variables into wp_nga\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(bdy_nga, \n                  wpt_unknown))) %>%\n  mutate(`pct_unknown` = (`wp_unknown`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.4 Extract Water Points by “water_tech_category”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$water_tech_category)\n\n\n\n\n\n              var frequency percentage cumulative_perc\n1       Hand Pump     58735      61.84           61.84\n2 Mechanized Pump     25636      26.99           88.83\n3            <NA>     10054      10.59           99.42\n4        Tapstand       553       0.58          100.00\n5 Rope and Bucket         1       0.00          100.00\n\n\nRemarks :\nOnly “Hand Pump”, “Mechanized Pump”, and “Tapstand” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\n\nwtc_hPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Hand Pump\")\n\nwtc_mPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Mechanized Pump\")\n\nwtc_tStand <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Tapstand\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_handPump` = lengths(\n    st_intersects(bdy_nga, \n                  wtc_hPump))) %>%\n  mutate(`total_mechPump` = lengths(\n    st_intersects(bdy_nga,\n                  wtc_mPump))) %>%\n    mutate(`total_tapStand` = lengths(\n    st_intersects(bdy_nga, \n                  wtc_tStand))) %>%\n  mutate(`pct_handPump` = (`total_handPump`/`total_wp`*100)) %>%\n  mutate(`pct_mechPump` = (`total_mechPump`/`total_wp`*100)) %>%\n  mutate(`pct_tapStand` = (`total_tapStand`/`total_wp`*100))\n\n\n\n\n\n\n3.5.5 Extract Water Point by “usage_capacity”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$usage_capacity)\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1  300     68768      72.40           72.40\n2 1000     25636      26.99           99.39\n3  250       573       0.60           99.99\n4   50         2       0.00          100.00\n\n\nRemarks :\n\nOnly “300”, “1000”, and “250” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\nBut, “50” will be included in the new variable “total_ucN1000” as part of the none ‘1000’ “usage_capacity” value.\nBased on the metadata description, the usage capacity is a recommended value of maximum users per water point based on the Sphere Standards.7\n\n250 people usually consists of tapstand, kiosk, rainwater catchment.\n1,000 people - mechanised well.\n\n\n7 Sphere Association. The Sphere Handbook : Humanitarian Charter and Minimum Standards in Humanitarian Response 2018 Edition. Pg.106. https://spherestandards.org/wp-content/uploads/Sphere-Handbook-2018-EN.pdf\nuCap_300 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"300\")\n\nuCap_1000 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"1000\")\n\nuCap_250 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"250\")\n\nuCap_50 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"50\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_uc300` = lengths(\n    st_intersects(bdy_nga, \n                  uCap_300))) %>%\n  mutate(`total_uc1000` = lengths(\n    st_intersects(bdy_nga, \n                  uCap_1000))) %>%\n  mutate(`total_uc250` = lengths(\n    st_intersects(bdy_nga, \n                  uCap_250))) %>%\n  mutate(`total_uc50` = lengths(\n    st_intersects(bdy_nga, \n                  uCap_50))) %>%\n  mutate(`total_ucN1000` = ((lengths(st_intersects(bdy_nga,\n                                                   uCap_300))) +\n                              (lengths(st_intersects(bdy_nga,\n                                                     uCap_250))) +\n                              (lengths(st_intersects(bdy_nga,\n                                                     uCap_50))))) %>%\n           \n  mutate(`pct_ucN1000` = (`total_ucN1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc300` = (`total_uc300`/`total_wp`*100)) %>%\n  mutate(`pct_uc1000` = (`total_uc1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc250` = (`total_uc250`/`total_wp`*100))\n\n\n\n\n\n\n3.5.6 Extract Water Point by “is_urban”\n\n\n\n\n\n\n\n\nShow the code\nquestionr::freq(wp_joined1$'is_urban')\n\n\n          n    % val%\nFALSE 75423 79.4 79.4\nTRUE  19556 20.6 20.6\n\n\nRemarks :\nApproximately 79.4% of the water points fall within non-urban community.\n\nurban_1 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"TRUE\")\n\nurban_0 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"FALSE\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_urban1` = lengths(\n    st_intersects(bdy_nga, \n                  urban_1))) %>%\n  mutate(`total_urban0` = lengths(\n    st_intersects(bdy_nga, \n                  urban_0))) %>%\n  mutate(`pct_urban1` = (`total_urban1`/`total_wp`*100)) %>%\n  mutate(`pct_urban0` = (`total_urban0`/`total_wp`*100))\n\n\n\n\n\n\n3.5.7 Extract Water Point by “crucialness_score”\nUnder section 3.4.4.2, there are 6,873 of records without value. Hence, these NAs need to first replace with 0 value.\n\n3.5.7.1 replace NA with 0\n\n\nShow the code\nwp_joined1 <- wp_joined1 %>%\n  mutate(crucialness_score = replace_na(crucialness_score, 0))\n\n\n\n\n3.5.7.2 examine distribution statistically\n\n\nShow the code\nsummary(wp_joined1$crucialness_score)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.09669 0.26671 0.38363 0.56474 1.00017 \n\n\nShow the code\nsummary(wp_joined1$crucialness_score == 1)\n\n\n   Mode   FALSE    TRUE \nlogical   79968   15011 \n\n\nRemarks :\nAccording to the metadata, the “crucialness_score” indicates the importance of each water point to the surrounding communities. The value is a ratio of users assigned to the water point to the total local population within a 1km radius thereof.\n\nFor non-functional water points, the “crucialness_score” shows how important the water point would be if it were to be rehabilitated.\nHaving a median value of 0.26671 means 50% of the water points supply approximately 26% of residents within 1 km of the water point.\nAccording to Sphere Standards8, the distance from any household to the nearest water point should be less than 500 metres.\nHowever, 15,011 water points cover entire communities within 1 km. This is approximately 15.8% of the total water points.\n\n8 Sphere Association. The Sphere Handbook : Humanitarian Charter and Minimum Standards in Humanitarian Response 2018 Edition. Pg.106. https://spherestandards.org/wp-content/uploads/Sphere-Handbook-2018-EN.pdf\n\n3.5.7.3 reveal the distribution “crucialness_score” by “shapeName”\n\n\nShow the code\nwp_joined1$crucialness_score[wp_joined1$shapeName == \"Kirfi\"]\n\n\n [1] 0.472674 0.501360 0.000000 0.000000 1.000000 0.433821 1.000000 1.000000\n [9] 1.000000 0.147203 0.565784 0.477725 0.210386 0.519908 0.800382 0.526823\n[17] 0.129994 0.473177 0.155090 0.157345 0.952727 0.115731 0.170958 0.498640\n[25] 0.164474 0.480092 1.000000 0.606396 0.363727 0.484076 0.472941 0.514331\n[33] 0.167232 0.173628 0.337174 1.000000 0.496662 0.527059 0.298597 0.193043\n[41] 1.000000 0.502825 0.166955 0.989832 0.524780 0.846154 1.000000 0.077914\n[49] 0.120090 0.772727 1.000000 1.000000 0.235887 1.000000 0.470878 0.534786\n[57] 1.000000 1.000000 0.549686 0.266712 0.302252 1.000000 1.000000 0.986722\n[65] 1.000000 0.303544 0.338235 1.000000 1.000000 0.330536 1.000000 0.504512\n[73] 0.528302 1.000000 0.524109 0.258065 0.512159 1.000000 0.286574 0.525721\n[81] 1.000000 1.000000 1.000000 0.251512 1.000000 1.000000 0.319412\n\n\nRemarks :\nCannot use means to compute the “crucialness_score” to represent a “shapeName”. As shown in the output above, ranging from 0 to 1, a mean value can reduce the accuracy of the analysis.\nHence, the “crucialness_score” will be split into 2 groups. Since its 3rd quartile value is around 0.56, 0.6 will be the lowest bin as shown below -\n\nx <= 0.60\nx > 0.60\n\n\n\n3.5.7.4 compute additional variables into wp_nga\n\ncrucialS_0.4 <- wp_joined1 %>%\n  filter(crucialness_score <= 0.6)\n\ncrucialS_1.0 <- wp_joined1 %>%\n  filter(crucialness_score > 0.6)\n\nwp_nga <- wp_nga %>%\n  mutate(`total_cs0.4` = lengths(\n    st_intersects(bdy_nga, crucialS_0.4))) %>%\n  mutate(`total_cs1.0` = lengths(\n    st_intersects(bdy_nga, crucialS_1.0))) %>%\n  mutate(`pct_cs0.4` = (`total_cs0.4`/`total_wp`*100)) %>%\n  mutate(`pct_cs1.0` = (`total_cs1.0`/`total_wp`*100))\n\n\n\n\n3.5.8 Extract Water Point by “pressure_score”\nReplace NAs with 0 value before compute new variable associate with “pressure_score”.\n\n3.5.8.1 replace NA with 0\n\n\nShow the code\nwp_joined1 <- wp_joined1 %>%\n  mutate(pressure_score = replace_na(pressure_score, 0))\n\n\n\n\n3.5.8.2 examine distribution statistically\n\n\nShow the code\nsummary(wp_joined1$pressure_score)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.270   1.026   2.978   2.850 776.970 \n\n\nShow the code\nsummary(wp_joined1$pressure_score > 1)\n\n\n   Mode   FALSE    TRUE \nlogical   46898   48081 \n\n\nRemarks :\nBased on the metadata, pressure_score is a ratio of water point users assigned by the recommended maximum usage capacity of the water tech deployed for the water point.\nWhen the score is greater than 1, that reflects the water point is supplying over its limit.\n\n48,081 water points, approximately 50.6% of the water points are over their usage capacity limit.\n\n\n\n3.5.8.3 compute additional variables into wp_nga\n\npressS_0.9 <- wp_joined1 %>%\n  filter(crucialness_score <= 0.9)\n\npressS_1.9 <- wp_joined1 %>%\n  filter(crucialness_score > 0.9 & crucialness_score <= 1.9)\n\npressS_3.9 <- wp_joined1 %>%\n  filter(crucialness_score > 1.9 & crucialness_score <= 3.9)\n\npressS_4.0 <- wp_joined1 %>%\n  filter(crucialness_score > 3.9)\n\nwp_nga <- wp_nga %>%\n  mutate(`total_ps0.9` = lengths(\n    st_intersects(bdy_nga, pressS_0.9))) %>%\n  mutate(`total_ps1.9` = lengths(\n    st_intersects(bdy_nga, pressS_1.9))) %>%\n  mutate(`total_ps3.9` = lengths(\n    st_intersects(bdy_nga, pressS_3.9))) %>%\n  mutate(`total_ps4.0` = lengths(\n    st_intersects(bdy_nga, pressS_4.0))) %>%\n  \n  mutate(`pct_ps0.9` = (`total_ps0.9`/`total_wp`*100)) %>%\n  mutate(`pct_ps1.9` = (`total_ps1.9`/`total_wp`*100)) %>%\n  mutate(`pct_ps3.9` = (`total_ps3.9`/`total_wp`*100)) %>%\n  mutate(`pct_ps4.0` = (`total_ps4.0`/`total_wp`*100))\n\n\n\n\n3.5.8 Extract Water Point by “status_id”\n\n\nShow the code\nquestionr::freq(wp_joined1$status_id)\n\n\n            n    % val%\nNo      32210 33.9 33.9\nUnknown 10178 10.7 10.7\nYes     52591 55.4 55.4\n\n\n\n\nShow the code\nstatus_1 <- wp_joined1 %>%\n  filter(status_id %in%\n           \"Yes\")\n\nstatus_0 <- wp_joined1 %>%\n  filter(status_id %in%\n           \"No\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_status1` = lengths(\n    st_intersects(bdy_nga, \n                  status_1))) %>%\n  mutate(`total_status0` = lengths(\n    st_intersects(bdy_nga, \n                  status_0))) %>%\n  mutate(`pct_status1` = (`total_status1`/`total_wp`*100)) %>%\n  mutate(`pct_status0` = (`total_status0`/`total_wp`*100))\n\n\n\n\n3.5.9 Save and Read RDS File :: wp_nga\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_nga,\"data/geodata/wp_nga.rds\")\n\n\n\nwp_nga <- read_rds(\"data/geodata/wp_nga.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#transform-coordinate-system",
    "href": "class_project/project_2/Regionalisation_scca.html#transform-coordinate-system",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.6 Transform Coordinate System",
    "text": "3.6 Transform Coordinate System\n\n\n\n\n\n\nThe EPSG for wp_nga is 4326, which is WGS 84. To compute the proximity distance matrix for clustering analysis, the coordinate reference system for attribute (wp_nga) and boundary (bdy_nga) data frames needs to transform into EPSG: 26391.\n\n\n\n\n\n\nst_set_crs( ) - sf - to update the coordinate reference system.\n\n\n\n\nwp_ngaTrans <- st_set_crs(wp_nga, 26391)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nbdy_ngaTrans <- st_set_crs(bdy_nga, 26391)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\n3.6.1 Review CRS :: wp_ngaTrans\n\n\n\n\n\n\nUsage of the code chunk below :\nst_crs( ) - sf - to inspect the coordinate reference system.\n\n\n\n\n\nShow the code\nst_crs(wp_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\n3.6.2 Review CRS :: bdy_ngaTrans\n\n\nShow the code\nst_crs(bdy_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\n3.6.3 Save and Read RDS File :: wp_ngaTrans\n\n\nShow the code\nwrite_rds(wp_ngaTrans,\"data/geodata/wp_ngaTrans.rds\")\n\n\n\nwp_ngaTrans <- read_rds(\"data/geodata/wp_ngaTrans.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#exploratory-data-analysis-eda",
    "href": "class_project/project_2/Regionalisation_scca.html#exploratory-data-analysis-eda",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.7 Exploratory Data Analysis (EDA)",
    "text": "3.7 Exploratory Data Analysis (EDA)\n\n3.7.1 Geospatial EDA\n\n\n\n\n\n\nReference of the code chunk below source from Lin S.Y., 20229.9 Lin S.Y.(2022). Regionalisation Using Water Point Availability in Nigeria. https://lins-92-isss624.netlify.app/take-home_ex02/take-home_ex02#exploratory-data-analysis\n\n\nShow the code\nshapeName_na <- function(x){\n  tm_shape(wp_ngaTrans) +\n    tm_fill(col=x,\n            style=\"pretty\") +\n    tm_borders(alpha=0.5) +\n    tm_layout(legend.height = 0.2, \n              legend.width = 0.2)\n}\n\neda_wpNA <- map(names(wp_ngaTrans)\n                [c(3,5,7,13:15,21:24,28)], \n                shapeName_na)\ntmap_arrange(eda_wpNA)\n\n\n\n\n\nRemarks :\nThe LGA that does not have any water points as shown above to be removed from the data frame.\n\n3.7.1.1 filter state without water point\n\n\nShow the code\nwp_ngaTrim <- wp_ngaTrans %>%\n  filter(if_all(\n    starts_with(\"total_wp\"),~. > 0))\n\n\n\n\n3.7.1.2 visualise distribution of functional and non-functional water points\n\n\nShow the code\nfun <- tm_shape (wp_ngaTrim) +\n  tm_fill(\"pct_functional\",\n          style = \"jenks\",\n          n=6,\n          title = \"Functional (%)\") +\n  tm_layout(main.title = \"Distribution of Functional Water Point by LGA\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\nnfun <- tm_shape (wp_ngaTrim) +\n  tm_fill(\"pct_nonFunctional\",\n          style = \"jenks\",\n          n=6,\n          title = \"Non-Functional (%)\") +\n  tm_layout(main.title = \"Distribution of Non Functional Water Point by LGA\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange (fun, nfun, ncol = 2, asp = 1)\n\n\n\n\n\n\n\n3.7.1.3 save and read RDS file\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_ngaTrim,\"data/geodata/wp_ngaTrim.rds\")\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\n\n\n\n\nCreate a data frame with variables for clustering analysis before visualise the distribution.\n\n3.7.2.1 create cluster variable data frame\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban0\")\n\n\n\n\n3.7.2.2 replace row ID with “shapeName”\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\n3.7.2.3 examine distribution of Cluster Variables\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\nReference of the code chunk below source from Lin S.Y., 202210.10 Lin S.Y.(2022). Regionalisation Using Water Point Availability in Nigeria. https://lins-92-isss624.netlify.app/take-home_ex02/take-home_ex02#exploratory-data-analysis\n\n\nShow the code\nplot_num(cluster_vars)\n\n\n\n\n\n\n\n\n\n\n\n3.7.3 Identify Outliers\n\n\n\n\n\n\nBoxplot shows the minimum, maximum, median, first quartile, third quartile and outliers, if any.\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\nRemarks :"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "",
    "text": "case study : Regionalisation by Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#objectives",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#objectives",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\n\n\n\n\n\n\nRegionalise Nigeria based on water points’ attribute\n\n\n\n\n\n\nTotal number of water points by status, i.e. functional, non-functional, and unknown;\nPercentage of water points by :\n\nstatus (functional, non-functional, and unknown);\ndeployed water technology (hand pump, mechanical pump, stand tap, etc.) ;\nusage capacity (1000, 300, 250, 50);\nrural or urban."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#study-area-introduction",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#study-area-introduction",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.2 Study Area Introduction",
    "text": "1.2 Study Area Introduction\n\n\n\n\n\n\nWater points in Federal Republic of Nigeria\n\n\n\n\n\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\n\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\nVegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.3 https://rainforests.mongabay.com/20nigeria.htm"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#scope-of-works",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#scope-of-works",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.3 Scope of Works",
    "text": "1.3 Scope of Works\n\n\n\n\n\n\nSpecific tasks required for this study :\n\n\n\n\n\n\nimport the shapefile into R with the appropriate sf method, and save it in a simple feature data frame format;\n\n\n\n\n\n\n\nNote\n\n\n\nThree (3) Projected Coordinate Systems of Nigeria, EPSG : 26391, 26392, and 26303.\n\n\n\nderive the proportion of functional and non-functional water points at LGA level (i.e. ADM2) by appropriate tidyr and dplyr methods;\ncombine geospatial and aspatial data frames into a simple feature data frame.\ndelineate water points measures functional regions by using :\n\nconventional hierarchical clustering.\nspatially constrained clustering algorithms.\n\nplot two (2) main types of maps below :\nThematic Mapping\nShow the derived water-point measures by appropriate statistical graphics and choropleth mapping technique.\nAnalytical Mapping\nPlot delineated functional regions using non-spatially constrained and spatially constrained clustering algorithms."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#load-r-packages",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#load-r-packages",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#acquire-data-source",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#acquire-data-source",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe file size of the downloaded data is about 422 MB due to water points data from multiple countries.\n\nSuch file size may require extra effort and time to manage the code chunks and files in the R environment before pushing them to GitHub.\n\nHence, to avoid any error in pushing files larger than 100 MB to Git, filtered Nigeria water points and removed unnecessary variables before uploading into the R environment.\nTherewith, the CSV file size should be lesser than 100 MB.\n\n\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level4 from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n4 Runfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#import-attribute-data",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#import-attribute-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.2 Import Attribute Data",
    "text": "3.2 Import Attribute Data\nFour (4) data frames to be created for different context, i.e.\n\nwp_coord = coordinated related variables.\nwp_cond = status and conditions related variables.\nwp_adm = administrative and measurements related variables.\nwp = master file that combine all three (3) data frames above.\n\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to import and save the comma separated value (CSV) file as a data frame, with title “wp_coord”.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nwp_coord <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nproblems(wp_coord)\n\n\nRemarks :\nUpload and create new data frames according to the context of the variables. Therewith, these data frames can be used as and when the requirements fit the context thereof.\n\n\n\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nwrite_rds( ) - readr - to save wp_coord data table into an RDS format.\nnote : reduce the file size with this function -> compress = “xz”.\nread_rds( ) - readr - to read wp_coord RDS file into wp_coord.\n\n\n\n\n\nShow the code\nwrite_rds(wp_coord,\"data/geodata/wp_coord.rds\",compress = \"xz\")\n\n\n\nwp_coord <- read_rds(\"data/geodata/wp_coord.rds\")\n\n\n\n\n\n\n3.2.1.2 review data frame :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nskim( ) - skimr - to get a broad overview of wp_coord data frame.\n\n\n\n\n\nShow the code\nskim(wp_coord)\n\n\n\nData summary\n\n\nName\nwp_coord\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1\n11\n45\n0\n95008\n0\n\n\nlat_lon_deg\n0\n1\n8\n42\n0\n95008\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nlat_deg\n0\n1\n9.33\n2.48\n4.30\n7.36\n9.09\n11.83\n13.87\n▃▇▅▅▆\n\n\nlon_deg\n0\n1\n7.50\n2.25\n2.71\n5.52\n7.89\n9.08\n14.22\n▃▃▇▃▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_cond <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`)\n\nproblems(wp_cond)\n\n\n\n\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_cond,\"data/geodata/wp_cond.rds\",compress = \"xz\")\n\n\n\nwp_cond <- read_rds(\"data/geodata/wp_cond.rds\")\n\n\n\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_cond)\n\n\n\nData summary\n\n\nName\nwp_cond\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nwater_source\n0\n1.00\n3\n32\n0\n16\n0\n\n\nwater_source_clean\n302\n1.00\n8\n22\n0\n5\n0\n\n\nwater_source_category\n302\n1.00\n4\n11\n0\n3\n0\n\n\nwater_tech_clean\n10055\n0.89\n8\n26\n0\n11\n0\n\n\nwater_tech_category\n10055\n0.89\n8\n15\n0\n4\n0\n\n\nstatus_clean\n10656\n0.89\n9\n32\n0\n8\n0\n\n\nstatus\n10656\n0.89\n14\n156\n0\n834\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.5\n189726.1\n10732\n52632.75\n86952.5\n323671.5\n681838\n▇▃▂▂▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Import Admistrative and Measure-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_adm <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`)) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nproblems(wp_adm)\n\n\n\n\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_adm,\"data/geodata/wp_adm.rds\",compress = \"xz\")\n\n\n\nwp_adm <- read_rds(\"data/geodata/wp_adm.rds\")\n\n\n\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_adm)\n\n\n\nData summary\n\n\nName\nwp_adm\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nlogical\n1\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nclean_adm1\n0\n1\n3\n25\n0\n37\n0\n\n\nclean_adm2\n0\n1\n3\n19\n0\n753\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nis_urban\n0\n1\n0.21\nFAL: 75444, TRU: 19564\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nwater_point_population\n539\n0.99\n1246.32\n4027.41\n0.00\n117.00\n413.00\n1169.00\n384595.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n539\n0.99\n3723.15\n7417.59\n0.00\n597.00\n1756.00\n4393.00\n384595.00\n▇▁▁▁▁\n\n\ncrucialness_score\n6879\n0.93\n0.41\n0.34\n0.00\n0.13\n0.30\n0.63\n1.00\n▇▅▃▁▅\n\n\npressure_score\n6879\n0.93\n3.21\n9.04\n0.00\n0.40\n1.18\n3.10\n776.97\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n488.63\n310.95\n50.00\n300.00\n300.00\n1000.00\n1000.00\n▁▇▁▁▃\n\n\nstaleness_score\n0\n1.00\n44.94\n6.29\n23.13\n41.49\n42.87\n44.34\n99.00\n▁▇▁▁▁\n\n\nrehab_priority\n53109\n0.44\n1545.45\n5243.53\n0.00\n136.50\n522.00\n1527.00\n384595.00\n▇▁▁▁▁\n\n\n\n\n\nRemarks :\n\n“staleness_score” indicates the depreciation of the data’s relevance.\nThe observation updated within 1 year has a “staleness_score” of approximately ~ 89.13 or higher.\nWater points data collection is usually done quarterly or annually.\n\nBased on the code chunk below, only 11 out of 95008 water points are updated within 1 year (between June 2021 to Aug 2022), meaning the rest, which is almost entire observations (the latest updated date was in Apr 2020), are outdated.\nThese outdated observations will need to be updated for the local governments or entities to allocate resources effectively in managing or upgrading these water points.\n\n\n\n\nShow the code\nsummary(wp_adm$staleness_score > 89)\n\n\n   Mode   FALSE    TRUE \nlogical   94997      11 \n\n\n\n\n\n\n\n\n3.2.4 Create Master File\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to combine wp_coord, wp_cond and wp_adm.\n\n\n\n\n\nShow the code\nwp <- left_join(\n  (left_join\n   (wp_coord,wp_cond,\n     by = c(\"row_id\")\n     )),\n  wp_adm, \n  by = c(\"row_id\"))\n\n\n\n\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_as_sfc( ) - sf - to convert foreign geometry object `New Georeferenced Column` to an sfc object\n\n\n\n\n\nShow the code\nwp$geometry = st_as_sfc(wp$`New Georeferenced Column`)\n\n\n\n\n\n\n\n3.2.5.2 convert to SF Data Frame\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_sf( ) - sf - to convert the tibble data frame into sf data frame with crs first set to WGS 84 (EPSG : 4326).\nst_crs( ) - sf - to retrieve coordinate reference system from the object.\n\n\n\n\n\nShow the code\nwp_sf<- st_sf(wp, crs = 4326)\nst_crs(wp_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#import-boundary-data",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#import-boundary-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.3 Import Boundary Data",
    "text": "3.3 Import Boundary Data\n::: {.callout-warning appearance=“simple” icon=“false”} ::: {.callout-alert appearance=“simple” icon=“false”}\nUsage of the code chunk below :\nst_read( ) - sf - to read simple features.\nselect( ) - dplyr - to select “shapeName” variable. :::\n\n\nShow the code\nbdy_nga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nproblems(bdy_nga)\n\n\n\n3.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(bdy_nga,\"data/geodata/bdy_nga.rds\",compress = \"xz\")\n\n\n\nbdy_nga <- read_rds(\"data/geodata/bdy_nga.rds\")\n\n\n\n\n\n\n3.3.2 Review Imported File\n\n3.3.2.1 check for missing and duplicated data\n\n\n\n\n\n\n\n\nShow the code\nskim(bdy_nga)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_nga\n\n\nNumber of rows\n774\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nshapeName\n0\n1\n3\n18\n0\n768\n0\n\n\ngeometry\n0\n1\n878\n33370\n0\n774\n0\n\n\n\n\n\nRemarks :\n\nThere is no missing data.\nThere 774 unique “geometry” but only 768 unique “shapeName”\n\nThat’s mean there are 6 values of “shapeName” duplicated among the identified unique shapeNames.\n\n\n\n\n\n\n\n3.3.2.2 list the unique “shapeName” associated with duplication\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nadd_count( ) - dplyr - to count observations by group\nfilter( ) - dplyr - to retain shapeName that has count not equal to 1.\n\n\n\n\n\nShow the code\ndupl_shapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nfreq(dupl_shapeName$shapeName)\n\n\n         n    % val%\nBassa    2 16.7 16.7\nIfelodun 2 16.7 16.7\nIrepodun 2 16.7 16.7\nNasarawa 2 16.7 16.7\nObi      2 16.7 16.7\nSurulere 2 16.7 16.7\n\n\n\n\n\n\n\n3.3.2.3 verify findings in section 3.3.1.2\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ntmap_mode( ) - tmap - to set tmap mode to static plotting or interactive.\ntm_shape( ) - tmap - to specify the shape object.\ntm_polygons( ) - tmap - to fill the polygons and draw the polygon borders.\ntm_view( ) - tmap - to set the options for the interactive tmap viewer.\ntm_fill( ) - tmap - to specify either which colour to be used or which data variable mapped to the colour palette.\ntm_borders( ) - tmap - to draw the polygon borders.\ntmap_style( ) - tmap - to set the tmap style.\ntm_layout( ) - tmap - to set the layout of cartographic map.\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(dupl_shapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nRemarks :\nThe plot above indicates those duplicated water points are not within the same location.\n\n\n\n\n\n3.3.1.4 acquire State info for duplicated value\n\n\n\n\n\n\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\nShow the code\ndupl_shapeName %>%\n  mutate(st_centroid(\n    dupl_shapeName$geometry, of_largest_polygon = FALSE))\n\n\nSimple feature collection with 12 features and 2 fields\nActive geometry column: geometry\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n   st_centroid(dupl_shapeName$geometry, of_largest_polygon = FALSE)\n1                                         POINT (7.031827 7.791971)\n2                                         POINT (8.782946 10.08015)\n3                                         POINT (5.052235 8.544311)\n4                                         POINT (4.636735 7.920948)\n5                                         POINT (4.926215 8.169349)\n6                                          POINT (4.498797 7.84861)\n7                                         POINT (8.578262 12.00446)\n8                                         POINT (7.760272 8.304034)\n9                                         POINT (8.281026 7.022495)\n10                                         POINT (8.734777 8.35534)\n\n\nShow the code\nglimpse(dupl_shapeName)\n\n\nRows: 12\nColumns: 3\n$ shapeName           <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ `bdy_nga$shapeName` <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ geometry            <MULTIPOLYGON [°]> MULTIPOLYGON (((6.708541 7...., MULTI…\n\n\n\n\n\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\ndupl_shapeName_coord\nlga_office_coord\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.791971, 7.031827\n7.80932, 6.74853\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n10.08015, 8.782946\n10.11143, 8.71559\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.544311, 5.052235\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.920948, 4.636735\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.169349, 4.926215\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.84861, 4.498797\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n12.00446,\n\n\n\n8.578262\n11.5 8.5\n\n\n\n\n\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.304034, 7.760272\n8.53477, 7.70153\n\n\nObi\n546\nObarike-Ito\nBenue\nNG.BE.OB\n7.022495, 8.281026\n7.01129, 8.33118\n\n\nObi\n547\nObi\nNasarawa\nNG.NA.OB\n8.35534, 8.734777\n8.37944, 8.78561\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.493217, 3.346919\n6.50048, 3.35488\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.088897, 4.393574\n8.08459, 4.38538"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#data-wrangling",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#data-wrangling",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1 Edit Duplicated Value :: “shapeName”\n\n\n\n\n\n\nTwo (2) main steps involved :\n\nCombine “shapeName” with the State name to make each of them unique.\nReplace the “shapeName” value according to each row index.5\n\n5 Ong Z.R.J. (2022). Geospatial Analytics for Social Good - Understanding Nigeria Water functional and non-functional water point rate. https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#checking-of-duplicated-area-name\n\nShow the code\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- \n  c(\"Bassa Kogi\",\n    \"Bassa Plateau\",\n    \"Ifelodun Kwara\",\n    \"Ifelodun Osun\",\n    \"Irepodun Kwara\",\n    \"Irepodun Osun\",\n    \"Nasarawa Kano\",\n    \"Nasarawa Nasarawa\",\n    \"Obi Nasarawa\",\n    \"Obi Benue\",\n    \"Surulere Lagos\",\n    \"Surulere Oyo\")\n\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)]\n\n\n [1] \"Bassa Kogi\"        \"Bassa Plateau\"     \"Ifelodun Kwara\"   \n [4] \"Ifelodun Osun\"     \"Irepodun Kwara\"    \"Irepodun Osun\"    \n [7] \"Nasarawa Kano\"     \"Nasarawa Nasarawa\" \"Obi Nasarawa\"     \n[10] \"Obi Benue\"         \"Surulere Lagos\"    \"Surulere Oyo\"     \n\n\n\n\n\n\n3.4.1.1 validate edited value :: “shapeName”\n\n\n\n\n\n\n\n\nShow the code\ndupl_shapeName_val <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\ndupl_shapeName_val\n\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName         bdy_nga$shapeName geometry         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\n\n\n\n3.4.2 Perform Point-in-Polygon Overlay\nCombine both attribute and boundary of the water points into a simple feature object.\n\n3.4.2.1 join objects :: wp_sf, bdy_nga\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\n\n\nShow the code\nwp_joined <- st_join(x = wp_sf,\n                     y = bdy_nga,\n                     join = st_intersects,\n                     left = TRUE)\n\n\n\n-- save and read RDS File :: wp_joined\n\n\nShow the code\nwrite_rds(wp_joined,\"data/geodata/wp_joined.rds\",compress = \"xz\")\n\n\n\nwp_joined <- read_rds(\"data/geodata/wp_joined.rds\")\n\n\n\n\n\n\n\n3.4.2.2 inspect joined file :: wp_joined\n\n\n-- retrieve geometry summary\n\n\n\n\n\n\n\n\nShow the code\nst_geometry(wp_joined)\n\n\nGeometry set for 95008 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT (10.47318 10.60104)\n\n\nPOINT (6.95009 6.78599)\n\n\nPOINT (7.615451 6.799595)\n\n\nPOINT (7.30539 6.30817)\n\n\nPOINT (10.44625 10.50681)\n\n\n\n\n\n\n\n-- assess uniqueness of Water Point\n\n\n\n\n\n\n\nwp_joined %>% janitor::get_dupes(shapeName,lat_lon_deg)\n\nNo duplicate combinations found of: shapeName, lat_lon_deg\n\n\nSimple feature collection with 0 features and 24 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n# A tibble: 0 × 25\n# … with 25 variables: shapeName <chr>, lat_lon_deg <chr>, dupe_count <int>,\n#   row_id <dbl>, lat_deg <dbl>, lon_deg <dbl>, New Georeferenced Column <chr>,\n#   water_source <chr>, water_source_clean <chr>, water_source_category <chr>,\n#   water_tech_clean <chr>, water_tech_category <chr>, status_clean <chr>,\n#   status <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   water_point_population <dbl>, local_population_1km <dbl>,\n#   crucialness_score <dbl>, pressure_score <dbl>, usage_capacity <dbl>, …\n\n\nRemarks :\nEach water point observation is unique as there are no duplicate combination of “shapeName” together with “lat_lon_deg”.\n\n\n\n\n\n-- determine reference point :: “shapeName” or “clean_adm2”\n\n\n\n\n\n\n\n\nShow the code\nwp_reference <- (wp_joined$shapeName == wp_joined$clean_adm2)\n\nfreq(wp_reference)\n\n\n          n    % val%\nFALSE 29856 31.4 31.4\nTRUE  65123 68.5 68.6\nNA       29  0.0   NA\n\n\nRemarks :\n\nThere are 29,713 “FALSE”, which is more than 30% of LGA names mismatched between “shapeName” and “clean_adm2”.\n\nSince the geoBoundaries data is collected from government-published and reliable internet sources.6\n\nHence, the “shapeName” variable to be used throughout this study.\n\n\nThe 29 NA’s are 29 water points located beyond the LGA boundary, as shown in the plot below.\n\n6 Daniel et. al (2020) geoBoundaries: A global database of political administrative boundaries. PlosOne. https://doi.org/10.1371/journal.pone.0231866\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga) +\n  tm_polygons() +\n  tm_view(set.zoom.limits = c(5.5, 12))+\n  \ntm_shape(filter(wp_joined, \n                is.na(wp_reference))) +\n  tm_dots(size=0.1,\n          col=\"red\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\n3.4.3 Remove Water Point Outside LGA Boundary\n\n\n\n\n\n\n\nwp_joined1 <- wp_joined %>% \n  filter(\n    shapeName == clean_adm2 | shapeName != clean_adm2)\n\n\n\n\n\n\n3.4.4 Replace “NA” with “Unknown”\n\n3.4.4.1 identify variable with missing value\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_joined1)\n\n\nWarning: Couldn't find skimmers for class: sfc_POINT, sfc; No user-defined `sfl`\nprovided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nwp_joined1\n\n\nNumber of rows\n94979\n\n\nNumber of columns\n24\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nlogical\n1\n\n\nnumeric\n10\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1.00\n11\n45\n0\n94979\n0\n\n\nlat_lon_deg\n0\n1.00\n8\n42\n0\n94979\n0\n\n\nwater_source\n0\n1.00\n3\n32\n0\n16\n0\n\n\nwater_source_clean\n302\n1.00\n8\n22\n0\n5\n0\n\n\nwater_source_category\n302\n1.00\n4\n11\n0\n3\n0\n\n\nwater_tech_clean\n10054\n0.89\n8\n26\n0\n11\n0\n\n\nwater_tech_category\n10054\n0.89\n8\n15\n0\n4\n0\n\n\nstatus_clean\n10648\n0.89\n9\n32\n0\n8\n0\n\n\nstatus\n10648\n0.89\n14\n156\n0\n834\n0\n\n\nclean_adm1\n0\n1.00\n3\n25\n0\n37\n0\n\n\nclean_adm2\n0\n1.00\n3\n19\n0\n753\n0\n\n\ngeometry\n0\n1.00\n7\n37\n0\n94979\n0\n\n\nshapeName\n0\n1.00\n3\n18\n0\n761\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nis_urban\n0\n1\n0.21\nFAL: 75423, TRU: 19556\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n199938.21\n189720.69\n10732.00\n52622.50\n86939.00\n323664.50\n681838.00\n▇▃▂▂▁\n\n\nlat_deg\n0\n1.00\n9.33\n2.48\n4.30\n7.36\n9.09\n11.83\n13.87\n▃▇▅▅▆\n\n\nlon_deg\n0\n1.00\n7.50\n2.25\n2.71\n5.52\n7.89\n9.08\n14.22\n▃▃▇▃▁\n\n\nwater_point_population\n537\n0.99\n1246.24\n4027.60\n0.00\n117.00\n413.00\n1169.00\n384595.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n537\n0.99\n3723.38\n7418.08\n0.00\n597.00\n1756.00\n4393.00\n384595.00\n▇▁▁▁▁\n\n\ncrucialness_score\n6873\n0.93\n0.41\n0.34\n0.00\n0.13\n0.30\n0.63\n1.00\n▇▅▃▁▅\n\n\npressure_score\n6873\n0.93\n3.21\n9.04\n0.00\n0.40\n1.18\n3.10\n776.97\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n488.63\n310.95\n50.00\n300.00\n300.00\n1000.00\n1000.00\n▁▇▁▁▃\n\n\nstaleness_score\n0\n1.00\n44.94\n6.29\n23.13\n41.49\n42.87\n44.34\n99.00\n▁▇▁▁▁\n\n\nrehab_priority\n53089\n0.44\n1545.55\n5244.05\n0.00\n136.00\n522.00\n1527.00\n384595.00\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n3.4.4.2 replace “NA” with “Unknown”\n\n\n\n\n\n\n\n\n\n\n\n\nmutate( ) - dplyr - to run replace_na( ) function.\n\nreplace_na( ) - tidyr - to replace NAs with “unknown”.\n\n\n\n\n\nwp_joined1 <- wp_joined1 %>%\n  mutate(status_clean = replace_na(status_clean, \"Unknown\")) %>%\n  mutate(status = replace_na(status, \"Unknown\")) %>%\n  mutate(water_tech_category = replace_na(water_tech_category, \"Unknown\")) %>%\n  mutate(water_source_category = replace_na(water_source_category, \"Unknown\")) %>%\n  mutate(water_point_population = replace_na(water_point_population, 0)) %>%\n  mutate(local_population_1km = replace_na(local_population_1km, 0)) %>%\n  mutate(crucialness_score = replace_na(crucialness_score, 0)) %>%\n  mutate(pressure_score = replace_na(pressure_score, 0))\n\n\n\n\n\n\n\n3.4.5 Combine Unique Value\n\n\n\n\n\n\nThere are 9 unique values for “status_clean”. However, four (4) of them share the same context :\n\n“Non functional due to dry season”\n“Non-Functional due to dry season”\n“Abandoned”\n“Abandoned/Decommissioned”\n\nHence, the same context values need to combine into one unique value.\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Non functional due to dry season\"] <- \"Non-Functional due to dry season\"\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Abandoned\"] <- \"Abandoned/Decommissioned\"\n\n\n– review combined output\n\n\nShow the code\nunique(wp_joined1$status_clean)\n\n\n[1] \"Non-Functional\"                   \"Unknown\"                         \n[3] \"Functional\"                       \"Functional but needs repair\"     \n[5] \"Abandoned/Decommissioned\"         \"Functional but not in use\"       \n[7] \"Non-Functional due to dry season\"\n\n\n\n\n– save and read RDS file :: wp_joined1\nSave the updated values into wp_joined1 RDS file.\n\n\nShow the code\nwrite_rds(wp_joined1,\"data/geodata/wp_joined1.rds\",compress = \"xz\")\n\n\n\nwp_joined1 <- read_rds(\"data/geodata/wp_joined1.rds\")\n\n\n\n\n\n\n\n3.4.6 Extract Functional Water Point for New Table :: wpt_functional\n\n\n\n\n\n\n\n\nShow the code\nwpt_functional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n\n– save and read RDS file :: wpt_functional\n\n\nShow the code\nwrite_rds(wpt_functional,\"data/geodata/wpt_functional.rds\",compress = \"xz\")\n\n\n\nwpt_functional <- read_rds(\"data/geodata/wpt_functional.rds\")\n\n\n\n\n\n\n3.4.6.1 inspect variable and value\n\n\n\n\n\n\n3.4.6.2 reveal value :: “status_clean”\n\n\n\n\n\nShow the code\nfreq(wpt_functional$status_clean)\n\n\n                                n    % val%\nFunctional                  45883 88.0 88.0\nFunctional but needs repair  4579  8.8  8.8\nFunctional but not in use    1686  3.2  3.2\n\n\n\n\nShow the code\nlength(wpt_functional$row_id)\n\n\n[1] 52148\n\n\nShow the code\nlength(wpt_functional$row_id)/length(wp_joined1$row_id)*100\n\n\n[1] 54.88801\n\n\nRemarks :\nThe total functional water points is 52,148 which is about 54.89% of total water points.\n\n-- reveal value :: “usage_capacity”\n\n\nShow the code\nfreq(wpt_functional$usage_capacity)\n\n\n         n    % val%\n50       2  0.0  0.0\n250     75  0.1  0.1\n300  38064 73.0 73.0\n1000 14007 26.9 26.9\n\n\n\n\n-- reveal value “usage_capacity” by “status_clean”\n\n\nShow the code\nwpt_functional %>% count(status_clean, usage_capacity, sort = TRUE)\n\n\nSimple feature collection with 10 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 2.711632 ymin: 4.302938 xmax: 13.5022 ymax: 13.86331\nGeodetic CRS:  WGS 84\n# A tibble: 10 × 4\n   status_clean                usage_capacity     n                     geometry\n * <chr>                                <dbl> <int>             <MULTIPOINT [°]>\n 1 Functional                             300 33687 ((3.064921 7.994882), (3.06…\n 2 Functional                            1000 12124 ((3.080189 7.99252), (3.085…\n 3 Functional but needs repair            300  3306 ((3.340832 8.037962), (3.34…\n 4 Functional but needs repair           1000  1271 ((3.373801 7.992051), (3.33…\n 5 Functional but not in use              300  1071 ((3.046639 8.017765), (2.88…\n 6 Functional but not in use             1000   612 ((3.088655 8.005296), (3.05…\n 7 Functional                             250    70 ((3.355785 6.498105), (3.67…\n 8 Functional but not in use              250     3 ((8.032945 6.878883), (7.00…\n 9 Functional                              50     2 ((7.027967 4.765731), (8.92…\n10 Functional but needs repair            250     2 ((6.465915 5.826699), (7.93…\n\n\n\n\n\n\n\n-- reveal value :: “crucialness_score”\n\n\n\n\n\n\n\n\nShow the code\nsummary(wpt_functional$crucialness_score == 1)\n\n\n   Mode   FALSE    TRUE \nlogical   47006    5142 \n\n\n\n-- determine the total population within 1 km by “crucialness_score”\n\n\nShow the code\nfreq(wpt_functional$crucialness_score == 1)\n\n\n          n    % val%\nFALSE 47006 90.1 90.1\nTRUE   5142  9.9  9.9\n\n\nShow the code\nsum(wpt_functional[wpt_functional$crucialness_score == 1,]$local_population_1km)\n\n\n[1] 11252574\n\n\nRemarks :\nGiven the “crucialness_score” is a ratio of current water point users to the total population within 1 km radius thereof :\n\nCurrently, 5,142 water points serve the population within a 1 km radius at its capacity limit.\n\nThe usage capacity may need to be increased to sustain or improve the growth or development rate within 1km of these water points.\nShould the population within 1 km therefrom grow above 11,252,574, there may be multiple repercussions in resources management, urbanisation progress, local food and beverage consumption, local commodity prices, or worst case scenario would be the stability of civil society.\n\n\n\n\n\n\n\n\n-- water points over usage limit\n\n\n\n\n\n\n\n\nShow the code\nsummary(wpt_functional$pressure_score > 1)\n\n\n   Mode   FALSE    TRUE \nlogical   27469   24679 \n\n\nShow the code\nlength((wpt_functional$pressure_score > 1) == TRUE)/length(wpt_functional$row_id)*100\n\n\n[1] 100\n\n\nRemarks :\nGiven the “pressure_score” is the ratio of the current water point users to the usage capacity thereof :\n\n24,679, or 47.32% of functional water points, are currently over their limit of usage capacity.\n\n\n\n\n\n\n3.4.6.3 Exploratory Data Analysis (EDA) :: wpt_functional\n\n\n\n\n\n\n-- plot “status_clean”\n\n\n\n\n\nShow the code\nggplot(data = wpt_functional,\n       aes(fct_infreq(status_clean), fill=status_clean))+ \n  geom_bar()+\n  geom_text(\n     aes(label=after_stat(count)),\n     stat='count',\n     nudge_x=-0.25,\n     vjust=-0.2)+\n  geom_text(\n     aes(label= scales::percent(signif(after_stat(count/sum(count))))),\n     stat='count',\n     nudge_x=0.25,\n     vjust=-0.2)+\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  guides(fill=guide_legend (title = 'Status'))\n\n\n\n\n\n\n-- plot “water_tech_category”\n\n\nShow the code\nggplot(data=wpt_functional, \n       aes(x=fct_infreq(\n         water_tech_category)))+\n  geom_bar(aes(\n    fill = water_tech_category), \n    width = 0.8)+\n  geom_text(aes(\n    label = ..count..),\n    stat = \"count\", \n    vjust=-0.2, \n    size = 3.5, \n    color = \"black\")+\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  guides(fill=guide_legend (title = 'Water Tech Deployed'))\n\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n-- plot “water_source_clean”\n\n\nShow the code\nggplot(data=wpt_functional, \n       aes(x=fct_infreq(\n         water_source_clean)))+\n  geom_bar(aes(\n    fill = water_source_clean), \n    width = 0.8)+\n  geom_text(aes(\n    label = ..count..),\n    stat = \"count\", \n    vjust=-0.2, \n    size = 3.5, \n    color = \"black\")+\n  scale_x_discrete(guide = guide_axis(\n    n.dodge = 2))+\n  guides(fill=guide_legend (\n    title = 'Source of Water Supply'))\n\n\n\n\n\n\n\n\n\n\n3.4.5.4 add attribute to new data table\n\n\n\n\n\n\n\n\nShow the code\nwp_nga <- bdy_nga %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(bdy_nga, wp_joined1))) %>%\n  \n  mutate(`wp_functional` = lengths(\n    st_intersects(bdy_nga, wpt_functional))) %>%\n  \n  mutate(`pct_functional` = (`wp_functional`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_functional` = replace_na(pct_functional, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional  \n Min.   :  0.00  \n 1st Qu.: 32.61  \n Median : 47.41  \n Mean   : 49.84  \n 3rd Qu.: 66.99  \n Max.   :100.00  \n\n\n\n\n\n\n\n\n3.4.5.5 extract non-functional water point\n\n\n\n\n\n\n\n\nShow the code\nwpt_nonFunctional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Non-Functional\",\n             \"Non-Functional due to dry season\"))\n\n\n\n-- save and read RDS file :: wpt_nonFuntional\n\n\nShow the code\nwrite_rds(wpt_nonFunctional,\"data/geodata/wpt_nonFunctional.rds\",compress = \"xz\")\n\n\n\nwpt_nonFunctional <- read_rds(\"data/geodata/wpt_nonFunctional.rds\")\n\n\n\n\n\n\n\n3.4.5.6 inspect variable and value\n\n\n\n\n\n\n-- reveal value :: “status_clean”\n\n\nShow the code\nfreq(wpt_nonFunctional$status_clean)\n\n\n                                     n    % val%\nAbandoned/Decommissioned           234  0.7  0.7\nNon-Functional                   29385 91.7 91.7\nNon-Functional due to dry season  2410  7.5  7.5\n\n\nShow the code\nlength(wpt_nonFunctional$row_id)\n\n\n[1] 32029\n\n\nShow the code\nlength(wpt_nonFunctional$row_id)/length(wp_joined1$row_id)*100\n\n\n[1] 33.7119\n\n\nRemarks :\nThere are 32,204, which is about 33.9% out of total water points.\n\n-- reveal value :: “usage_capacity”\n\n\nShow the code\nfreq(wpt_nonFunctional$usage_capacity)\n\n\n         n    % val%\n250     41  0.1  0.1\n300  20586 64.3 64.3\n1000 11402 35.6 35.6\n\n\n\n\n-- reveal value “usage_capacity” by “status_clean”\n\n\nShow the code\nwpt_nonFunctional %>% count(status_clean, usage_capacity, sort = TRUE)\n\n\nSimple feature collection with 7 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 13.4192 ymax: 13.86567\nGeodetic CRS:  WGS 84\n# A tibble: 7 × 4\n  status_clean                     usage_capac…¹     n                  geometry\n* <chr>                                    <dbl> <int>          <MULTIPOINT [°]>\n1 Non-Functional                             300 18492 ((3.064526 7.994448), (3…\n2 Non-Functional                            1000 10852 ((3.083391 7.993231), (3…\n3 Non-Functional due to dry season           300  2012 ((3.051752 7.984243), (3…\n4 Non-Functional due to dry season          1000   398 ((3.056661 7.985808), (3…\n5 Abandoned/Decommissioned                  1000   152 ((4.713438 7.891137), (4…\n6 Abandoned/Decommissioned                   300    82 ((3.199483 8.912549), (2…\n7 Non-Functional                             250    41 ((3.976195 6.582998), (3…\n# … with abbreviated variable name ¹​usage_capacity\n\n\n\n\n-- reveal “crucialness_score”\n\n\nShow the code\nsum(wpt_nonFunctional$local_population_1km)\n\n\n[1] 93999535\n\n\nShow the code\nsum(wpt_nonFunctional$water_point_population)\n\n\n[1] 46255888\n\n\nRemarks :\nGiven the “crucialness_score” is a ratio of current water point users to the total population within a 1 km radius thereof , in the context of non-functional :\n\nCurrently, out of 95,013,340 residents within a 1 km radius, there are 46,710,127 of them is affected by these non-functional water point.\n\n\n\n\n\n\n\n3.4.5.7 EDA :: wpt_nonFunctional\n\n\n\n\n\n\n-- plot “status_clean”\n\n\n\n\n\nShow the code\nggplot(data = wpt_nonFunctional,\n       aes(fct_infreq(status_clean), \n           fill=status_clean))+ \n  geom_bar()+\n  geom_text(\n     aes(label=after_stat(count)),\n     stat='count',\n     nudge_x=-0.25,\n     vjust=-0.2)+\n  geom_text(\n     aes(label= scales::percent(\n       signif(\n         after_stat(\n           count/sum(count)\n           )))),\n     stat='count',\n     nudge_x=0.25,\n     vjust=-0.2)+\n  scale_x_discrete(\n    guide = guide_axis(\n      n.dodge = 2))+\n  guides(fill=guide_legend (\n    title = 'Status'))\n\n\n\n\n\n\n-- plot “water_tech_category”\n\n\nShow the code\nggplot(data=wpt_nonFunctional, \n       aes(fct_infreq(\n         water_tech_category)))+\n  geom_bar(aes(\n    fill = water_tech_category), \n    width = 0.8)+\n  geom_text(aes(\n    label = ..count..),\n    stat = \"count\",\n    vjust=-0.2,\n    size = 3.5,\n    color = \"black\")+\n  scale_x_discrete(guide = guide_axis(\n    n.dodge = 2))+\n  guides(fill=guide_legend (\n    title = 'Water Tech Deployed'))\n\n\n\n\n\n\n\n-- plot “water_source_clean”\n\n\nShow the code\nggplot(data=wpt_nonFunctional, \n       aes(fct_infreq(\n         water_source_clean)))+\n  geom_bar(aes(\n    fill = water_source_clean),\n    width = 0.8)+\n  geom_text(aes(\n    label = ..count..),\n    stat = \"count\",\n    vjust=-0.2,\n    size = 3.5,\n    color = \"black\")+\n  scale_x_discrete(guide = guide_axis(\n    n.dodge = 2))+\n  guides(fill=guide_legend (\n    title = 'Source of Water Supply'))\n\n\n\n\n\n\n\n\n\n\n3.4.5.8 add wpt_nonFunctional to wp_nga\n\n\n\n\n\n\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_nonFunctional` = lengths(\n    st_intersects(bdy_nga, wpt_nonFunctional))) %>%\n  mutate(`pct_nonFunctional` = (`wp_nonFunctional`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_nonFunctional` = replace_na(pct_nonFunctional, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional   wp_nonFunctional pct_nonFunctional\n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   \n 1st Qu.: 32.61   1st Qu.: 12.00   1st Qu.: 20.77   \n Median : 47.41   Median : 33.50   Median : 34.89   \n Mean   : 49.84   Mean   : 41.37   Mean   : 35.58   \n 3rd Qu.: 66.99   3rd Qu.: 60.00   3rd Qu.: 50.00   \n Max.   :100.00   Max.   :278.00   Max.   :100.00   \n\n\n\n\n\n\n\n\n3.4.5.9 extract unknown water point\n\n\n\n\n\n\n\n\nShow the code\nwpt_unknown <- wp_joined1 %>%\n  filter(status_clean == \"Unknown\")\n\n\n\n-- save and read RDS file :: wpt_unknown\n\n\nShow the code\nwrite_rds(wpt_unknown,\"data/geodata/wpt_unknown.rds\")\n\n\n\nwpt_unknown <- read_rds(\"data/geodata/wpt_unknown.rds\")\n\n\n\n\n\n\n\n3.4.5.10 inspect variable and value\n\n\n-- reveal value :: “status_clean”\n\n\n\n\n\n\n\n\nShow the code\nlength(wpt_unknown$row_id)\n\n\n[1] 10656\n\n\nShow the code\nlength(wpt_unknown$row_id)/length(wp_joined1$row_id)*100\n\n\n[1] 11.2159\n\n\nRemarks :\nThere are 10,656 water points with unknown status, about 11.22% of total water points.\n\n-- determine affected population\n\n\nShow the code\nsum(wpt_unknown$water_point_population)\n\n\n[1] 18831488\n\n\nShow the code\nsum(wpt_unknown$local_population_1km)\n\n\n[1] 31418651\n\n\n\n\n\n\n\n\n3.4.5.11 add wpt_unknown to wp_nga\n\n\n\n\n\n\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(bdy_nga, wpt_unknown))) %>%\n  mutate(`pct_unknown` = (`wp_unknown`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_unknown` = replace_na(pct_unknown, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional   wp_nonFunctional pct_nonFunctional   wp_unknown    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00    Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 12.00   1st Qu.: 20.77    1st Qu.:  0.00  \n Median : 47.41   Median : 33.50   Median : 34.89    Median :  0.00  \n Mean   : 49.84   Mean   : 41.37   Mean   : 35.58    Mean   : 13.76  \n 3rd Qu.: 66.99   3rd Qu.: 60.00   3rd Qu.: 50.00    3rd Qu.: 17.75  \n Max.   :100.00   Max.   :278.00   Max.   :100.00    Max.   :219.00  \n  pct_unknown    \n Min.   :  0.00  \n 1st Qu.:  0.00  \n Median :  0.00  \n Mean   : 12.55  \n 3rd Qu.: 20.83  \n Max.   :100.00  \n\n\n\n\n\n\n\n\n3.4.5.12 visualise distribution :: “status_clean”\n\n\n\n\n\n\nUsage of the code chunk below :\nqtm( ) - tmap - to plot a thematic map quickly.\ntmap_arrange( ) - tmap - to arrange small multiples in grid layout.\n\n\nShow the code\ntotal_wp <- qtm(wp_nga,\"total_wp\")+\n  tm_layout(legend.height = 0.3, legend.width = 0.5)\n\nwp_functional <- qtm(wp_nga,\"wp_functional\")+\n  tm_layout(legend.height = 0.3, legend.width = 0.5)\n\nwp_nonFunctional <- qtm(wp_nga,\"wp_nonFunctional\")+\n  tm_layout(legend.height = 0.3, legend.width = 0.5)\n\nwp_unknown <- qtm(wp_nga,\"wp_unknown\")+\n  tm_layout(legend.height = 0.3, legend.width = 0.5)\n\ntmap_arrange(total_wp, wp_functional, wp_nonFunctional, wp_unknown, asp=0, ncol = 2, nrow = 2, widths = 5, heights = 10, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.5.13 extract “water_tech_category” to wp_nga\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$water_tech_category, sort = \"dec\")\n\n\n                    n    % val%\nHand Pump       58755 61.8 61.8\nMechanized Pump 25644 27.0 27.0\nUnknown         10055 10.6 10.6\nTapstand          553  0.6  0.6\nRope and Bucket     1  0.0  0.0\n\n\nRemarks :\nOnly “Hand Pump”, “Mechanized Pump”, and “Tapstand” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\n\n\nShow the code\nwtc_hPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Hand Pump\")\n\nwtc_mPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Mechanized Pump\")\n\nwtc_tStand <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Tapstand\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_handPump` = lengths(\n    st_intersects(bdy_nga, wtc_hPump)\n  )) %>%\n  mutate(`total_mechPump` = lengths(\n    st_intersects(bdy_nga, wtc_mPump)\n  )) %>%\n    mutate(`total_tapStand` = lengths(\n    st_intersects(bdy_nga, wtc_tStand)\n  )) %>%\n  mutate(`pct_handPump` = (`total_handPump`/`total_wp`*100)) %>%\n  mutate(`pct_mechPump` = (`total_mechPump`/`total_wp`*100)) %>%\n  mutate(`pct_tapStand` = (`total_tapStand`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_handPump` = replace_na(pct_handPump, 0)) %>%\n  mutate(`pct_mechPump` = replace_na(pct_mechPump, 0)) %>%\n  mutate(`pct_tapStand` = replace_na(pct_tapStand, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional   wp_nonFunctional pct_nonFunctional   wp_unknown    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00    Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 12.00   1st Qu.: 20.77    1st Qu.:  0.00  \n Median : 47.41   Median : 33.50   Median : 34.89    Median :  0.00  \n Mean   : 49.84   Mean   : 41.37   Mean   : 35.58    Mean   : 13.76  \n 3rd Qu.: 66.99   3rd Qu.: 60.00   3rd Qu.: 50.00    3rd Qu.: 17.75  \n Max.   :100.00   Max.   :278.00   Max.   :100.00    Max.   :219.00  \n  pct_unknown     total_handPump   total_mechPump   total_tapStand   \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.:  0.00   1st Qu.:  6.00   1st Qu.: 11.00   1st Qu.: 0.0000  \n Median :  0.00   Median : 47.00   Median : 25.50   Median : 0.0000  \n Mean   : 12.55   Mean   : 75.89   Mean   : 33.12   Mean   : 0.7145  \n 3rd Qu.: 20.83   3rd Qu.:111.00   3rd Qu.: 46.00   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :764.00   Max.   :245.00   Max.   :42.0000  \n  pct_handPump     pct_mechPump     pct_tapStand    \n Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.: 16.70   1st Qu.: 12.20   1st Qu.: 0.0000  \n Median : 50.99   Median : 31.27   Median : 0.0000  \n Mean   : 48.73   Mean   : 37.54   Mean   : 0.5794  \n 3rd Qu.: 77.78   3rd Qu.: 57.71   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :100.00   Max.   :32.8947  \n\n\n\n\n\n\n\n\n3.4.5.14 visualise wp_nga distribution :: “water_tech_category”\n\n\n\n\n\n\n\n\nShow the code\nhandPump <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_handPump\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\nmechPump <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_mechPump\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\ntapStand <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_tapStand\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\ntmap_arrange(handPump, mechPump, tapStand,\n             asp=1, \n             ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.5.15 extract “usage_capacity” to wp_nga\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$usage_capacity, sort = \"dec\")\n\n\n         n    % val%\n300  68789 72.4 72.4\n1000 25644 27.0 27.0\n250    573  0.6  0.6\n50       2  0.0  0.0\n\n\nRemarks :\n\nOnly “300”, “1000”, and “250” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\nBut, “50” will be included in the new variable “total_ucN1000” as part of the none ‘1000’ “usage_capacity” value.\n\n\n\nShow the code\nuCap_300 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"300\")\n\nuCap_1000 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"1000\")\n\nuCap_250 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"250\")\n\nuCap_50 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"50\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_uc300` = lengths(\n    st_intersects(bdy_nga, uCap_300)\n  )) %>%\n  mutate(`total_uc1000` = lengths(\n    st_intersects(bdy_nga, uCap_1000)\n  )) %>%\n  mutate(`total_uc250` = lengths(\n    st_intersects(bdy_nga, uCap_250)\n  )) %>%\n  mutate(`total_uc50` = lengths(\n    st_intersects(bdy_nga, uCap_50)\n  )) %>%\n  mutate(`total_ucN1000` = ((lengths(\n    st_intersects(\n      bdy_nga, uCap_300))) + (lengths(\n        st_intersects(\n          bdy_nga, uCap_250))) + (lengths(\n            st_intersects(\n              bdy_nga, uCap_50))))\n    )%>%\n           \n  mutate(`pct_ucN1000` = (`total_ucN1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc300` = (`total_uc300`/`total_wp`*100)) %>%\n  mutate(`pct_uc1000` = (`total_uc1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc250` = (`total_uc250`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_ucN1000` = replace_na(pct_ucN1000, 0)) %>%\n  mutate(`pct_uc300` = replace_na(pct_uc300, 0)) %>%\n  mutate(`pct_uc1000` = replace_na(pct_uc1000, 0)) %>%\n  mutate(`pct_uc250` = replace_na(pct_uc250, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional   wp_nonFunctional pct_nonFunctional   wp_unknown    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00    Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 12.00   1st Qu.: 20.77    1st Qu.:  0.00  \n Median : 47.41   Median : 33.50   Median : 34.89    Median :  0.00  \n Mean   : 49.84   Mean   : 41.37   Mean   : 35.58    Mean   : 13.76  \n 3rd Qu.: 66.99   3rd Qu.: 60.00   3rd Qu.: 50.00    3rd Qu.: 17.75  \n Max.   :100.00   Max.   :278.00   Max.   :100.00    Max.   :219.00  \n  pct_unknown     total_handPump   total_mechPump   total_tapStand   \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.:  0.00   1st Qu.:  6.00   1st Qu.: 11.00   1st Qu.: 0.0000  \n Median :  0.00   Median : 47.00   Median : 25.50   Median : 0.0000  \n Mean   : 12.55   Mean   : 75.89   Mean   : 33.12   Mean   : 0.7145  \n 3rd Qu.: 20.83   3rd Qu.:111.00   3rd Qu.: 46.00   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :764.00   Max.   :245.00   Max.   :42.0000  \n  pct_handPump     pct_mechPump     pct_tapStand      total_uc300    \n Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000   Min.   :  0.00  \n 1st Qu.: 16.70   1st Qu.: 12.20   1st Qu.: 0.0000   1st Qu.: 15.25  \n Median : 50.99   Median : 31.27   Median : 0.0000   Median : 59.00  \n Mean   : 48.73   Mean   : 37.54   Mean   : 0.5794   Mean   : 88.85  \n 3rd Qu.: 77.78   3rd Qu.: 57.71   3rd Qu.: 0.0000   3rd Qu.:126.75  \n Max.   :100.00   Max.   :100.00   Max.   :32.8947   Max.   :767.00  \n  total_uc1000     total_uc250        total_uc50       total_ucN1000   \n Min.   :  0.00   Min.   : 0.0000   Min.   :0.000000   Min.   :  0.00  \n 1st Qu.: 11.00   1st Qu.: 0.0000   1st Qu.:0.000000   1st Qu.: 16.00  \n Median : 25.50   Median : 0.0000   Median :0.000000   Median : 60.00  \n Mean   : 33.12   Mean   : 0.7403   Mean   :0.002584   Mean   : 89.59  \n 3rd Qu.: 46.00   3rd Qu.: 0.0000   3rd Qu.:0.000000   3rd Qu.:127.75  \n Max.   :245.00   Max.   :42.0000   Max.   :1.000000   Max.   :767.00  \n  pct_ucN1000       pct_uc300        pct_uc1000       pct_uc250      \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.: 39.68   1st Qu.: 38.67   1st Qu.: 12.20   1st Qu.: 0.0000  \n Median : 67.03   Median : 65.91   Median : 31.27   Median : 0.0000  \n Mean   : 60.78   Mean   : 60.17   Mean   : 37.54   Mean   : 0.6114  \n 3rd Qu.: 87.35   3rd Qu.: 87.02   3rd Qu.: 57.71   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :100.00   Max.   :100.00   Max.   :32.8947  \n\n\n\n\n\n\n\n\n3.4.5.16 visualise wp_nga distribution :: “usage_capacity”\n\n\n\n\n\n\n\n\nShow the code\nuc300 <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_uc300\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\nuc1000 <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_uc1000\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\nuc250 <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_uc250\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\ntmap_arrange(uc300, uc1000, uc250,\n             asp=1, \n             ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n3.4.5.17 extract “is_urban” to wp_nga\n\n\n\n\n\n\n\n\nShow the code\nurban_1 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"TRUE\")\n\nurban_0 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"FALSE\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_urban1` = lengths(\n    st_intersects(bdy_nga, urban_1)\n  )) %>%\n  mutate(`total_urban0` = lengths(\n    st_intersects(bdy_nga, urban_0)\n  )) %>%\n  mutate(`pct_urban1` = (`total_urban1`/`total_wp`*100)) %>%\n  mutate(`pct_urban0` = (`total_urban0`/`total_wp`*100))\n\n\n\n-- replace “NaN” with 0\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`pct_urban1` = replace_na(pct_urban1, 0)) %>%\n  mutate(`pct_urban0` = replace_na(pct_urban0, 0))\n\nsummary(wp_nga)\n\n\n  shapeName                  geometry      total_wp     wp_functional   \n Length:774         MULTIPOLYGON :774   Min.   :  0.0   Min.   :  0.00  \n Class :character   epsg:4326    :  0   1st Qu.: 45.0   1st Qu.: 17.00  \n Mode  :character   +proj=long...:  0   Median : 96.0   Median : 45.50  \n                                        Mean   :122.7   Mean   : 67.36  \n                                        3rd Qu.:168.8   3rd Qu.: 87.75  \n                                        Max.   :894.0   Max.   :752.00  \n pct_functional   wp_nonFunctional pct_nonFunctional   wp_unknown    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00    Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 12.00   1st Qu.: 20.77    1st Qu.:  0.00  \n Median : 47.41   Median : 33.50   Median : 34.89    Median :  0.00  \n Mean   : 49.84   Mean   : 41.37   Mean   : 35.58    Mean   : 13.76  \n 3rd Qu.: 66.99   3rd Qu.: 60.00   3rd Qu.: 50.00    3rd Qu.: 17.75  \n Max.   :100.00   Max.   :278.00   Max.   :100.00    Max.   :219.00  \n  pct_unknown     total_handPump   total_mechPump   total_tapStand   \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.:  0.00   1st Qu.:  6.00   1st Qu.: 11.00   1st Qu.: 0.0000  \n Median :  0.00   Median : 47.00   Median : 25.50   Median : 0.0000  \n Mean   : 12.55   Mean   : 75.89   Mean   : 33.12   Mean   : 0.7145  \n 3rd Qu.: 20.83   3rd Qu.:111.00   3rd Qu.: 46.00   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :764.00   Max.   :245.00   Max.   :42.0000  \n  pct_handPump     pct_mechPump     pct_tapStand      total_uc300    \n Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000   Min.   :  0.00  \n 1st Qu.: 16.70   1st Qu.: 12.20   1st Qu.: 0.0000   1st Qu.: 15.25  \n Median : 50.99   Median : 31.27   Median : 0.0000   Median : 59.00  \n Mean   : 48.73   Mean   : 37.54   Mean   : 0.5794   Mean   : 88.85  \n 3rd Qu.: 77.78   3rd Qu.: 57.71   3rd Qu.: 0.0000   3rd Qu.:126.75  \n Max.   :100.00   Max.   :100.00   Max.   :32.8947   Max.   :767.00  \n  total_uc1000     total_uc250        total_uc50       total_ucN1000   \n Min.   :  0.00   Min.   : 0.0000   Min.   :0.000000   Min.   :  0.00  \n 1st Qu.: 11.00   1st Qu.: 0.0000   1st Qu.:0.000000   1st Qu.: 16.00  \n Median : 25.50   Median : 0.0000   Median :0.000000   Median : 60.00  \n Mean   : 33.12   Mean   : 0.7403   Mean   :0.002584   Mean   : 89.59  \n 3rd Qu.: 46.00   3rd Qu.: 0.0000   3rd Qu.:0.000000   3rd Qu.:127.75  \n Max.   :245.00   Max.   :42.0000   Max.   :1.000000   Max.   :767.00  \n  pct_ucN1000       pct_uc300        pct_uc1000       pct_uc250      \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.: 39.68   1st Qu.: 38.67   1st Qu.: 12.20   1st Qu.: 0.0000  \n Median : 67.03   Median : 65.91   Median : 31.27   Median : 0.0000  \n Mean   : 60.78   Mean   : 60.17   Mean   : 37.54   Mean   : 0.6114  \n 3rd Qu.: 87.35   3rd Qu.: 87.02   3rd Qu.: 57.71   3rd Qu.: 0.0000  \n Max.   :100.00   Max.   :100.00   Max.   :100.00   Max.   :32.8947  \n  total_urban1     total_urban0      pct_urban1       pct_urban0    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.:  0.00   1st Qu.: 23.00   1st Qu.:  0.00   1st Qu.: 57.27  \n Median :  9.00   Median : 64.00   Median : 11.95   Median : 86.45  \n Mean   : 25.27   Mean   : 97.45   Mean   : 25.61   Mean   : 72.71  \n 3rd Qu.: 33.00   3rd Qu.:141.00   3rd Qu.: 38.44   3rd Qu.:100.00  \n Max.   :324.00   Max.   :894.00   Max.   :100.00   Max.   :100.00  \n\n\n\n\n\n\n\n\n3.4.5.18 visualise wp_nga distribution :: “is_urban”\n\n\n\n\n\n\n\n\nShow the code\nurban1 <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_urban1\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\nurban0 <- tm_shape(bdy_nga)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(wp_nga) +  \n  tm_dots(col = \"pct_urban0\",\n          border.col = \"gray60\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(5,9))\n\ntmap_arrange(urban1, urban0,\n             asp=1, \n             ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n3.4.5.19 save and read RDS File :: wp_nga\n\n\nShow the code\nwrite_rds(wp_nga,\"data/geodata/wp_nga.rds\")\nwp_nga <- read_rds(\"data/geodata/wp_nga.rds\")\n\n\n\n\n\n\n\n\n3.4.5.20 transform to Projected Coordinate System\n\n\n\n\n\n\nUsage of the code chunk below :\nst_crs( ) - sf - to inspect the coordinate reference system.\n\n\nShow the code\nst_crs(wp_nga)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nRemarks :\nThe EPSG for wp_nga is 4326, which is WGS 84. To compute the proximity distance matrix for clustering analysis, this coordinate reference system needs to transform into EPSG: 26391.\nUsage of the code chunk below :\nst_set_crs( ) - sf - to update the coordinate reference system.\n\n\nShow the code\nwp_ngaTrans <- st_set_crs(wp_nga, 26391)\n\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nShow the code\nbdy_ngaTrans <- st_set_crs(bdy_nga, 26391)\n\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\n-- review CRS :: wp_ngaTrans\n\n\nShow the code\nst_crs(wp_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n-- review CRS :: bdy_ngaTrans\n\n\nShow the code\nst_crs(bdy_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#exploratory-data-analysis",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#exploratory-data-analysis",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.5 Exploratory Data Analysis",
    "text": "3.5 Exploratory Data Analysis\n\n3.5.1 Identify Outliers\n\n\n\n\n\n\n3.5.1.1 plot boxplot “pct_functional”\n\n\n\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_functional`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#543005\")\n\n\n\n\n\n\n3.5.1.2 plot boxplot “pct_nonFunctional”\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_nonFunctional`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#C16622FF\")\n\n\n\n\n\n\n\n3.5.1.3 plot boxplot “pct_unknown”\n\n\nShow the code\nggplot(data=wp_ngaTrans, \n       aes(x=`pct_unknown`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"#FFA319FF\")\n\n\n\n\n\nRemarks :\nAmong these 3 key categories of “status_clean”, “unknown” has the most outliers.\n\n\n\n\n\n3.5.2 Multi-plot Histogram\n\n\n\n\n\n\n3.5.2.1 plot histogram for “status_clean”\n\n\n\n\n\nShow the code\npctFunctional <- ggplot(data = wp_ngaTrans,\n                         aes(x = `pct_functional`))+\n  geom_histogram(bins=10,\n                 colour = \"black\",\n                 fill = \"#543005\")\n\npctNonFunctional <- ggplot(data = wp_ngaTrans,\n                         aes(x = `pct_nonFunctional`))+\n  geom_histogram(bins=10,\n                 colour = \"black\",\n                 fill = \"#C16622FF\")\n\npctUnknown <- ggplot(data = wp_ngaTrans,\n                     aes(x = `pct_unknown`))+\n  geom_histogram(bins = 10,\n                 colour = \"black\",\n                 fill = \"#FFA319FF\")\n\n\n\n\nShow the code\nggarrange(pctFunctional,pctNonFunctional,pctUnknown,\n          ncol = 2,\n          nrow = 2)\n\n\nadding dummy grobs"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#create-data-table-for-correlation-matrix-analysis",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#create-data-table-for-correlation-matrix-analysis",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.1 Create Data Table for Correlation Matrix Analysis",
    "text": "4.1 Create Data Table for Correlation Matrix Analysis\n\n\n\n\n\n\n\n\nShow the code\ncluster_vars <- wp_ngaTrans %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_unknown\", \n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban0\")\nhead(cluster_vars,5)\n\n\n  shapeName pct_functional pct_nonFunctional pct_unknown pct_handPump\n1 Aba North       41.17647          52.94118    5.882353    11.764706\n2 Aba South       40.84507          46.47887    9.859155     9.859155\n3    Abadam        0.00000           0.00000    0.000000     0.000000\n4     Abaji       40.35088          59.64912    0.000000    40.350877\n5      Abak       47.91667          50.00000    0.000000     8.333333\n  pct_mechPump pct_tapStand pct_uc300 pct_uc1000 pct_ucN1000 pct_uc250\n1     82.35294            0 17.647059   82.35294   17.647059         0\n2     87.32394            0 12.676056   87.32394   12.676056         0\n3      0.00000            0  0.000000    0.00000    0.000000         0\n4     59.64912            0 40.350877   59.64912   40.350877         0\n5     91.66667            0  8.333333   91.66667    8.333333         0\n  pct_urban0\n1   0.000000\n2   5.633803\n3   0.000000\n4  84.210526\n5  83.333333"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#visualise-correlation-matrix-1",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#visualise-correlation-matrix-1",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.2 Visualise Correlation Matrix",
    "text": "4.2 Visualise Correlation Matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\nThis plot allows to identify the pattern and the relationship in the matrix.\n\n\nShow the code\ncorrplot.mixed((cor(cluster_vars[,2:12])),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\n\nRemarks :\nFollowing are the pairs with strong correlation :\n\n\n\ncorrelation coefficients\nvariable_1\nvariable_2\n\n\n\n\n1.00\npct_mechPump\npct_uc1000\n\n\n0.99\npct_tapStand\npct_uc250\n\n\n0.99\npct_uc300\npct_ucN1000\n\n\n-0.91\npct_mechPump\npct_ucN1000\n\n\n-0.91\npct_uc1000\npct_ucN1000\n\n\n-0.90\npct_mechPump\npct_uc300\n\n\n-0.90\npct_uc300\npct_uc1000\n\n\n\n\n\n\n\n4.2.1 Replace Row ID with “shapeName”\n\n\n\n\n\n\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$shapeName\n\n\n\n\n\n\n\n4.2.2 Trim High Correlation Variable and “shapeName”\n\n\n\n\n\n\n\n\nShow the code\ncluster_varsTrim <- cluster_vars %>%\n  select(-shapeName, -pct_ucN1000, -pct_mechPump)\n\n\n\n4.2.2.1 review trimmed data table\n\n\nShow the code\nsummary(cluster_varsTrim)\n\n\n pct_functional   pct_nonFunctional  pct_unknown      pct_handPump   \n Min.   :  0.00   Min.   :  0.00    Min.   :  0.00   Min.   :  0.00  \n 1st Qu.: 32.61   1st Qu.: 20.77    1st Qu.:  0.00   1st Qu.: 16.70  \n Median : 47.41   Median : 34.89    Median :  0.00   Median : 50.99  \n Mean   : 49.84   Mean   : 35.58    Mean   : 12.55   Mean   : 48.73  \n 3rd Qu.: 66.99   3rd Qu.: 50.00    3rd Qu.: 20.83   3rd Qu.: 77.78  \n Max.   :100.00   Max.   :100.00    Max.   :100.00   Max.   :100.00  \n  pct_tapStand       pct_uc300        pct_uc1000       pct_uc250      \n Min.   : 0.0000   Min.   :  0.00   Min.   :  0.00   Min.   : 0.0000  \n 1st Qu.: 0.0000   1st Qu.: 38.67   1st Qu.: 12.20   1st Qu.: 0.0000  \n Median : 0.0000   Median : 65.91   Median : 31.27   Median : 0.0000  \n Mean   : 0.5794   Mean   : 60.17   Mean   : 37.54   Mean   : 0.6114  \n 3rd Qu.: 0.0000   3rd Qu.: 87.02   3rd Qu.: 57.71   3rd Qu.: 0.0000  \n Max.   :32.8947   Max.   :100.00   Max.   :100.00   Max.   :32.8947  \n   pct_urban0    \n Min.   :  0.00  \n 1st Qu.: 57.27  \n Median : 86.45  \n Mean   : 72.71  \n 3rd Qu.:100.00  \n Max.   :100.00"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#hierarchy-clustering",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#hierarchy-clustering",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.1 Hierarchy Clustering",
    "text": "5.1 Hierarchy Clustering\nThere are four (4) main steps :\n\ncompute proximity matrix.\nassign data point to a cluster.\nmerge clusters based on similarity between clusters.\nupdate the distance matrix.\n\n\n5.1.1 Standardise Data\nAs shown in the 4.2.3.1, there are few variables with Max. different from others. Hence, standardisation will be required prior to further analysis.\n\n5.1.1.1 standardise with min-max method\n\n\n\n\n\n\n\n\nShow the code\nnga_wpStd <- normalize(cluster_varsTrim)\nsummary(nga_wpStd)\n\n\n pct_functional   pct_nonFunctional  pct_unknown      pct_handPump   \n Min.   :0.0000   Min.   :0.0000    Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.3261   1st Qu.:0.2077    1st Qu.:0.0000   1st Qu.:0.1670  \n Median :0.4741   Median :0.3489    Median :0.0000   Median :0.5099  \n Mean   :0.4984   Mean   :0.3558    Mean   :0.1255   Mean   :0.4873  \n 3rd Qu.:0.6699   3rd Qu.:0.5000    3rd Qu.:0.2083   3rd Qu.:0.7778  \n Max.   :1.0000   Max.   :1.0000    Max.   :1.0000   Max.   :1.0000  \n  pct_tapStand       pct_uc300        pct_uc1000       pct_uc250      \n Min.   :0.00000   Min.   :0.0000   Min.   :0.0000   Min.   :0.00000  \n 1st Qu.:0.00000   1st Qu.:0.3867   1st Qu.:0.1220   1st Qu.:0.00000  \n Median :0.00000   Median :0.6591   Median :0.3127   Median :0.00000  \n Mean   :0.01761   Mean   :0.6017   Mean   :0.3754   Mean   :0.01859  \n 3rd Qu.:0.00000   3rd Qu.:0.8702   3rd Qu.:0.5771   3rd Qu.:0.00000  \n Max.   :1.00000   Max.   :1.0000   Max.   :1.0000   Max.   :1.00000  \n   pct_urban0    \n Min.   :0.0000  \n 1st Qu.:0.5727  \n Median :0.8645  \n Mean   :0.7271  \n 3rd Qu.:1.0000  \n Max.   :1.0000  \n\n\n\n5.1.1.2 standardise with Z-score method\n\n\nShow the code\nnga_wpZ <- scale(cluster_varsTrim)\ndescribe(nga_wpZ)\n\n\n                  vars   n mean sd median trimmed  mad   min   max range  skew\npct_functional       1 774    0  1  -0.10   -0.02 1.04 -2.06  2.07  4.13  0.14\npct_nonFunctional    2 774    0  1  -0.03   -0.02 1.05 -1.71  3.10  4.81  0.23\npct_unknown          3 774    0  1  -0.62   -0.22 0.00 -0.62  4.30  4.92  2.01\npct_handPump         4 774    0  1   0.07    0.00 1.37 -1.49  1.57  3.06 -0.09\npct_tapStand         5 774    0  1  -0.19   -0.19 0.00 -0.19 10.46 10.65  7.22\npct_uc300            6 774    0  1   0.19    0.08 1.10 -2.02  1.34  3.35 -0.56\npct_uc1000           7 774    0  1  -0.21   -0.09 1.05 -1.28  2.14  3.42  0.61\npct_uc250            8 774    0  1  -0.20   -0.20 0.00 -0.20 10.37 10.57  7.10\npct_urban0           9 774    0  1   0.42    0.17 0.62 -2.23  0.84  3.06 -1.12\n                  kurtosis   se\npct_functional       -0.62 0.04\npct_nonFunctional    -0.42 0.04\npct_unknown           4.15 0.04\npct_handPump         -1.33 0.04\npct_tapStand         58.65 0.04\npct_uc300            -0.87 0.04\npct_uc1000           -0.78 0.04\npct_uc250            57.14 0.04\npct_urban0           -0.09 0.04\n\n\n\n\n\n\n\n\n5.1.1.3 visualise distribution of standardised clustering variable\n\n\n\n\n\n\n-- functional water point\n\n\n\n\n\nShow the code\nfwp <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nfwp_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nfwp_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(fwp, fwp_std, fwp_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nfwp <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nfwp_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nfwp_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_functional`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(fwp, fwp_std, fwp_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n-- water point deployed with handpump\n\n\nShow the code\nHP <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nHP_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nHP_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_handPump`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(HP, HP_std, HP_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nHP <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nHP_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nHP_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_handPump`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(HP, HP_std, HP_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n-- water point with 1000 users usage capacity\n\n\nShow the code\nuc1000 <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nuc1000_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nuc1000_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_uc1000`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(uc1000, uc1000_std, uc1000_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nuc1000 <- ggplot(data=cluster_varsTrim, \n             aes(x= `pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Before Standardisation\")\n\n\nfwp_stdDf <- as.data.frame(nga_wpStd)\nuc1000_std <- ggplot(data=fwp_stdDf, \n       aes(x=`pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Min-Max Stdsn.\")\n\nfwp_zDf <- as.data.frame(nga_wpZ)\nuc1000_z <- ggplot(data=fwp_zDf, \n       aes(x=`pct_uc1000`)) +\n  geom_density(color=\"black\", \n                 fill=\"steelblue\") +\n  ggtitle(\"Z-score Stdsn.\")\n\nggarrange(uc1000, uc1000_std, uc1000_z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Compute Proximity Matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndist( ) - stats - to compute the proximity distance matrix. Among euclidean, maximum, manhattan, canberra, binary and minkowski, euclidean is used to compute proxmat_euc.\n\n\nShow the code\nproxmat_euc <- dist(cluster_varsTrim, method = 'euclidean')\n\n\n\n\n\n\n\n5.1.3 Compute Hierarchical Clustering\n\n\n\n\n\n\nUsage of the code chunk below :\nhclust( ) - stats - to compute cluster with agglomeration method.\nggdendrogram( ) - ggdendro - to plot dendrogram with tools available in ggplot2.\n\n\nShow the code\nhieClust_warD <- hclust(proxmat_euc, method = 'ward.D')\nggdendrogram(hieClust_warD, \n             rotate = TRUE, \n             size = 2, \n             theme_dendro = FALSE)\n\n\n\n\n\n\n\n\n\n\n5.1.4 Determine Optimal Clustering Algorithm\n\n\n\n\n\n\nUsage of the code chunk below :\nagnes( ) - cluster - to get agglomerative coefficient of 4 clustering structure, namely “average”, “single”, “complete” and “ward”.\n\n\nShow the code\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(cluster_varsTrim, method = x)$ac\n  }\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.9264460 0.8825086 0.9494033 0.9923235 \n\n\nRemarks :\n\nValue 1 indicate strongest clustering structure.\nWard’s method provides the strongest clustering structure. Therefore, Ward’s method to be used in subsequent analysis.\n\n\n\n\n\n\n5.1.5 Determine Optimal Clusters\nTo determine the optimal clusters to retain, following commons methods are tested :\n\nGap statistic\nElbow\nAverage Silhouette\n\n\n5.1.5.1 compute Gap Statistic method\n\n\n\n\n\n\nUsage of the code chunk below :\nclusGap( ) - cluster - to compute the gap statistic.\n\n\nShow the code\nset.seed(12345)\ngap_stat <- clusGap(cluster_varsTrim, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 30, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = cluster_varsTrim, FUNcluster = hcut, K.max = 30, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..30; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 30\n          logW    E.logW       gap      SE.sim\n [1,] 9.815280 10.315513 0.5002330 0.008043258\n [2,] 9.602465 10.203144 0.6006791 0.008510149\n [3,] 9.510126 10.144007 0.6338806 0.010041659\n [4,] 9.443727 10.094054 0.6503272 0.009408325\n [5,] 9.337773 10.055036 0.7172630 0.008377048\n [6,] 9.286151 10.021049 0.7348986 0.008061617\n [7,] 9.226030  9.992116 0.7660864 0.007509762\n [8,] 9.181055  9.967079 0.7860239 0.007406854\n [9,] 9.132662  9.944999 0.8123364 0.007505962\n[10,] 9.088576  9.924941 0.8363644 0.008003248\n[11,] 9.057435  9.906340 0.8489044 0.008086779\n[12,] 9.019733  9.888898 0.8691655 0.008378669\n[13,] 8.988798  9.872948 0.8841499 0.008499708\n[14,] 8.962331  9.857905 0.8955736 0.008609360\n[15,] 8.932159  9.843557 0.9113980 0.008574353\n[16,] 8.908477  9.830133 0.9216564 0.008442998\n[17,] 8.880801  9.817233 0.9364313 0.008235439\n[18,] 8.846775  9.805149 0.9583744 0.008068772\n[19,] 8.828254  9.793671 0.9654167 0.007975742\n[20,] 8.812263  9.782502 0.9702393 0.007904523\n[21,] 8.793736  9.771938 0.9782012 0.007903082\n[22,] 8.777957  9.761659 0.9837022 0.007927244\n[23,] 8.762944  9.751686 0.9887413 0.007838986\n[24,] 8.745719  9.741903 0.9961837 0.007850884\n[25,] 8.732706  9.732508 0.9998020 0.007792150\n[26,] 8.716858  9.723358 1.0064996 0.007813310\n[27,] 8.703095  9.714414 1.0113191 0.007684052\n[28,] 8.684688  9.705770 1.0210819 0.007586041\n[29,] 8.664250  9.697408 1.0331579 0.007592467\n[30,] 8.649964  9.689233 1.0392698 0.007607051\n\n\n\n\n\n\n\n-- visualise gap_stat\n\n\n\n\n\n\nUsage of the code chunk below :\nfviz_nbclust( ) - factoextra - to compute and visualise the Optimal Number of clusters.\n\n\nShow the code\nset.seed(12345)\nfviz_nbclust(nga_wpZ, \n             kmeans, \n             nstart = 25,  \n             method = \"gap_stat\", \n             nboot = 50)+\n  labs(subtitle = \"Gap statistic method\")\n\n\nWarning: did not converge in 10 iterations\n\nWarning: did not converge in 10 iterations\n\nWarning: did not converge in 10 iterations\n\n\n\n\n\n\n5.1.5.2 compute and visualise Elbow method\n\n\nShow the code\nfviz_nbclust(nga_wpZ, kmeans, method = \"wss\") +\n    geom_vline(xintercept = 4, linetype = 2)+\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\n5.1.5.3 compute and visualise Silhouette method\n\n\nShow the code\nfviz_nbclust(nga_wpZ, kmeans, method = \"silhouette\")+\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\nRemarks :\nGiven the Elbow method, Silhouette method and Gap Statistic method, the 5-cluster by Silhouette method will be used for the rest of the study.\n\n\n\n\n\n\n5.1.5.4 interpret with Dendrogram\n\n\n\n\n\n\nUsage of the code chunk below :\nrect.hclust( ) - stats - to draw the dendrogram with a border around the selected clusters.\n\n\nShow the code\nplot(hieClust_warD, cex = 0.6)\nrect.hclust(hieClust_warD, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\n5.1.6 Visually-Driven Hierarchical Clustering Analysis\nThe data is loaded into a data frame, but it has to be a data matrix to plot the heatmap. Hence, the data frame will need to first transform into a matrix.\n\n5.1.6.1 transform data frame into matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndata.matrix( ) - base - to transform cluster_varsTrim data frame into a data matrix, and named it as nga_clustMat.\n\n\nShow the code\nnga_clustMat <- data.matrix(cluster_varsTrim)\n\n\n\n\n\n\n\n5.1.6.2 plot interactive cluster heatmap\n\n\n\n\n\n\nUsage of the code chunk below :\nheatmaply( ) - heatmaply - to build an interactive cluster heatmap.\n\n\nShow the code\nheatmaply(normalize(nga_clustMat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria by Water Points\",\n          xlab = \"Water Points\",\n          ylab = \"Nigeria LGA\"\n          )\n\n\n\n\n\n\nRemarks :\nBased on the plot above, 5 clusters to be retained for further analysis.\n\n\n\n\n\n5.1.6.3 map the formed cluster\n\n\n\n\n\n\nUsage of the code chunk below :\ncutree( ) - base - to derive a 5-cluster model, and named the output as groups.\n\n\nShow the code\ngroups <- as.factor(cutree(hieClust_warD, k=5))\n\n\n\n\n\n\n\n5.1.6.4 append groups to wp_ngaTrans\n\n\n\n\n\n\n\n\nShow the code\nnga_clust.sf <- cbind(wp_ngaTrans, as.matrix(groups)) %>%\n  rename(`cluster`=`as.matrix.groups.`)\n\n\n\n\n\n\n\n5.1.6.5 plot choropleth map :: nga_clust.sf\n\n\n\n\n\n\n\n\nShow the code\nqtm(nga_clust.sf, \"cluster\")\n\n\n\n\n\nRemarks :\nThe choropleth map above shows the fragmented clusters by the used of non-spatial clustering algorithm (hierarchical cluster analysis method)."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#spatially-constrained-clustering-skater-approach",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#spatially-constrained-clustering-skater-approach",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.2 Spatially Constrained Clustering :: SKATER Approach",
    "text": "5.2 Spatially Constrained Clustering :: SKATER Approach\nSKATER function only support sp objects in SpatialPolygonDataFrame. Hence, the wp_ngaTrans has to first transform into SpatialPolygonDataFrame before proceed further.\n\n5.2.1 Convert SF to SP Data Frame\n\n\n\n\n\n\nUsage of the code chunk below :\nas_Spatial( ) - sf - to convert wp_ngaTrans into nga_sp in a SP data frame.\n\n\nShow the code\nnga.sp <- as_Spatial(wp_ngaTrans)\n\n\n\n\n\n\n\n5.2.2 Compute Neighbour List\n\n\n\n\n\n\nUsage of the code chunk below :\npoly2nb( ) - spdep - to compute the neighbours list from polygon list.\n\n\nShow the code\nnga.nb <- poly2nb(nga.sp, queen = TRUE)\nsummary(nga.nb)\n\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nRemarks :\nThere is one (1) region, i.e. #86 is without link. It has to be removed first before proceed to plot the neighbours list.\n\n\n\n\n5.2.2.1 remove 0-neighbour region\n\n\n\n\n\n\n\n\nShow the code\nwp_ngaTrans1 <- wp_ngaTrans[-86,]\ncluster_varsTrim1 <- cluster_varsTrim[-86,]\nnga_clust.sf1 <- nga_clust.sf[-86,]\nnga_wpZ1 <- nga_wpZ[-86,]\nnga.sp1 <- as_Spatial(wp_ngaTrans1)\n\nnga.nb1 <- poly2nb(nga.sp1)\nsummary(nga.nb1)\n\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\n\n\n\n\n\n5.2.2.2 plot Neighbour List by Centroid Node\n\n\n\n\n\n\nUsage of the code chunk below : plot the boundary first before the neighbour list object to avoid any region from being clipped away.\n\n\nShow the code\nplot(nga.sp1, \n     border=grey(.5))\nplot(nga.nb1, \n     coordinates(nga.sp1), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n5.2.3 Compute Minimum Spanning Tree (MST)\n\n5.2.3.1 calculate edge costs\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the cost of each edge which is the distance between nodes.\n\n\nShow the code\nedge_cost <- nbcosts(nga.nb1, cluster_varsTrim1)\n\n\n\n\n\n\n\n5.2.3.2 specify spatial weight\n\n\n\n\n\n\nnb2listw( ) - spdep - to specify edge_cost as the spatial weights. Set the “style” to “B” to ensure the cost values are not row-standardised.\n\n\nShow the code\nnga.w <- nb2listw(nga.nb1,\n                  edge_cost,\n                  style = \"B\")\n\n\nWarning in nb2listw(nga.nb1, edge_cost, style = \"B\"): zero sum general weights\n\n\nShow the code\nsummary(nga.w)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1        S2\nB 773 597529 245120.7 38463020 406298492\n\n\n\n\n\n\n\n5.2.3.3 compute minimum spanning tree\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the minimum spanning tree.\n\n\nShow the code\nnga_minSpanT <- mstree(nga.w)\n\n\n\n\n\n\n\n\n\n\n\n-- review class and dimension of the computed MST\n\n\n\n\n\nShow the code\nclass(nga_minSpanT)\n\n\n[1] \"mst\"    \"matrix\"\n\n\n\n\nShow the code\ndim(nga_minSpanT)\n\n\n[1] 772   3\n\n\n\n\nShow the code\nhead(nga_minSpanT)\n\n\n     [,1] [,2]      [,3]\n[1,]  474  387 134.66287\n[2,]  387  478  64.55618\n[3,]  387  439  78.95255\n[4,]  439  476  50.91751\n[5,]  439  270 105.68114\n[6,]  270   90  66.67241\n\n\n\n\n\n\n5.2.3.4 plot MST Neighbour List\n\n\n\n\n\n\n\n\nShow the code\nplot(nga.sp1, border=gray(.5))\nplot.mst(nga_minSpanT,\n         coordinates(nga.sp1), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n5.2.4 Compute Spatially Constrained Cluster\n\n\n\n\n\n\nUsage of the code chunk below :\nskater( ) - spdep - to compute the spatially constrained cluster.\n\n\nShow the code\nclust5 <- spdep::skater(edges = nga_minSpanT[,1:2],\n                        data = cluster_varsTrim1,\n                        method = \"euclidean\",\n                        ncuts = 4)\nstr(clust5)\n\n\nList of 8\n $ groups      : num [1:773] 3 3 1 5 4 1 2 2 1 3 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:309] 773 747 492 131 382 224 413 488 439 257 ...\n  .. ..$ edge: num [1:308, 1:3] 131 382 224 413 257 767 439 704 476 75 ...\n  .. ..$ ssw : num 17013\n  ..$ :List of 3\n  .. ..$ node: num [1:129] 597 315 316 557 195 571 339 744 205 213 ...\n  .. ..$ edge: num [1:128, 1:3] 315 316 557 195 571 15 82 579 744 351 ...\n  .. ..$ ssw : num 7874\n  ..$ :List of 3\n  .. ..$ node: num [1:85] 364 10 729 215 337 551 102 103 66 19 ...\n  .. ..$ edge: num [1:84, 1:3] 23 536 578 103 19 375 727 617 188 103 ...\n  .. ..$ ssw : num 4545\n  ..$ :List of 3\n  .. ..$ node: num [1:39] 550 202 330 287 374 732 537 586 733 201 ...\n  .. ..$ edge: num [1:38, 1:3] 612 586 136 245 332 429 504 537 586 616 ...\n  .. ..$ ssw : num 1294\n  ..$ :List of 3\n  .. ..$ node: num [1:211] 67 510 401 122 24 526 475 489 663 303 ...\n  .. ..$ edge: num [1:210, 1:3] 67 549 510 119 639 401 556 122 693 70 ...\n  .. ..$ ssw : num 10380\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 52660\n $ ssw         : num [1:5] 52660 48724 44268 42679 41106\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\n\n\n\n5.2.4.1 tabulate cluster assignment\n\n\n\n\n\n\n\n\nShow the code\nccs5 <- clust5$groups\ntable(ccs5)\n\n\nccs5\n  1   2   3   4   5 \n309 129  85  39 211 \n\n\n\n\n\n\n\n5.2.4.2 plot the pruned tree\n\n\n\n\n\n\n\n\nShow the code\nplot(nga.sp1, border=gray(.5))\nplot(clust5, \n     coordinates(nga.sp1), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n5.2.5 Visualise SKATER Clusters in Choropleth Map\n\n\n\n\n\n\n\n\nShow the code\ngroups_mat <- as.matrix(clust5$groups)\n\nnga_spClust.sf <- cbind(nga_clust.sf1, as.factor(groups_mat)) %>%\n  rename(`sp_cluster`=`as.factor.groups_mat.`)\n\n\nTo compare the output of hierarchical clustering and spatially constrained hierarchical clustering :\n\n\nShow the code\nhieClust_map <- qtm(nga_clust.sf1,\n                  \"cluster\") + \n  tm_borders(alpha = 0.5) \n\nngaClust_map <- qtm(nga_spClust.sf,\n                   \"sp_cluster\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hieClust_map, ngaClust_map,\n             asp=NA, ncol=2)\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#spatially-constrained-clustering-clustgeo-method",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.3 Spatially Constrained Clustering :: ClustGeo Method",
    "text": "5.3 Spatially Constrained Clustering :: ClustGeo Method\n\n5.3.1 Perform Ward-like Hierarchical Clustering\n\n\n\n\n\n\nUsage of the code chunk below :\nhclustgeo( ) - ClustGeo - to perform a typical Ward-like hierarchical clustering.\n\n\nShow the code\nproxmat_ngc <- dist(cluster_varsTrim1, method = 'euclidean')\n\n\n\n\nShow the code\nnonGeo_clust <- hclustgeo(proxmat_ngc)\nplot(nonGeo_clust, cex = 0.5)\nrect.hclust(nonGeo_clust, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n5.3.1.1 visualise the formed clusters\n\n\n\n\n\n\n\n\nShow the code\ngroups_ngc <- as.factor(cutree(nonGeo_clust, k=5))\n\n\n\n\nShow the code\nnga_ngeo_clust.sf <- cbind(wp_ngaTrans1, as.matrix(groups_ngc)) %>%\n  rename(`cluster` = `as.matrix.groups_ngc.`)\n\n\n\n\nShow the code\nqtm(nga_ngeo_clust.sf, \"cluster\")\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Perform Spatially Constrained Hierarchical Clustering\n\n\n\n\n\n\nUsage of the code chunk below :\nst_distance( ) - sf - to derive the spatial distance matrix before perform spatially constrained hierarchical clustering.\nas.dist( ) - stats - to convert the data frame into matrix.\n\n\nShow the code\ndist <- st_distance(wp_ngaTrans1, wp_ngaTrans1)\ndist_mat <- as.dist(dist)\n\n\n\n\n\n\n5.3.2.1 determine alpha value\n\n\n\n\n\n\nchoicealpha( ) - psych - to determine a suitable value for the mixing parameter alpha.\n\n\nShow the code\ncr <- choicealpha(\n  proxmat_ngc, \n  dist_mat, \n  range.alpha = seq(0, 1, 0.1), \n  K=5, \n  graph = TRUE)\n\n\n\n\n\n\n\n\nRemarks :\nWith reference to the plot above, alpha = 0.4 to be used to perform spatially constrained hierarchical clustering.\n\n\n\n\n\n5.3.2.2 compute spatially constrained hierarchical clustering\n\n\n\n\n\n\n\n\nShow the code\nclustG <- hclustgeo(proxmat_ngc, \n                    dist_mat, \n                    alpha = 0.4)\n\n\n\n\n\n\n\n5.3.2.3 derive cluster object\n\n\n\n\n\n\n\n\nShow the code\ngroups_cg <- as.factor(cutree(clustG, k=5))\n\n\n\n\n\n\n\n5.3.2.4 combine group_cg with wp_ngaTrans1\n\n\n\n\n\n\n\n\nShow the code\nwp_nga1_GClust <- cbind(wp_ngaTrans1, as.matrix(groups_cg)) %>%\n  rename(`cluster` = `as.matrix.groups_cg.`)\n\n\n\n\n\n\n\n5.3.2.5 plot delineated spatially constrained cluster\n\n\n\n\n\n\n\n\nShow the code\nqtm(wp_nga1_GClust, \"cluster\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_draft2.html#visual-interpretation-of-clusters",
    "href": "class_project/project_2/Regionalisation_scca_draft2.html#visual-interpretation-of-clusters",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.4 Visual Interpretation of Clusters",
    "text": "5.4 Visual Interpretation of Clusters\n\n5.4.1 Visualise Individual Clustering Variable\n\n5.4.1.1 plot boxplot\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = nga_ngeo_clust.sf,\n       aes(x = cluster, y = pct_functional)) +\n  geom_boxplot()\n\n\n\n\n\nRemarks :\nThe boxplot reveals Cluster 5 displays the highest mean of functional water points. This is followed by Cluster 1, 3, 2, and 4.\n\n\n\n\n\n\n5.4.2 Visualise Multivariate\n\n\n\n\n\n\nUsage of the code chunk below :\nggparcoord( ) - GGally - to reveal clustering variables by cluster.\n\n\nShow the code\nnga_ngeo_clust.sf1 <- nga_ngeo_clust.sf %>%\n  select(\"shapeName\", \n         \"pct_functional\", \n         \"pct_nonFunctional\", \n         \"pct_unknown\", \n         \"pct_handPump\", \n         \"pct_tapStand\", \n         \"pct_uc300\", \n         \"pct_uc1000\", \n         \"pct_uc250\", \n         \"pct_urban0\",\n         \"cluster\")\n         \nhead(nga_ngeo_clust.sf1,3)\n\n\nSimple feature collection with 3 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 7.307433 ymin: 5.052192 xmax: 13.83477 ymax: 13.71406\nProjected CRS: Minna / Nigeria West Belt\n  shapeName pct_functional pct_nonFunctional pct_unknown pct_handPump\n1 Aba North       41.17647          52.94118    5.882353    11.764706\n2 Aba South       40.84507          46.47887    9.859155     9.859155\n3    Abadam        0.00000           0.00000    0.000000     0.000000\n  pct_tapStand pct_uc300 pct_uc1000 pct_uc250 pct_urban0 cluster\n1            0  17.64706   82.35294         0   0.000000       1\n2            0  12.67606   87.32394         0   5.633803       1\n3            0   0.00000    0.00000         0   0.000000       1\n                        geometry\n1 MULTIPOLYGON (((7.401109 5....\n2 MULTIPOLYGON (((7.334479 5....\n3 MULTIPOLYGON (((13.83477 13...\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggparcoord(data = nga_ngeo_clust.sf,\n           columns = c(2:19),\n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Variables by Cluster\") +\n  facet_grid(~ cluster, scales = \"fixed\") + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\n\n\n\n\n\n5.4.3 Compute Summary Statistics\n\n\n\n\n\n\n\n\nShow the code\nnga_ngeo_clust.sf %>% \n  st_set_geometry(NULL) %>%\n  group_by(cluster) %>%\n  summarise(mean_pct_functional = mean(pct_functional),\n            mean_pct_nonFunctional = mean(pct_nonFunctional),\n            mean_pct_unknown = mean(pct_unknown),\n            mean_pct_handPump = mean(pct_handPump), \n            mean_pct_tapStand = mean(pct_tapStand), \n            mean_pct_uc300 = mean(pct_uc300), \n            mean_pct_uc1000 = mean(pct_uc1000), \n            mean_pct_uc250 = mean(pct_uc250), \n            mean_pct_urban0 = mean(pct_urban0))\n\n\n# A tibble: 5 × 10\n  cluster mean_pct_fun…¹ mean_…² mean_…³ mean_…⁴ mean_…⁵ mean_…⁶ mean_…⁷ mean_…⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 1                 51.7    29.0   9.25    35.0   0.525     44.1    45.5  0.539 \n2 2                 46.2    42.2  11.3     59.9   1.00      70.6    28.3  1.03  \n3 3                 40.5    49.4   9.15     9.87  0.304     19.2    80.4  0.345 \n4 4                 18.4    14.6  67.0     18.1   0.337     72.1    27.5  0.410 \n5 5                 78.9    20.7   0.295   88.7   0.0677    89.2    10.7  0.0903\n# … with 1 more variable: mean_pct_urban0 <dbl>, and abbreviated variable names\n#   ¹​mean_pct_functional, ²​mean_pct_nonFunctional, ³​mean_pct_unknown,\n#   ⁴​mean_pct_handPump, ⁵​mean_pct_tapStand, ⁶​mean_pct_uc300, ⁷​mean_pct_uc1000,\n#   ⁸​mean_pct_uc250"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#avoid-multicollinearity",
    "href": "class_project/project_2/Regionalisation_scca.html#avoid-multicollinearity",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.2 Avoid Multicollinearity",
    "text": "4.2 Avoid Multicollinearity\n\n\n\n\n\n\n4.2.1 Remove Variable Highly Correlated\n\n\n\n\n\nShow the code\ncluster_varsWM <- cluster_vars %>%\n  select(-pct_ucN1000, -pct_mechPump)\n\n\n\n4.2.2 review trimmed data table\n\n\nShow the code\nhead(cluster_varsWM)\n\n\n               pct_functional pct_nonFunctional pct_handPump pct_tapStand\nAba North            41.17647          52.94118    11.764706      0.00000\nAba South            40.84507          49.29577     9.859155      0.00000\nAbaji                40.35088          59.64912    40.350877      0.00000\nAbak                 47.91667          52.08333     8.333333      0.00000\nAbakaliki            35.19313          18.02575    43.776824     15.45064\nAbeokuta North       47.05882          44.11765    14.705882      0.00000\n               pct_uc300 pct_uc1000 pct_uc250 pct_urban0\nAba North      17.647059   82.35294   0.00000   0.000000\nAba South      12.676056   87.32394   0.00000   5.633803\nAbaji          40.350877   59.64912   0.00000  84.210526\nAbak            8.333333   91.66667   0.00000  83.333333\nAbakaliki      75.107296    9.44206  15.45064  87.553648\nAbeokuta North 23.529412   76.47059   0.00000  20.588235"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#refine-model-cluster_varstech",
    "href": "class_project/project_2/Regionalisation_scca.html#refine-model-cluster_varstech",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.2 Refine Model :: cluster_varsTech",
    "text": "4.2 Refine Model :: cluster_varsTech\n\n\n\n\n\n\n4.2.1 Remove “usage_capacity”\n\n\n\n\n\nShow the code\ncluster_varsTech <- cluster_vars %>%\n  select(-pct_ucN1000, -pct_uc1000, -pct_uc300, -pct_uc250)\n\n\n\n\nShow the code\ncorrplot.mixed((cor(cluster_varsTech)),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\n\nRemarks :\n“pct_handPump” and “pct_mechPump” are negatively correlated at -0.82.\nSince hand pump is the instructed main water point technology in the scope of work, “pct_mechPump” will be removed from the model.\n\n\nShow the code\ncluster_varsTech1 <- cluster_varsTech %>%\n  select(-pct_mechPump)\n\n\n\n4.2.2 Build Regression Model\n\n\nShow the code\nmodel_test <- lm(total_wp ~ pct_functional + \n         pct_nonFunctional +\n         pct_handPump +\n         pct_tapStand +\n         pct_urban0,\n         data = cluster_varsTech1)\n\nsummary(model_test)\n\n\n\nCall:\nlm(formula = total_wp ~ pct_functional + pct_nonFunctional + \n    pct_handPump + pct_tapStand + pct_urban0, data = cluster_varsTech1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-215.31  -54.75  -13.98   32.67  704.69 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        69.4043    16.7459   4.145 3.79e-05 ***\npct_functional     -0.2828     0.2070  -1.366 0.172198    \npct_nonFunctional  -0.7306     0.2165  -3.374 0.000779 ***\npct_handPump        1.3936     0.1284  10.852  < 2e-16 ***\npct_tapStand        0.2251     1.1444   0.197 0.844110    \npct_urban0          0.3684     0.1194   3.084 0.002115 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 97.34 on 755 degrees of freedom\nMultiple R-squared:  0.2087,    Adjusted R-squared:  0.2035 \nF-statistic: 39.83 on 5 and 755 DF,  p-value: < 2.2e-16\n\n\n\n\n4.2.3 Detect Multicollinearity\n\n\nShow the code\ncar::vif(model_test)\n\n\n   pct_functional pct_nonFunctional      pct_handPump      pct_tapStand \n         1.899980          1.607224          1.381794          1.018837 \n       pct_urban0 \n         1.133960 \n\n\nRemarks :\n\n\n\n\n\n\nAlert\n\n\n\nWhen encountering the following error :\n” Error in vif.default(model_test) : there are aliased coefficients in the mode “\nIt means two or more predictor variables in the model are perfectly correlated.\n\n\n\n\n\n\n\n\nNote\n\n\n\nVariables with VIF threshold value between 5 to 10 may need to be cautious but VIF greater than 10 can be problematic to the model performance due to serious collinearity problem.1111 Chouiry G. (2022). What is an Acceptable Value for VIF? (With References). https://quantifyinghealth.com/vif-threshold/\n“A VIF value of 10 means that the tolerance of the relevant independent variable is 0.10 and that 90% (𝐑𝟐) of the variable is explained by other variables. This is undesirable, as it indicates that the relevant independent variable is unnecessarily included in the model.”1212 ResearchGate. Multicollinearity issues: is a value less than 10 acceptable for VIF? https://www.researchgate.net/post/Multicollinearity_issues_is_a_value_less_than_10_acceptable_for_VIF\nWhen a study involve a large sample size, the VIF threshold value can be set up to 10.\n\n\nBased on the VIF report, there is no multicollinearity in the model."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#tidy-data-frame",
    "href": "class_project/project_2/Regionalisation_scca.html#tidy-data-frame",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.1 Tidy Data Frame",
    "text": "5.1 Tidy Data Frame\n\n\nShow the code\ncluster_varsTech2 <- cluster_varsTech1 %>%\n  select(-total_wp)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#standardise-data",
    "href": "class_project/project_2/Regionalisation_scca.html#standardise-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_varsTech2)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 5  Variables      761  Observations\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_varsTech2)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 5  Variables      761  Observations\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_functional`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_functional`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_functional`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_nonFunctional`)) +\n    geom_density(color = \"black\", fill = \"#ff1919FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_nonFunctional`)) +\n      geom_density(color = \"black\", fill = \"#ff1919FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_nonFunctional`)) +\n     geom_density(color = \"black\", fill=\"#ff1919FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_handPump`)) +\n    geom_density(color = \"black\", fill = \"#FFA319FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_handPump`)) +\n      geom_density(color = \"black\", fill = \"#FFA319FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_handPump`)) +\n     geom_density(color = \"black\", fill=\"#FFA319FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_tapStand`)) +\n    geom_density(color = \"black\", fill = \"#ff5619FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_tapStand`)) +\n      geom_density(color = \"black\", fill = \"#ff5619FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_tapStand`)) +\n     geom_density(color = \"black\", fill=\"#ff5619FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_urban0`)) +\n    geom_density(color = \"black\", fill = \"#19beffFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_urban0`)) +\n      geom_density(color = \"black\", fill = \"#19beffFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_urban0`)) +\n     geom_density(color = \"black\", fill=\"#19beffFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#hierarchical-clustering",
    "href": "class_project/project_2/Regionalisation_scca.html#hierarchical-clustering",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.1 Hierarchical Clustering",
    "text": "6.1 Hierarchical Clustering\nThere are four (4) main steps :\n\ncompute proximity matrix and determine clustering algorithm.\ncompute Hierarchical Clustering.\nidentify optimal number of cluster and merge similar clusters.\nupdate the distance matrix.\n\n\n6.1.1 Compute Proximity Matrix and Clustering Algorithm\n\n\n\n\n\n\nFirst determine the clustering algorithm before compute Hierarchical Clustering analysis.\n\n6.1.1.1 determine Hierarchical Clustering algorithm\n\n\n\n\n\n\nUsage of the code chunk below :\nagnes( ) - cluster - to get agglomerative coefficient of 4 clustering structure, namely “average”, “single”, “complete” and “ward”.\n\n\n\n\n\nShow the code\nm <- c(\"average\",\"single\",\"complete\",\"ward\")\n\nnames(m) <- c(\"average\",\"single\",\"complete\",\"ward\")\n\nac <- function(x){agnes(wp_stdMM, method = x)$ac}\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.9287791 0.8321098 0.9529544 0.9918906 \n\n\nRemarks :\n\nValue 1 indicates the strongest clustering structure.\nWard’s method provides the strongest clustering structure. Therefore, Ward’s method is to be used in subsequent analysis.\n\n\n\n6.1.1.2 compute proximity matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndist( ) - stats - to compute the proximity distance matrix. Among euclidean, maximum, manhattan, canberra, binary and minkowski, euclidean is used to compute proxmat_euc.\n\n\n\n\n\nShow the code\nprox_mat_euc <- dist(wp_stdMM, \n                     method = 'euclidean')\n\n\n\n\n\n\n\n\n6.1.2 Compute Hierarchical Clustering\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhclust( ) - stats - to compute cluster with agglomeration method.\nggdendrogram( ) - ggdendro - to plot dendrogram with tools available in ggplot2.\n\n\n\n\n\nShow the code\nhclust_ward <- hclust(prox_mat_euc, \n                      method = 'ward.D')\nggdendrogram(hclust_ward,\n             rotate = TRUE,\n             cex = 0.1,\n             theme_dendro = FALSE)\n\n\n\n\n\nRemarks :\nThis is in spite of adjusting the cex= parameter that scales the resolution of the dendogram to 10%. 1313 Chua Y.T. (2022). Take-home Exercise 2 - Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods. https://isss624-amelia.netlify.app/exercises/take-home_ex2/take-home_ex2#computing-hierarchical-clustering\n\n\n\n\n\n6.1.3 Identify Number of Optimal Cluster\n\n\n\n\n\n\nTo determine the optimal clusters to retain, following commons methods are tested :\n\nGap statistic\nElbow\nAverage Silhouette\n\n\n6.1.3.1 compute Gap Statistic method\n\n\n\n\n\n\nUsage of the code chunk below :\nclusGap( ) - cluster - to compute the gap statistic.\n\n\n\n\n\nShow the code\nset.seed(12345)\n\ngap_stat <- clusGap(wp_stdMM, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 7, \n                    B = 50)\n\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = wp_stdMM, FUNcluster = hcut, K.max = 7, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..7; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 5\n         logW   E.logW       gap      SE.sim\n[1,] 4.923949 5.477941 0.5539917 0.007618469\n[2,] 4.731938 5.364838 0.6329008 0.012434270\n[3,] 4.617999 5.286602 0.6686036 0.010528780\n[4,] 4.497712 5.221510 0.7237980 0.011597296\n[5,] 4.419187 5.168516 0.7493295 0.011180606\n[6,] 4.379879 5.123591 0.7437121 0.010223152\n[7,] 4.336848 5.085791 0.7489429 0.010297232\n\n\nRemarks :\nThe number of clusters recommended by “firstmax” approach of Gap Statistic method is 5.\n\n\n6.1.3.2 visualise gap_stat\n\n\n\n\n\n\nUsage of the code chunk below :\nfviz_nbclust( ) - factoextra - to compute and visualise the Optimal Number of clusters.\n\n\n\n\n\nShow the code\nset.seed(12345)\n\nfviz_nbclust(wp_stdMM,\n             FUNcluster = hcut,\n             nstart = 25,  \n             method = \"gap_stat\", \n             nboot = 50,\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Gap statistic method\")\n\n\n\n\n\n\n\n6.1.3.3 compute and visualise Total Within Sum of Squares (Elbow) method\n\n\nShow the code\nfviz_nbclust(wp_stdMM, \n             kmeans, \n             method = \"wss\",\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\n6.1.3.4 compute and visualise Silhouette method\n\n\nShow the code\nfviz_nbclust(wp_stdMM, \n             kmeans, \n             method = \"silhouette\",\n             linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\nRemarks :\n\n\n\nMethod\nGap stat\nElbow\nSilhouette\n\n\n\n\nOptimal Value for K\n5\n3\n3\n\n\n\nGiven the Elbow method, Silhouette method and Gap Statistic method, the 5-cluster by Silhouette method will be used for the rest of the study.\n\n\n\n\n\n\n6.1.4 Merge Similar Clusters\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nrect.hclust( ) - stats - to draw the dendrogram with a border around the selected clusters.\n\n\n\n\n\nShow the code\nplot(hclust_ward, cex = 0.5)\nrect.hclust(hclust_ward, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n6.1.5 Visually-Driven Hierarchical Clustering Analysis\n\n\n\n\n\n\nThe data is loaded into a data frame, but it has to be a data matrix to plot the heatmap. Hence, the data frame will need to first transform into a matrix.\n\n6.1.5.1 transform data frame into matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndata.matrix( ) - base - to transform cluster_varsTrim data frame into a data matrix, and named it as nga_clustMat.\n\n\n\n\n\nShow the code\nwp_stdMM_mat <- data.matrix(wp_stdMM)\n\n\n\n\n6.1.5.2 plot interactive cluster heatmap\n\n\n\n\n\n\nUsage of the code chunk below :\nheatmaply( ) - heatmaply - to build an interactive cluster heatmap.\n\n\n\n\n\nShow the code\nheatmaply(normalize(wp_stdMM_mat),\n          Colv = NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 1,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria by Water Points\",\n          xlab = \"Water Points\",\n          ylab = \"Nigeria LGA\"\n          )\n\n\n\n\n\n\nRemarks :\nCluster 4 and 5 have higher percentage of functional water points.\nCluster 1, 2 and 3 have higher percentage of non-functional water points.\nCluster 1, 2, 4 and 5 have higher percentage of hand pump deployed for the water points.\nCluster 2, 3 and 5 have higher percentage of rural communities.\n\n\n6.1.5.3 create 5-cluster model\n\n\n\n\n\n\nUsage of the code chunk below :\ncutree( ) - base - to derive a 5-cluster model, and named the output as groups.\n\n\n\n\n\nShow the code\ngroups <- as.factor(cutree(hclust_ward, k = 5))\n\n\n\n\n6.1.5.4 append groups to wp_ngaTrim\n\n\nShow the code\nnga_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups)) %>%\n  rename(`cluster`=`as.matrix.groups.`)\n\n\n\n\n6.1.5.5 plot choropleth map :: nga_clust.sf\n\n\nShow the code\nclusGeo.map <- tm_shape(nga_clust.sf) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Non-Spatial with \\n Hierarchical Clustering\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo.map\n\n\n\n\n\nRemarks :\nThe choropleth map above shows the fragmented clusters by the used of non-spatial clustering algorithm (hierarchical cluster analysis method)."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#visual-interpretation",
    "href": "class_project/project_2/Regionalisation_scca.html#visual-interpretation",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "7 VISUAL INTERPRETATION",
    "text": "7 VISUAL INTERPRETATION"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#visualise-individual-clustering-variable",
    "href": "class_project/project_2/Regionalisation_scca.html#visualise-individual-clustering-variable",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "7.1 Visualise Individual Clustering Variable",
    "text": "7.1 Visualise Individual Clustering Variable\n\n7.1.1 Plot Boxplot\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = nga_ngeo_clust.sf,\n       aes(x = cluster, y = pct_nonFunctional)) +\n  geom_boxplot()\n\n\n\n\n\nRemarks :\nThe boxplot reveals Cluster 3 displays the highest mean of non-functional water points. This is followed by Cluster 2.\n\n\n\n\n\n7.1.2 Visualise Multivariate\n\n\n\n\n\n\nCreate a separate data frame to ensure key variables are included.\n\n7.1.2.1 prepare data frame\n\nnga_ngeo_clust.sf1 <- nga_ngeo_clust.sf %>%\n  select(\"shapeName\", \n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\", \n         \"pct_tapStand\",\n         \"pct_urban0\",\n         \"cluster\")\n         \nhead(nga_ngeo_clust.sf1,3)\n\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6.778522 ymin: 5.052192 xmax: 7.402708 ymax: 9.232154\nProjected CRS: Minna / Nigeria West Belt\n  shapeName pct_functional pct_nonFunctional pct_handPump pct_tapStand\n1 Aba North       41.17647          52.94118    11.764706            0\n2 Aba South       40.84507          49.29577     9.859155            0\n3     Abaji       40.35088          59.64912    40.350877            0\n  pct_urban0 cluster                       geometry\n1   0.000000       1 MULTIPOLYGON (((7.401109 5....\n2   5.633803       1 MULTIPOLYGON (((7.334479 5....\n3  84.210526       2 MULTIPOLYGON (((7.045872 9....\n\n\n\n\n7.1.2.2 plot parallel coordinate plot\n\n\n\n\n\n\nUsage of the code chunk below :\nggparcoord( ) - GGally - to plot static parallel coordinate plots to reveal distribution of variables by cluster.\n\nscale is a character string with the following options -\n\nstd : univariately, subtract mean & divide by standard deviation.\nrobust : univariately, subtract median & divide by median absolute deviation.\nuniminmax : univariately, scale the minimum to 0, the maximum to 1.\nglobalminmax : no scaling; the range of the graphs is defined by the global minimum and the global maximum.\ncenter : use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs : use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\n\n\n\n\n\nggparcoord(data = nga_ngeo_clust.sf1[\n  nga_ngeo_clust.sf1$cluster %in% c(2:6),],\n           columns = c(2:6),\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE,\n           groupColumn = 3) +\n  labs(title = \"Visual Clustering for ClustGeo Method Spatially Constrained Clustering\",\n       subtitle = \"Multiple Parallel Coordinates Plot\") +\n  scale_color_viridis(discrete = FALSE) +\n  facet_grid(~ cluster,) +\n  theme(axis.text.x = element_text(angle = 90),\n        text = element_text(size = 12))\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\nRemarks :\nBased on the parallel coordinate plot above, insights for the stakeholder or decision makers from :\n\nthe Federal Ministry of Agriculture & Rural Development (FMARD) -\n\nCluster 2 LGA has the highest percentage of non-functional water points, followed by Cluster 1 LGA.\nCluster 2 also has the highest percentage of rural communities.\n\n\n!!!!! 1 cluster is missing. Evaluation may be misled."
  },
  {
    "objectID": "in-class_ex/in-class_ex5/In-class_Ex5.html#convert-simple-feature-to-spatialpointdataframe",
    "href": "in-class_ex/in-class_ex5/In-class_Ex5.html#convert-simple-feature-to-spatialpointdataframe",
    "title": "GWLR - Osun Water Points",
    "section": "6.1 Convert Simple Feature to SpatialPointDataFrame",
    "text": "6.1 Convert Simple Feature to SpatialPointDataFrame\n\n\nShow the code\nwp_osun.sp <- wp_osun.sf %>%\n  select(c(status,\n           distance_to_primary_road,\n           distance_to_secondary_road,\n           distance_to_tertiary_road,\n           distance_to_city,\n           distance_to_town,\n           is_urban,\n           usage_capacity,\n           water_source_clean,\n           water_point_population,\n           local_population_1km)) %>%\n  as_Spatial()\n\nwp_osun.sp\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 11\nnames       : status, distance_to_primary_road, distance_to_secondary_road, distance_to_tertiary_road, distance_to_city, distance_to_town, is_urban, usage_capacity, water_source_clean, water_point_population, local_population_1km \nmin values  :      0,        0.014461356813335,          0.152195902540837,         0.017815121653488, 53.0461399623541, 30.0019777713073,        0,           1000,           Borehole,                      0,                    0 \nmax values  :      1,         26909.8616132094,           19559.4793799085,          10966.2705628969,  47934.343603562, 44020.6393368124,        1,            300,   Protected Spring,                  29697,                36118"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#clustgeo-method",
    "href": "class_project/project_2/Regionalisation_scca.html#clustgeo-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.3 ClustGeo Method",
    "text": "6.3 ClustGeo Method\nThis section consists of two (2) parts i.e. spatially and non-spatially Constrained Cluster analysis.\n\n6.3.1 Non-Spatially Constrained Hierarchical Cluster Analysis\n\n\n\n\n\n\nDissimilarity matrix must be an object of class dist.\n\n6.3.1.1 create Class dist Object\n\n\nShow the code\nproxmat_ngc <- dist(wp_stdMM, method = 'euclidean')\n\n\n\n\n6.3.1.2 compute Non-Spatially Constrained Hierarchical Clustering\n\n\n\n\n\n\nUsage of the code chunk below :\nhclustgeo( ) - ClustGeo - to perform a typical Ward-like hierarchical clustering.\n\n\n\n\n\nShow the code\nnonGeo_clust <- hclustgeo(proxmat_ngc)\nplot(nonGeo_clust, \n     cex = 0.5)\nrect.hclust(nonGeo_clust, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n6.3.1.3 derive 5-cluster model\n\n\nShow the code\ngroups_ngc <- as.factor(cutree(nonGeo_clust, \n                               k = 5))\n\n\n\n\n6.3.1.4 combine groups_ngc with wp_ngaTrim\n\n\nShow the code\nnga_ngeo_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups_ngc)) %>%\n  rename(`cluster` = `as.matrix.groups_ngc.`)\n\n\n\n\n6.3.1.5 visualise Non-Spatially Constrained Hierarchical Cluster\n\n\nShow the code\nclusGeo_nSp.map <- tm_shape(nga_ngeo_clust.sf) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Non-Spatially Constrained \\n with ClustGeo Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_nSp.map\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Spatially Constrained Hierarchical Cluster Analysis\n\n\n\n\n\n\n6.3.2.1 determine Spatial Distance Matrix\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_distance( ) - sf - to derive the spatial distance matrix before perform spatially constrained hierarchical clustering.\nas.dist( ) - stats - to convert the data frame into matrix.\n\n\n\n\ndist <- st_distance(wp_ngaTrim, wp_ngaTrim)\ndist_mat <- as.dist(dist)\n\n\n6.3.2.2 determine Alpha value\n\n\n\n\n\n\nchoicealpha( ) - psych - to determine a suitable value for the mixing parameter alpha.\n\n\n\n\ncr <- choicealpha(\n  proxmat_ngc, \n  dist_mat, \n  range.alpha = seq(0, 1, 0.1), \n  K = 5, \n  graph = TRUE)\n\n\n\n\n\n\n\nRemarks :\nWith reference to the plot above, alpha = 0.5 to be used to perform spatially constrained hierarchical clustering.\n\n\n6.3.2.3 compute Spatially Constrained Hierarchical Clustering\n\n\nShow the code\nclustG <- hclustgeo(proxmat_ngc, \n                    dist_mat, \n                    alpha = 0.5)\n\n\n\n\n6.3.2.4 derive “cluster” Object\n\n\nShow the code\ngroups_cg <- as.factor(cutree(clustG, k = 5))\n\n\n\n\n6.3.2.5 combine groups_cg with wp_ngaTrim\n\n\nShow the code\nwp_nga_clustG <- cbind(wp_ngaTrim, as.matrix(groups_cg)) %>%\n  rename(`cluster` = `as.matrix.groups_cg.`)\n\n\n\n\n6.3.2.6 Visualise Spatially Constrained Hierarchical Clustering\n\n\nShow the code\nclusGeo_sp.map <- tm_shape(wp_nga_clustG) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with ClustGeo Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_sp.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#compare-clustering-method-visually",
    "href": "class_project/project_2/Regionalisation_scca.html#compare-clustering-method-visually",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "7.2 Compare Clustering Method Visually",
    "text": "7.2 Compare Clustering Method Visually\n\n\n\n\n\n\n\n\nShow the code\ntmap_arrange(clusGeo.map, \n             clusGeo_SKAT.map, \n             clusGeo_nSp.map, \n             clusGeo_sp.map, \n             redCap_sp.map,\n             ncol = 2)\n\n\n\n\n\nRemarks :\nThe output by both Hierarchical Clustering and Hierarchical Clustering by ClustGeo method are relatively similar.\nHowever, for spatially constrained clustering, ClustGeo method produce a desirable output compare to SKATER and RedCap methods."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#conclude-with-summary-statistics",
    "href": "class_project/project_2/Regionalisation_scca.html#conclude-with-summary-statistics",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "8.1 Conclude with Summary Statistics",
    "text": "8.1 Conclude with Summary Statistics\n\n\n\n\n\n\n\nnga_ngeo_clust.sf1 %>% \n  st_set_geometry(NULL) %>%\n  group_by(cluster) %>%\n  summarise(mean_pct_functional = mean(pct_functional),\n            mean_pct_nonFunctional = mean(pct_nonFunctional),\n            mean_pct_handPump = mean(pct_handPump), \n            mean_pct_tapStand = mean(pct_tapStand), \n            mean_pct_urban0 = mean(pct_urban0))\n\n# A tibble: 5 × 6\n  cluster mean_pct_functional mean_pct_nonFunctional mean_pct_…¹ mean_…² mean_…³\n  <chr>                 <dbl>                  <dbl>       <dbl>   <dbl>   <dbl>\n1 1                      38.8                   30.1        7.50  0.274     57.3\n2 2                      43.6                   42.7       62.1   1.33      88.8\n3 3                      33.3                   62.3       22.2   0.0885    94.4\n4 4                      53.7                   29.6       45.2   0.582     16.4\n5 5                      79.9                   19.7       83.7   0.0567    88.9\n# … with abbreviated variable names ¹​mean_pct_handPump, ²​mean_pct_tapStand,\n#   ³​mean_pct_urban0\n\n\nRemarks :\nNon-Functional Water Point\n\nMore than 90% of the water points in Cluster 3 are within non-urban communities, and approximately 62% of these water points are non-functional.\nAlthough Cluster 2 and Cluster 5 have similar percentage of approximately 88% water points falls within non-urban communities, the non-functional water points in Cluster 2 is more than twice the amount in Cluster 5 LGA.\n\nResources may required to attain more information regarding the stakeholder who task to maintain the water points that identified as non-functional but having status indicated otherwise.\n!!!! Analysis need to include parameter such as “status” to support the statement above.\n\nCluster 1, however, may require more resources to update the water point data. Unlike Cluster 2, 3, and 5 where more than 85% of water points are updated with data, only two-third of Cluster 1’s water points status and various attributes are known."
  },
  {
    "objectID": "Hands-on_Ex1-2.html",
    "href": "Hands-on_Ex1-2.html",
    "title": "Choropleth Mapping with R [2]",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\nE.g., use a choropleth map to portray the spatial distribution of aged population of <country>.\nThis exercise focuses on usage of tmap package to create choropleth map."
  },
  {
    "objectID": "Hands-on_Ex1-2.html#r-package-required",
    "href": "Hands-on_Ex1-2.html#r-package-required",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.2 R PACKAGE REQUIRED",
    "text": "2.2 R PACKAGE REQUIRED\nFollowing are the packages require for this exercise :\n\ntmap :\n\nqtm( )- to plot quick thematic map.\ntm_shape( ) - specify the shape object.\ntm_fill( ) / tm_polygons( ) - draw polygons.\ntm_layout( ) - layout of cartographic map.\ntm_borders( ) - draw polygon borders.\ntm_compass( ) - map compass.\ntm_scale_bar( ) - scale bar.\ntm_grid( ) - draw coordinate grid / graticule lines.\ntm_credits( ) - include credits text.\ntmap_style( ) - set or get the default tmap style.\ntmap_arrange( ) - create multiple stand-alone maps.\ntm_facets( ) - define a group-by variable.\n\nsf : st_read( ) - import shapefile as a simple feature data frame.\ntidyverse, consists the following functions :\n\nreadr :\n\nread_csv( ) - importing delimited text file.\nwrite_rds( ) - exports entire R object (metadata and all).\n\ntidyr :\n\npivot_wider( ) -“widens” data, increasing the number of columns and decreasing the number of rows.\n\ndplyr:\n\nmutate( ) - adds new variables and preserves existing ones.\nmutate_at( ) - affects variables selected with a character vector or vars( ).\nleft_join( ) - join geographical data and attribute table.\nfilter( )\ngroup_by( )\nselect( )\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#geospatial-data",
    "href": "Hands-on_Ex1-2.html#geospatial-data",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.3 GEOSPATIAL DATA",
    "text": "2.3 GEOSPATIAL DATA\n\n2.3.1 acquire data source\n\nMaster Plan 2014 Subzone Boundary (Web) : (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format from data.gov.sg\n\nThis is a geospatial data.\nConsists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 : csv format (i.e. respopagesextod2011to2020.csv) from Department of Statistics, Singapore\n\nThis is an aspatial data file.\nAlthough it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\n2.3.2 import data into R\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n2.3.3 examine the content of mpsz\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nsyntax of sample()\n\nsample(x, size, replace = FALSE, prob = NULL)\n\narguments :\n\n* x = vector or a data set.\n* size = sample size.\n* replace = with or without replacement of values.\n* prob = probability weights.\n\nmpsz[sample(2, ),]\n\nSimple feature collection with 2 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30177.73\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND   PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y       OUTRAM         OT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n\n\n\n\n\nmpsz[sample(2, ),] != mpsz[sample(2,),]\n\nwith space (2, ) = display 2nd OBJECTID first.\nwithout space (2,) = normal display first 2 rows.\n\nmpsz[sample(2, )] >> display only first 2 columns i.e. OBJECTID & SUBZONE\n\n\n\n2.3.4 import attribute data\n\npopdata <- read_csv(\"/jephOstan/ISSS624/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n2.3.5 prepare data\nPrepare data table to plot thematic map. The variables are :\n\nyoung : age group 0 to 4 until age groyup 20 to 24,\neconomy active : age group 25-29 until age group 60-64,\naged: age group 65 and above,\ntotal : all age group, and\ndependency : the ratio between young and aged against economy active group\n\n\n\n2.3.5.1 wrangling data\n\npivot_wider(\n  data,\n  id_cols = NULL, id_expand = FALSE, names_from = name, names_prefix = \"\",\n  names_sep = \"_\", names_glue = NULL, names_sort = FALSE, names_vary = \"fastest\",\n  names_expand = FALSE, names_repair = \"check_unique\", values_from = value,\n  values_fill = NULL, values_fn = NULL, unused_fn = NULL, ...\n)\n\narguments :\n\n* data = A data frame to pivot.\n\n* id_cols = A set of columns that uniquely identifies each observation. \n>> Defaults to all columns in data except for the columns specified in names_from and values_from. \n>> Typically used when have redundant variables, i.e. variables whose values are perfectly correlated with existing variables.\n\n* id_expand = Should the values in the id_cols columns be expanded by expand() before pivoting? \n>> This results in more rows, the output will contain a complete expansion of all possible values in id_cols. \n>> Implicit factor levels that aren't represented in the data will become explicit. \n>> Additionally, the row values corresponding to the expanded id_cols will be sorted.\n\n* names_from, values_from = A pair of arguments describing which column (or columns) to get the name of the output column (names_from), and which column (or columns) to get the cell values from (values_from).\n>> If values_from contains multiple values, the value will be added to the front of the output column.\nmore arguments for pivot_wider() …\n\nmutate(.data, ...,\n  .keep = c(\"all\", \"used\", \"unused\", \"none\"),\n  .before = NULL,\n  .after = NULL\n)\n\narguments :\n  \n* data = A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr)\n\n* ... = Name-value pairs. The name gives the name of the column in the output.\n\n* keep = Control which columns from .data are retained in the output. \n>> Grouping columns and columns created by ... are aways kept.\n\"all\" retains all columns from .data. This is the default.\n\n\"used\" retains only the columns used in ... to create new columns. This is useful for checking your work, as it displays inputs and outputs side-by-side.\n\n\"unused\" retains only the columns not used in ... to create new columns. This is useful if you generate new columns, but no longer need the columns used to generate them.\n\n\"none\" doesn't retain any extra columns from .data. Only the grouping variables and columns created by ... are kept.\n\n* .before, .after = Optionally, control where new columns should appear (the default is to add to the right hand side).\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n Useful mutate functions :\n\n+, -, log( ), etc., for their usual mathematical meanings\nlead( ), lag( )\ndense_rank( ), min_rank( ), percent_rank( ), row_number( ), cume_dist( ), ntile( )\ncumsum( ), cummean( ), cummin( ), cummax( ), cumany( ), cumall( )\nna_if( ), coalesce( )\nif_else( ), recode( ), case_when( )\n\n\n\n2.3.5.2 join attribute data and geospatial data\nThe 3 scoped variants of mutate( ) to transform multiple variables :\n\n_all affects every variable\n_at affects variables selected with a character vector or vars()\n_if affects variables selected with a predicate function.\n\n\nmutate_at(.tbl, .vars, .funs, ..., .cols = NULL)\n\narguments :\n\n* .tbl = A tbl object.\n\n* .funs = A function, a quosure style lambda ~ fun(.) or a list of either form.\n>> can be a named or unnamed list. If a function is unnamed and the name cannot be derived automatically, a name of the form \"fn#\" is used.\n\n* ... = Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.\n\n*.vars = A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL.\n\n* .cols = This argument has been renamed to .vars to fit dplyr's terminology and is deprecated.\n[Before the georelational join, convert the values in PA and SZ fields to uppercase.]{style=“color:#9e6024”}\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n[To ensure the output is a simple features data frame, join data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.]{style=“color:#9e6024”}\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(\n  x, file, compress = c(\"none\", \"gz\", \"bz2\", \"xz\"), version = 2,\n  refhook = NULL, text = FALSE, path = deprecated(), ...\n)\n\narguments : \n\n* file = The file path to read from/write to.\n\n* refhook = A function to handle reference objects.\n\n* x = R object to write to serialise.\n\n* compress = Compression method to use: \"none\", \"gz\" ,\"bz\", or \"xz\".\n\n* version = Serialization format version to be used. The default value is 2 as it's compatible for R versions prior to 3.5.0. See base::saveRDS() for more details.\n\n* text = If TRUE a text representation is used, otherwise a binary representation is used.\n\n* path = [Deprecated] Use the file argument instead.\n\n* ... = Additional arguments to connection function. For example, control the space-time trade-off of different compression methods with compression. See connections() for more details.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#choropleth-mapping-geospatial-data",
    "href": "Hands-on_Ex1-2.html#choropleth-mapping-geospatial-data",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.4 CHOROPLETH MAPPING GEOSPATIAL DATA",
    "text": "2.4 CHOROPLETH MAPPING GEOSPATIAL DATA\n2 tmap approaches to prepare thematic map :\n\nplot thematic map quickly using qtm( ).\nplot highly customisable thematic map.\n\n\n2.4.1 plot choropleth map with quick thematic map (qtm) function\n\nqtm(\n  shp, fill = NA, symbols.size = NULL, symbols.col = NULL, symbols.shape = NULL,\n  dots.col = NULL, text = NULL, text.size = 1, text.col = NA, lines.lwd = NULL,\n  lines.col = NULL, raster = NA, borders = NA, by = NULL, scale = NA, title = NA,\n  projection = NULL, bbox = NULL, basemaps = NA, overlays = NA, style = NULL,\n  format = NULL, ...\n)\n\narguments : \n\n* shp = One of -\n>> shape object, which is an object from a class defined by the sf or stars package. Objects from the packages sp and raster are also supported, but discouraged.\n\n>> Not specified, i.e. qtm() is executed. In this case a plain interactive map is shown.\n\n>> A OSM search string, e.g. qtm(\"Amsterdam\"). In this case a plain interactive map is shown positioned according to the results of the search query (from OpenStreetMap nominatim)\n\n\n* fill = either a color to fill the polygons, or name of the data variable in shp to draw a choropleth. \n>> Only applicable when shp contains polygons. \n>> Set fill = NULL to draw only polygon borders. See also argument borders.\nmore argument details…\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n2.4.2 plot choropleth map with tmap-elements\nArguments for the following function :\n\ntm_shape( ) - specify the shape object.\ntm_fill( ) - draw polygons.\n\n\nargument : \n\n* style = method to process the color scale when col is a numeric variable. \n\n>> Discrete gradient options are \"cat\", \"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\", \"dpih\", \"headtails\", and \"log10_pretty\". \n\n>> A numeric variable is processed as a categorical variable when using \"cat\", i.e. each unique value will correspond to a distinct category. \n\n>> For the other discrete gradient options (except \"log10_pretty\"), see the details in classIntervals (extra arguments can be passed on via style.args). \n\n>> Continuous gradient options are \"cont\", \"order\", and \"log10\". \n\n>> The numeric variable can be either regarded as a continuous variable or a count (integer) variable.\n\n* legend.hist = logical that determines whether a histogram is shown.\n\n* legend.hist.z = index value that determines the position of the histogram legend element.\n\n* legend.is.portrait = logical that determines whether the legend is in portrait mode (TRUE) or landscape (FALSE).\n\ntm_layout( ) - layout of cartographic map.\ntm_borders( ) - draw polygon borders.\n\n\ntm_borders(col = \"grey40\", lwd = 1, lty = \"solid\", alpha = NA)\n\nargument :\n\n* alpha = transparency number between 0 (totally transparent) and 1 (not transparent). \n>> By default, the alpha value of the col is used (normally 1).\n\n* col = border colour.\n\n* lwd = border line width.\n\n* lty = border line type.\n\ntm_compass( ) - map compass.\n\n\ntm_compass(north = 0, type = NA, text.size = 0.8, size = NA,\n  show.labels = 1, cardinal.directions = c(\"N\", \"E\", \"S\", \"W\"),\n  text.color = NA, color.dark = NA, color.light = NA, lwd = 1,\n  position = NA, bg.color = NA, bg.alpha = NA, just = NA, \n  fontsize = NULL\n)\n\narguments :\n  \n* type = compass type : \"arrow\", \"4star\", \"8star\", \"radar\", \"rose\". >> The default is controlled by tm_layout (which uses \"arrow\" for the default style)\n\n* size = size of the compass in number of text lines. \n>> The default values depend on the type: for \"arrow\" it is 2, for \"4star\" and \"8star\" it is 4, and for \"radar\" and \"rose\" it is 6.\n\ntm_scale_bar( ) - scale bar.\ntm_grid( ) - draw coordinate grid / graticule lines.\n\n\ntm_grid(x = NA, y = NA, n.x = NA, n.y = NA, projection = NA,\n  col = NA, lwd = 1, alpha = NA, labels.size = 0.6, labels.col = NA,\n  labels.rot = c(0, 0), labels.format = list(big.mark = \",\"),\n  labels.margin.x = 0, labels.margin.y = 0, labels.inside.frame = TRUE)\n\nargument :\n\n* alpha = transparency of the grid lines. Number between 0 and 1.\n>> By default, the alpha transparency of col is taken.\n\ntm_credits( ) - include credits text.\n\n\ntm_credits(text, size = 0.7, col = NA, alpha = NA, align = \"left\",\n  bg.color = NA, bg.alpha = NA, fontface = NA, fontfamily = NA,\n  position = NA, width = NA, just = NA\n)\n\nargument : \n* position = position of the text. Vector of two values, specifying the x and y coordinates. \n\n>> first value can be \"left\", \"LEFT\", \"center\", \"right\", or \"RIGHT\" >> second value can be \"top\", \"TOP\", \"center\", \"bottom\", or \"BOTTOM\"\n>> or this vector contains two numeric values between 0 and 1 that specifies the x and y value of the center of the text. \n>> The uppercase values correspond to the position without margins (so tighter to the frame).\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE,\n            asp = 0) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nFollowing are the steps to reproduce above map.\n\n2.4.2.1 step 1 - draw a base map\nBasic building block of tmap\n\nuse tm_shape( ) to define the input data\nthen use tm_fill( ) or tm_polygons( ) to draw polygons.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n2.4.2.2 step 2 - draw a choropleth map\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n2.4.2.3 draw a choropleth map with tm_fill( ) & tm_border( )\n\ntm_polygons( ) is a wraper of tm_fill( ) & tm_border( ).\ntm_fill( ) shades the polygons by using the default colour scheme.\ntm_borders( ) adds the borders of the shapefile onto the choropleth map.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n2.4.3 classify data with tmap\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n2.4.3.1 plot with jenks data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.2 plot with equal data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.3 plot with fixed data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fixed\",\n          breaks = c(0.0, 3.8, 7.6, 11.4, 15.2, 19.0)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.4 plot with sd data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.5 plot with kmeans data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.6 plot with hclust data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.7 plot with bclust data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n2.4.3.8 plot with fisher data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.9 plot with quantile data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\n\n2.4.4 plot with custom break\n\nTmap breaks require a minimum and maximum.\nIn order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore setting the break points, use summary( ) to compute descriptive statistics of the “DEPENDENCY” variable.\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\nSet break point at 0.60, 0.70, 0.80, and 0.90.\nNeed to include a minimum and maximum, which set at 0 and 100.\nBreaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#colour-scheme",
    "href": "Hands-on_Ex1-2.html#colour-scheme",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.5 COLOUR SCHEME",
    "text": "2.5 COLOUR SCHEME\n\n2.5.1 use ColorBrewer\nquick reference for ColorBrewer 2.0 colour options\n\nuse palette argument in tm_fill( )\n\nwithout “-” prefix, darker shade = higher value\nwith “-” prefix to reverse colour scheme, darker shade = smaller value\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#map-layouts",
    "href": "Hands-on_Ex1-2.html#map-layouts",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.6 MAP LAYOUTS",
    "text": "2.6 MAP LAYOUTS\n\n2.6.1 set map legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.6.2 set map style\n\nuse tmap_style( ) function.\nthe default style is “white”.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "Hands-on_Ex1-2.html#other-cartographic-furniture",
    "href": "Hands-on_Ex1-2.html#other-cartographic-furniture",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.7 OTHER CARTOGRAPHIC FURNITURE",
    "text": "2.7 OTHER CARTOGRAPHIC FURNITURE\nOther map furniture such as compass, scale bar, grid lines, etc.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n2.7.1 reset to default style\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "Hands-on_Ex1-2.html#multiple-small-choropleth-maps",
    "href": "Hands-on_Ex1-2.html#multiple-small-choropleth-maps",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.8 MULTIPLE SMALL CHOROPLETH MAPS",
    "text": "2.8 MULTIPLE SMALL CHOROPLETH MAPS\nSmall multiple maps (smm), also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically.\nIn tmap, can be plotted in 3 ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets( ), and\nby creating multiple stand-alone maps with tmap_arrange( ).\n\n\n2.8.1 plot smm by define ncols in tm_fill( )\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n2.8.2 assign multiple values for aesthetic arguments\n\n2 or more different styles, colours, etc.\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n2.8.3 define a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n2.8.4 create multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#mapping-spatial-object-with-selection-criterion",
    "href": "Hands-on_Ex1-2.html#mapping-spatial-object-with-selection-criterion",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.9 MAPPING SPATIAL OBJECT WITH SELECTION CRITERION",
    "text": "2.9 MAPPING SPATIAL OBJECT WITH SELECTION CRITERION\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex1-2.html#references",
    "href": "Hands-on_Ex1-2.html#references",
    "title": "Choropleth Mapping with R [2]",
    "section": "2.10 REFERENCES",
    "text": "2.10 REFERENCES\n\nDatacamp. Writing.rds files. https://campus.datacamp.com/courses/reading-data-into-r-with-readr/importing-data-with-readr?ex=7\nDplyr.tidyverse.org. Mutate multiple columns. https://dplyr.tidyverse.org/reference/mutate_all.html\nqtm: Quick thematic map plot. https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/qtm\nr4gdsa.netlify.app. https://r4gdsa.netlify.app/chap02.html#data-preparation\nRdocumentation.org. tm_shape: Specify the shape object. https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_shape\nTidyr.tidyverse.org. Pivot data from long to wide. https://tidyr.tidyverse.org/reference/pivot_wider.html"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-redcap-method",
    "href": "class_project/project_2/Regionalisation_scca.html#spatially-constrained-clustering-redcap-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.4 Spatially Constrained Clustering :: RedCap Method",
    "text": "6.4 Spatially Constrained Clustering :: RedCap Method\n\n6.4.1 Derive Queen Contiguity Spatial Weights\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nqueen_weights( ) - rgeoda - to create a Queen contiguity weights.\n\n\n\n\n\nShow the code\nnga_queenW <- queen_weights(wp_ngaTrim)\n\nnga_queenW\n\n\nReference class object of class \"Weight\"\nField \"gda_w\":\nAn object of class \"p_GeoDaWeight\"\nSlot \"pointer\":\n<pointer: 0x000002462b7bb6d0>\n\nField \"is_symmetric\":\n[1] TRUE\nField \"sparsity\":\n[1] 0.00750793\nField \"min_neighbors\":\n[1] 1\nField \"max_neighbors\":\n[1] 14\nField \"num_obs\":\n[1] 761\nField \"mean_neighbors\":\n[1] 5.713535\nField \"median_neighbors\":\n[1] 6\nField \"has_isolates\":\n[1] FALSE\n\n\n\n\n\n\n\n6.4.2 Compute Spatially Constrained Cluster\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nredcap( ) - rgeoda - to compute spatially constrained cluster based on three (3) mandatory arguments:-\n\nk, the number of clusters to form\nw, an instance of Weight class\ndf, data frame with cluster variables\n\n\n\n\n\n\nShow the code\nset.seed(12345)\n\nclust_rCap <- redcap(5, \n                     nga_queenW, \n                     wp_stdMM, \n       method = \"fullorder-singlelinkage\",\n       scale_method = 'raw',\n       distance_method = \"euclidean\",\n       random_seed = 12345)\n\nstr(clust_rCap)\n\n\nList of 5\n $ Clusters                                    : int [1:761] 2 2 2 2 2 1 1 2 3 2 ...\n $ Total sum of squares                        : num 3800\n $ Within-cluster sum of squares               : num [1:5] 500 640 397 734 648\n $ Total within-cluster sum of squares         : num 880\n $ The ratio of between to total sum of squares: num 0.232\n\n\n\n\n\n\n\n6.4.3 Reveal Cluster Assignment\n\n\nShow the code\nredCap_cluster <- clust_rCap$Cluster\n\ntable(redCap_cluster)\n\n\nredCap_cluster\n  1   2   3   4   5 \n342 339  50  20  10 \n\n\n\n\n6.4.4 Visualise Spatially Constrained Cluster\n\n\nShow the code\nredCap_mat <- as.matrix(redCap_cluster)\n\nwp_nga_redCap <- cbind(wp_ngaTrim, as.factor(redCap_mat)) %>%\n  rename(`cluster`=`as.factor.redCap_mat.`)\n\n\n\n\nShow the code\nredCap_sp.map <- tm_shape(wp_nga_redCap) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with RedCap Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nredCap_sp.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html",
    "title": "Explore non-functional water points in Nigeria",
    "section": "",
    "text": "Explore non-functional water points by attributes\n\n\n\n\n\n\nExplore the relationship between non-functional water points and other attributes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater points in Federal Republic of Nigeria\n\n\n\n\n\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\n\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\nVegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.3 https://rainforests.mongabay.com/20nigeria.htm\n\n\n\n\n\n\n\n\n\n\n\nSpecific tasks required for this study :\n\n\n\n\n\n\nExplore the non-functional water points that recently rehabilitated."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#load-r-packages",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#load-r-packages",
    "title": "Explore non-functional water points in Nigeria",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#acquire-data-source",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#acquire-data-source",
    "title": "Explore non-functional water points in Nigeria",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe file size of the downloaded data is about 422 MB due to water points data from multiple countries.\n\nSuch file size may require extra effort and time to manage the code chunks and files in the R environment before pushing them to GitHub.\n\nHence, to avoid any error in pushing files larger than 100 MB to Git, filtered Nigeria water points and removed unnecessary variables before uploading into the R environment.\nTherewith, the CSV file size should be lesser than 100 MB.\n\n\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level4 from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n4 Runfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#import-attribute-data",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#import-attribute-data",
    "title": "Explore non-functional water points in Nigeria",
    "section": "3.2 Import Attribute Data",
    "text": "3.2 Import Attribute Data\nFour (4) data frames to be created for different context, i.e.\n\nwp_coord = coordinated related variables.\nwp_cond = status and conditions related variables.\nwp_adm = administrative and measurements related variables.\nwp = master file that combine all three (3) data frames above.\n\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_coord3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nproblems(wp_coord3)\n\n\n\n\n\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_coord3,\"data/geodata/wp_coord3.rds\")\n\n\n\nwp_coord3 <- read_rds(\"data/geodata/wp_coord3.rds\")\n\n\n\n\n\n\n3.2.1.2 review data frame :: wp_coord\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_coord3)\n\n\n\nData summary\n\n\nName\nwp_coord3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1\n23\n45\n0\n14\n0\n\n\nlat_lon_deg\n0\n1\n20\n42\n0\n14\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.07\n160075.61\n160655.00\n599593.25\n602012.00\n602021.50\n602058.00\n▁▁▁▁▇\n\n\nlat_deg\n0\n1\n7.46\n1.85\n6.31\n6.76\n6.78\n6.80\n11.83\n▇▁▁▁▁\n\n\nlon_deg\n0\n1\n8.29\n2.06\n6.95\n7.60\n7.61\n7.66\n13.15\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_cond3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`,\n                                    `#status_id`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`,\n         status_id = `#status_id`)\n\nproblems(wp_cond3)\n\n\n\n\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_cond3,\"data/geodata/wp_cond3.rds\")\n\n\n\nwp_cond3 <- read_rds(\"data/geodata/wp_cond3.rds\")\n\n\n\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_cond3)\n\n\n\nData summary\n\n\nName\nwp_cond3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nwater_source\n0\n1.00\n20\n29\n0\n3\n0\n\n\nwater_source_clean\n0\n1.00\n8\n8\n0\n1\n0\n\n\nwater_source_category\n0\n1.00\n4\n4\n0\n1\n0\n\n\nwater_tech_clean\n1\n0.93\n9\n26\n0\n6\n0\n\n\nwater_tech_category\n1\n0.93\n9\n15\n0\n2\n0\n\n\nstatus_clean\n10\n0.29\n14\n14\n0\n1\n0\n\n\nstatus\n10\n0.29\n34\n34\n0\n1\n0\n\n\nstatus_id\n0\n1.00\n3\n3\n0\n1\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.1\n160075.6\n160655\n599593.2\n602012\n602021.5\n602058\n▁▁▁▁▇\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Import Admistrative and Measure-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_adm3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`\n                                   )) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nproblems(wp_adm3)\n\n\n\n\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_adm3,\"data/geodata/wp_adm3.rds\")\n\n\n\nwp_adm3 <- read_rds(\"data/geodata/wp_adm3.rds\")\n\n\n\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_adm3)\n\n\n\nData summary\n\n\nName\nwp_adm3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nlogical\n2\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nclean_adm1\n0\n1\n5\n5\n0\n2\n0\n\n\nclean_adm2\n0\n1\n3\n9\n0\n6\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nrehab_priority\n14\n0\nNaN\n:\n\n\nis_urban\n0\n1\n0.14\nFAL: 12, TRU: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.07\n160075.61\n160655.00\n599593.25\n602012.00\n602021.50\n602058.00\n▁▁▁▁▇\n\n\nwater_point_population\n0\n1\n1866.29\n2025.16\n32.00\n414.75\n591.50\n3421.50\n6693.00\n▇▂▃▁▁\n\n\nlocal_population_1km\n0\n1\n5542.86\n9470.86\n74.00\n1582.00\n2759.00\n5025.50\n37211.00\n▇▂▁▁▁\n\n\ncrucialness_score\n0\n1\n0.47\n0.26\n0.08\n0.35\n0.46\n0.50\n1.00\n▃▇▇▁▃\n\n\npressure_score\n0\n1\n5.04\n4.99\n0.11\n1.22\n1.97\n8.37\n12.82\n▇▁▁▂▃\n\n\nusage_capacity\n0\n1\n400.00\n254.20\n300.00\n300.00\n300.00\n300.00\n1000.00\n▇▁▁▁▁\n\n\nstaleness_score\n0\n1\n82.95\n6.78\n80.07\n80.07\n80.07\n81.03\n98.93\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.4 Create Master File\n\n\n\n\n\n\n\n\nShow the code\nwp3 <- left_join(\n  (left_join\n   (wp_coord3,wp_cond3,\n     by = c(\"row_id\")\n     )),\n  wp_adm3, \n  by = c(\"row_id\"))\n\n\n\n\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\n\n\n\n\n\n\n\n\nShow the code\nwp3$geometry = st_as_sfc(wp3$`New Georeferenced Column`)\n\n\n\n\n\n\n\n3.2.5.2 convert to SF Data Frame\n\n\n\n\n\n\n\n\nShow the code\nwp3_sf<- st_sf(wp3, crs = 4326)\nst_crs(wp3_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#import-boundary-data",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#import-boundary-data",
    "title": "Explore non-functional water points in Nigeria",
    "section": "3.3 Import Boundary Data",
    "text": "3.3 Import Boundary Data\n\n\n\n\n\n\n\n\nShow the code\nbdy_nga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nproblems(bdy_nga)\n\n\n\n\n\n\n3.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(bdy_nga,\"data/geodata/bdy_nga.rds\",compress = \"xz\")\n\n\n\nbdy_nga <- read_rds(\"data/geodata/bdy_nga.rds\")\n\n\n\n\n\n\n3.3.2 Review Imported File\n\n3.3.2.1 check for missing and duplicated data\n\n\n\n\n\n\n\n\nShow the code\nskim(bdy_nga)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_nga\n\n\nNumber of rows\n774\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nshapeName\n0\n1\n3\n18\n0\n768\n0\n\n\ngeometry\n0\n1\n878\n33370\n0\n774\n0\n\n\n\n\n\nRemarks :\n\nThere is no missing data.\nUnder “n_unique”, there is 774 unique “geometry” but only 768 unique “shapeName”.\n\nThat’s mean there are 6 values of “shapeName” duplicated among the identified unique shapeNames.\n\n\n\n\n\n\n\n3.3.2.2 list the unique “shapeName” associated with duplication\n\n\n\n\n\n\n\n\nShow the code\ndupl_shapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nfreq(dupl_shapeName$shapeName)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n       var frequency percentage cumulative_perc\n1    Bassa         2      16.67           16.67\n2 Ifelodun         2      16.67           33.34\n3 Irepodun         2      16.67           50.01\n4 Nasarawa         2      16.67           66.68\n5      Obi         2      16.67           83.35\n6 Surulere         2      16.67          100.00\n\n\n\n\n\n\n\n3.3.2.3 verify findings in section 3.3.1.2\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(dupl_shapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nRemarks :\nThe plot above indicates those duplicated water points are not within the same location.\n\n\n\n\n\n3.3.2.4 acquire State info for duplicated value\n\n\n\n\n\n\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\nShow the code\ndupl_shapeName %>%\n  mutate(st_centroid(\n    dupl_shapeName$geometry, of_largest_polygon = FALSE))\n\n\nSimple feature collection with 12 features and 2 fields\nActive geometry column: geometry\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n   st_centroid(dupl_shapeName$geometry, of_largest_polygon = FALSE)\n1                                         POINT (7.031827 7.791971)\n2                                         POINT (8.782946 10.08015)\n3                                         POINT (5.052235 8.544311)\n4                                         POINT (4.636735 7.920948)\n5                                         POINT (4.926215 8.169349)\n6                                          POINT (4.498797 7.84861)\n7                                         POINT (8.578262 12.00446)\n8                                         POINT (7.760272 8.304034)\n9                                         POINT (8.281026 7.022495)\n10                                         POINT (8.734777 8.35534)\n\n\nShow the code\nglimpse(dupl_shapeName)\n\n\nRows: 12\nColumns: 3\n$ shapeName           <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ `bdy_nga$shapeName` <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ geometry            <MULTIPOLYGON [°]> MULTIPOLYGON (((6.708541 7...., MULTI…\n\n\n\n\n\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\ndupl_shapeName_coord\nlga_office_coord\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.791971, 7.031827\n7.80932, 6.74853\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n10.08015, 8.782946\n10.11143, 8.71559\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.544311, 5.052235\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.920948, 4.636735\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.169349, 4.926215\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.84861, 4.498797\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n12.00446, 8.578262\n11.5, 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.304034, 7.760272\n8.53477, 7.70153\n\n\nObi\n546\nObarike-Ito\nBenue\nNG.BE.OB\n7.022495, 8.281026\n7.01129, 8.33118\n\n\nObi\n547\nObi\nNasarawa\nNG.NA.OB\n8.35534, 8.734777\n8.37944, 8.78561\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.493217, 3.346919\n6.50048, 3.35488\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.088897, 4.393574\n8.08459, 4.38538"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#data-wrangling",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#data-wrangling",
    "title": "Explore non-functional water points in Nigeria",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1 Edit Duplicated Value :: “shapeName”\n\n\n\n\n\n\nTwo (2) Main Steps involved :\n\nCombine “shapeName” with the State name to make each of them unique.\nReplace the “shapeName” value according to each row index.5\n\n5 Ong Z.R.J. (2022). Geospatial Analytics for Social Good - Understanding Nigeria Water functional and non-functional water point rate. https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#checking-of-duplicated-area-name\n\nShow the code\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- \n  c(\"Bassa Kogi\",\n    \"Bassa Plateau\",\n    \"Ifelodun Kwara\",\n    \"Ifelodun Osun\",\n    \"Irepodun Kwara\",\n    \"Irepodun Osun\",\n    \"Nasarawa Kano\",\n    \"Nasarawa Nasarawa\",\n    \"Obi Nasarawa\",\n    \"Obi Benue\",\n    \"Surulere Lagos\",\n    \"Surulere Oyo\")\n\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)]\n\n\n [1] \"Bassa Kogi\"        \"Bassa Plateau\"     \"Ifelodun Kwara\"   \n [4] \"Ifelodun Osun\"     \"Irepodun Kwara\"    \"Irepodun Osun\"    \n [7] \"Nasarawa Kano\"     \"Nasarawa Nasarawa\" \"Obi Nasarawa\"     \n[10] \"Obi Benue\"         \"Surulere Lagos\"    \"Surulere Oyo\"     \n\n\n\n3.4.1.1 validate edited value :: “shapeName”\n\n\nShow the code\ndupl_shapeName_val <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\ndupl_shapeName_val\n\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName         bdy_nga$shapeName geometry         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\n\n\n\n3.4.2 Perform Point-in-Polygon Overlay\n\n\n\n\n\n\nCombine both attribute and boundary of the water points into a simple feature object.\n\n3.4.2.1 join objects :: wp_sf, bdy_nga\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\n\n\nShow the code\nwp_joined3 <- st_join(x = wp3_sf,\n                     y = bdy_nga,\n                     join = st_intersects,\n                     left = TRUE)\n\nskim(wp_joined3)\n\n\nRemarks :\nThere are only 14 Nigeria water points that are fully rehabilitated.\n\n\n-- save and read RDS File :: wp_joined\n\n\nShow the code\nwrite_rds(wp_joined3,\"data/geodata/wp_joined3.rds\")\n\n\n\nwp_joined3 <- read_rds(\"data/geodata/wp_joined3.rds\") %>%\n  mutate(status = replace_na(status, \"Unknown\")) %>%\n  mutate(water_tech_clean = replace_na(water_tech_clean, \"Unknown\")) %>%\n  mutate(water_tech_category = replace_na(water_tech_category, \"Unknown\"))\n\n\n\n3.4.2.2 inspect joined file :: wp_joined\n\n\n-- assess uniqueness of Water Point\n\nwp_joined3 %>% janitor::get_dupes(shapeName,lat_lon_deg)\n\nNo duplicate combinations found of: shapeName, lat_lon_deg\n\n\nSimple feature collection with 0 features and 25 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n# A tibble: 0 × 26\n# … with 26 variables: shapeName <chr>, lat_lon_deg <chr>, dupe_count <int>,\n#   row_id <dbl>, lat_deg <dbl>, lon_deg <dbl>, New Georeferenced Column <chr>,\n#   water_source <chr>, water_source_clean <chr>, water_source_category <chr>,\n#   water_tech_clean <chr>, water_tech_category <chr>, status_clean <chr>,\n#   status <chr>, status_id <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   water_point_population <dbl>, local_population_1km <dbl>,\n#   crucialness_score <dbl>, pressure_score <dbl>, usage_capacity <dbl>, …\n\n\nRemarks :\nEach water point observation is unique as there are no duplicate combination of “shapeName” together with “lat_lon_deg”.\n\n\n-- determine reference point :: “shapeName” or “clean_adm2”\n\n\nShow the code\nwp_reference <- (wp_joined3$shapeName == wp_joined3$clean_adm2)\n\nsummary(wp_reference)\n\n\n   Mode   FALSE    TRUE \nlogical       4      10 \n\n\nRemarks :\n\nThere are 4 “FALSE”, which is approximately 28% of LGA names mismatched between “shapeName” and “clean_adm2”.\n\nSince the geoBoundaries data is collected from government-published and reliable internet sources.6\n\nHence, the “shapeName” variable to be used throughout this study.\n\n\n\n6 Daniel et. al (2020) geoBoundaries: A global database of political administrative boundaries. PlosOne. https://doi.org/10.1371/journal.pone.0231866\n\n-- review “status”\n\n\nShow the code\nunique(wp_joined3$status)\n\n\n[1] \"Unknown\"                            \"Non-functional Technical breakdown\"\n\n\n\n\n3.4.2.3 save and read RDS file :: wp_joined3\nSave the updated values into wp_joined1 RDS file.\n\n\nShow the code\nwrite_rds(wp_joined3,\"data/geodata/wp_joined3.rds\")\n\n\n\nwp_joined3 <- read_rds(\"data/geodata/wp_joined3.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_rehab.html#extract-water-point-by-attribute",
    "href": "class_project/project_2/Regionalisation_scca_rehab.html#extract-water-point-by-attribute",
    "title": "Explore non-functional water points in Nigeria",
    "section": "3.5 Extract Water Point by Attribute",
    "text": "3.5 Extract Water Point by Attribute\n\n3.5.1 Extract Non-Functional Water Point :: wpt_nonFunctional3\n\n\n\n\n\n\n\n\nShow the code\nwpt_nonFunctional3 <- wp_joined3 %>%\n  filter(status %in% \"Non-functional Technical breakdown\")\n\n\n\n3.5.1.1 save and read RDS file :: wpt_functional\n\n\nShow the code\nwrite_rds(wpt_nonFunctional3,\"data/geodata/wpt_nonFunctional3.rds\")\n\n\n\nwpt_nonFunctional3 <- read_rds(\"data/geodata/wpt_nonFunctional3.rds\")\n\n\n\n3.5.1.2 compute data table for clustering analysis\n\n\nShow the code\nwp_nga3 <- bdy_nga %>%\n  mutate(`total_nonFunctional` = lengths(\n    st_intersects(bdy_nga, wpt_nonFunctional3)))\n\n\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$is_urban)\n\n\n      n   % val%\nFALSE 4 100  100\n\n\nRemarks :\nThese four (4) water points fall within non-urban communities.\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$status_id)\n\n\n    n   % val%\nYes 4 100  100\n\n\nRemarks :\nWater is available in all these non-functional water points.\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$pressure_score)\n\n\n          n  % val%\n1.906667  1 25   25\n8.296667  1 25   25\n12.41     1 25   25\n12.713333 1 25   25\n\n\nRemarks :\nAll water points are over its usage capacity.\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\nnfunc.map3 <- tm_shape(wpt_nonFunctional3) + \n  tm_view(set.zoom.limits = c(11,13)) +\n  tm_dots(col = \"pressure_score\",\n          title = \"Non-Functional\",\n          breaks = c(0,3,6,9,12,15),\n          palette = \"Blues\") +\n  tm_layout(main.title = \"Pressure Score for \\n non-Functional Water Points\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0) +\n  tmap_style(\"bw\")\n\n\ntmap style set to \"bw\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"classic\", \"watercolor\" \n\n\nShow the code\nnfunc.map3\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\n3.5.3 Extract Water Points by “water_tech_category”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined3$water_tech_clean)\n\n\n\n\n\n                         var frequency percentage cumulative_perc\n1  Hand Pump - India Mark II         5      35.71           35.71\n2 Hand Pump - India Mark III         4      28.57           64.28\n3                  Hand Pump         1       7.14           71.42\n4        Hand Pump - Afridev         1       7.14           78.56\n5            Mechanized Pump         1       7.14           85.70\n6    Mechanized Pump - Solar         1       7.14           92.84\n7                    Unknown         1       7.14          100.00\n\n\nShow the code\nfreq(wp_joined3$water_tech_clean[wp_joined3$status == \"Non-functional Technical breakdown\"])\n\n\n\n\n\n                         var frequency percentage cumulative_perc\n1  Hand Pump - India Mark II         3         75              75\n2 Hand Pump - India Mark III         1         25             100\n\n\nRemarks :\nAmong the six (6) known water tech deployed to these 14 water points, two of these tech contributed to all these rehabilitated but non-functional due to technical breakdown.\n\n\nShow the code\nwtc_hPump3 <- wp_joined3 %>%\n  filter(water_tech_clean %in%\n           c(\"Hand Pump - India Mark II\",\n             \"Hand Pump - India Mark III\",\n             \"Hand Pump - India Mark III\",\n             \"Hand Pump\",\n             \"Hand Pump - Afridev\"\n             ))\n\n\n\nwtc_iMii <- wtc_hPump3 %>%\n  filter(water_tech_clean %in%\n           \"Hand Pump - India Mark II\")\n\nwtc_iMiii <- wp_joined3 %>%\n  filter(water_tech_clean %in%\n           \"Hand Pump - India Mark III\")\n\nwp_nga3 <- wp_nga3 %>%\n  mutate(`total_hPump` = lengths(\n    st_intersects(bdy_nga, wtc_hPump3)\n    )) %>%\n  mutate(`total_iMii` = lengths(\n    st_intersects(bdy_nga, wtc_iMii)\n    )) %>%\n  mutate(`total_iMiii` = lengths(\n    st_intersects(bdy_nga, wtc_iMiii)\n    )) %>%      \n  mutate(`pct_iMii` = (`total_iMii`/`total_hPump`*100)) %>%\n  mutate(`pct_iMiii` = (`total_iMiii`/`total_hPump`*100))"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html",
    "href": "class_project/project_2/Regionalisation_scca_v2.html",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "",
    "text": "case study : Regionalisation by Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#objectives",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#objectives",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\n\n\n\n\n\n\nRegionalise Nigeria based on water points’ attribute\n\n\n\n\n\n\nTotal number of water points by status, i.e. functional, non-functional, and unknown;\nPercentage of water points by :\n\nstatus (functional, non-functional, and unknown);\ndeployed water technology (hand pump, mechanical pump, stand tap, etc.) ;\nusage capacity (1000, 300, 250, 50);\nrural or urban."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#study-area-introduction",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#study-area-introduction",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.2 Study Area Introduction",
    "text": "1.2 Study Area Introduction\n\n\n\n\n\n\nWater points in Federal Republic of Nigeria\n\n\n\n\n\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\n\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\nVegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.3 https://rainforests.mongabay.com/20nigeria.htm"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#scope-of-works",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#scope-of-works",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "1.3 Scope of Works",
    "text": "1.3 Scope of Works\n\n\n\n\n\n\nSpecific tasks required for this study :\n\n\n\n\n\n\nimport the shapefile into R with the appropriate sf method, and save it in a simple feature data frame format;\n\n\n\n\n\n\n\nNote\n\n\n\nThree (3) Projected Coordinate Systems of Nigeria, EPSG : 26391, 26392, and 26303.\n\n\n\nderive the proportion of functional and non-functional water points at LGA level (i.e. ADM2) by appropriate tidyr and dplyr methods;\ncombine geospatial and aspatial data frames into a simple feature data frame.\ndelineate water points measures functional regions by using :\n\nconventional hierarchical clustering.\nspatially constrained clustering algorithms.\n\nplot two (2) main types of maps below :\nThematic Mapping\nShow the derived water-point measures by appropriate statistical graphics and choropleth mapping technique.\nAnalytical Mapping\nPlot delineated functional regions using non-spatially constrained and spatially constrained clustering algorithms."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#load-r-packages",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#load-r-packages",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#acquire-data-source",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#acquire-data-source",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe file size of the downloaded data is about 422 MB due to water points data from multiple countries.\n\nSuch file size may require extra effort and time to manage the code chunks and files in the R environment before pushing them to GitHub.\n\nHence, to avoid any error in pushing files larger than 100 MB to Git, filtered Nigeria water points and removed unnecessary variables before uploading into the R environment.\nTherewith, the CSV file size should be lesser than 100 MB.\n\n\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level4 from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n4 Runfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#import-attribute-data",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#import-attribute-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.2 Import Attribute Data",
    "text": "3.2 Import Attribute Data\nFour (4) data frames to be created for different context, i.e.\n\nwp_coord = coordinated related variables.\nwp_cond = status and conditions related variables.\nwp_adm = administrative and measurements related variables.\nwp = master file that combine all three (3) data frames above.\n\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to import and save the comma separated value (CSV) file as a data frame, with title “wp_coord”.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nwp_coord <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nproblems(wp_coord)\n\n\nRemarks :\nUpload and create new data frames according to the context of the variables. Therewith, these data frames can be used as and when the requirements fit the context thereof.\n\n\n\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nwrite_rds( ) - readr - to save wp_coord data table into an RDS format.\nnote : reduce the file size with this function -> compress = “xz”.\nread_rds( ) - readr - to read wp_coord RDS file into wp_coord.\n\n\n\n\n\nShow the code\nwrite_rds(wp_coord,\"data/geodata/wp_coord.rds\",compress = \"xz\")\n\n\n\nwp_coord <- read_rds(\"data/geodata/wp_coord.rds\")\n\n\n\n\n\n\n3.2.1.2 review data frame :: wp_coord\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nskim( ) - skimr - to get a broad overview of wp_coord data frame.\n\n\n\n\n\nShow the code\nskim(wp_coord)\n\n\n\nData summary\n\n\nName\nwp_coord\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1\n11\n45\n0\n95008\n0\n\n\nlat_lon_deg\n0\n1\n8\n42\n0\n95008\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nlat_deg\n0\n1\n9.33\n2.48\n4.30\n7.36\n9.09\n11.83\n13.87\n▃▇▅▅▆\n\n\nlon_deg\n0\n1\n7.50\n2.25\n2.71\n5.52\n7.89\n9.08\n14.22\n▃▃▇▃▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_cond <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`,\n                                    `#status_id`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`,\n         status_id = `#status_id`)\n\nproblems(wp_cond)\n\n\n\n\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_cond,\"data/geodata/wp_cond.rds\",compress = \"xz\")\n\n\n\nwp_cond <- read_rds(\"data/geodata/wp_cond.rds\")\n\n\n\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_cond)\n\n\n\nData summary\n\n\nName\nwp_cond\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nwater_source\n0\n1.00\n3\n32\n0\n16\n0\n\n\nwater_source_clean\n302\n1.00\n8\n22\n0\n5\n0\n\n\nwater_source_category\n302\n1.00\n4\n11\n0\n3\n0\n\n\nwater_tech_clean\n10055\n0.89\n8\n26\n0\n11\n0\n\n\nwater_tech_category\n10055\n0.89\n8\n15\n0\n4\n0\n\n\nstatus_clean\n10656\n0.89\n9\n32\n0\n8\n0\n\n\nstatus\n10656\n0.89\n14\n156\n0\n834\n0\n\n\nstatus_id\n0\n1.00\n2\n7\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n199975.5\n189726.1\n10732\n52632.75\n86952.5\n323671.5\n681838\n▇▃▂▂▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Import Admistrative and Measure-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_adm <- read_csv(\"data/aspatial/WPdx_NGAv1.2.1.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`)) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nproblems(wp_adm)\n\n\n\n\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_adm,\"data/geodata/wp_adm.rds\",compress = \"xz\")\n\n\n\nwp_adm <- read_rds(\"data/geodata/wp_adm.rds\")\n\n\n\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_adm)\n\n\n\nData summary\n\n\nName\nwp_adm\n\n\nNumber of rows\n95008\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nlogical\n1\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nclean_adm1\n0\n1\n3\n25\n0\n37\n0\n\n\nclean_adm2\n0\n1\n3\n19\n0\n753\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nis_urban\n0\n1\n0.21\nFAL: 75444, TRU: 19564\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n199975.48\n189726.13\n10732.00\n52632.75\n86952.50\n323671.50\n681838.00\n▇▃▂▂▁\n\n\nwater_point_population\n539\n0.99\n1246.32\n4027.41\n0.00\n117.00\n413.00\n1169.00\n384595.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n539\n0.99\n3723.15\n7417.59\n0.00\n597.00\n1756.00\n4393.00\n384595.00\n▇▁▁▁▁\n\n\ncrucialness_score\n6879\n0.93\n0.41\n0.34\n0.00\n0.13\n0.30\n0.63\n1.00\n▇▅▃▁▅\n\n\npressure_score\n6879\n0.93\n3.21\n9.04\n0.00\n0.40\n1.18\n3.10\n776.97\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n488.63\n310.95\n50.00\n300.00\n300.00\n1000.00\n1000.00\n▁▇▁▁▃\n\n\nstaleness_score\n0\n1.00\n44.94\n6.29\n23.13\n41.49\n42.87\n44.34\n99.00\n▁▇▁▁▁\n\n\nrehab_priority\n53109\n0.44\n1545.45\n5243.53\n0.00\n136.50\n522.00\n1527.00\n384595.00\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.4 Create Master File\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to combine wp_coord, wp_cond and wp_adm.\n\n\n\n\n\nShow the code\nwp <- left_join(\n  (left_join\n   (wp_coord,wp_cond,\n     by = c(\"row_id\")\n     )),\n  wp_adm, \n  by = c(\"row_id\"))\n\n\n\n\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_as_sfc( ) - sf - to convert foreign geometry object `New Georeferenced Column` to an sfc object\n\n\n\n\n\nShow the code\nwp$geometry = st_as_sfc(wp$`New Georeferenced Column`)\n\n\n\n\n\n\n\n3.2.5.2 convert to SF Data Frame\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_sf( ) - sf - to convert the tibble data frame into sf data frame with crs first set to WGS 84 (EPSG : 4326).\nst_crs( ) - sf - to retrieve coordinate reference system from the object.\n\n\n\n\n\nShow the code\nwp_sf<- st_sf(wp, crs = 4326)\nst_crs(wp_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#import-boundary-data",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#import-boundary-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.3 Import Boundary Data",
    "text": "3.3 Import Boundary Data\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_read( ) - sf - to read simple features.\nselect( ) - dplyr - to select “shapeName” variable.\n\n\n\n\n\nShow the code\nbdy_nga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nproblems(bdy_nga)\n\n\n\n\n\n\n3.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(bdy_nga,\"data/geodata/bdy_nga.rds\",compress = \"xz\")\n\n\n\nbdy_nga <- read_rds(\"data/geodata/bdy_nga.rds\")\n\n\n\n\n\n\n3.3.2 Review Imported File\n\n3.3.2.1 check for missing and duplicated data\n\n\n\n\n\n\n\n\nShow the code\nskim(bdy_nga)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_nga\n\n\nNumber of rows\n774\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nshapeName\n0\n1\n3\n18\n0\n768\n0\n\n\ngeometry\n0\n1\n878\n33370\n0\n774\n0\n\n\n\n\n\nRemarks :\n\nThere is no missing data.\nThere 774 unique “geometry” but only 768 unique “shapeName”\n\nThat’s mean there are 6 values of “shapeName” duplicated among the identified unique shapeNames.\n\n\n\n\n\n\n\n3.3.2.2 list the unique “shapeName” associated with duplication\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nadd_count( ) - dplyr - to count observations by group\nfilter( ) - dplyr - to retain shapeName that has count not equal to 1.\n\n\n\n\n\nShow the code\ndupl_shapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nfreq(dupl_shapeName$shapeName)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n       var frequency percentage cumulative_perc\n1    Bassa         2      16.67           16.67\n2 Ifelodun         2      16.67           33.34\n3 Irepodun         2      16.67           50.01\n4 Nasarawa         2      16.67           66.68\n5      Obi         2      16.67           83.35\n6 Surulere         2      16.67          100.00\n\n\n\n\n\n\n\n3.3.2.3 verify findings in section 3.3.1.2\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ntmap_mode( ) - tmap - to set tmap mode to static plotting or interactive.\ntm_shape( ) - tmap - to specify the shape object.\ntm_polygons( ) - tmap - to fill the polygons and draw the polygon borders.\ntm_view( ) - tmap - to set the options for the interactive tmap viewer.\ntm_fill( ) - tmap - to specify either which colour to be used or which data variable mapped to the colour palette.\ntm_borders( ) - tmap - to draw the polygon borders.\ntmap_style( ) - tmap - to set the tmap style.\ntm_layout( ) - tmap - to set the layout of cartographic map.\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(dupl_shapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nRemarks :\nThe plot above indicates those duplicated water points are not within the same location.\n\n\n\n\n\n3.3.2.4 acquire State info for duplicated value\n\n\n\n\n\n\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\nShow the code\ndupl_shapeName %>%\n  mutate(st_centroid(\n    dupl_shapeName$geometry, of_largest_polygon = FALSE))\n\n\nSimple feature collection with 12 features and 2 fields\nActive geometry column: geometry\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n   st_centroid(dupl_shapeName$geometry, of_largest_polygon = FALSE)\n1                                         POINT (7.031827 7.791971)\n2                                         POINT (8.782946 10.08015)\n3                                         POINT (5.052235 8.544311)\n4                                         POINT (4.636735 7.920948)\n5                                         POINT (4.926215 8.169349)\n6                                          POINT (4.498797 7.84861)\n7                                         POINT (8.578262 12.00446)\n8                                         POINT (7.760272 8.304034)\n9                                         POINT (8.281026 7.022495)\n10                                         POINT (8.734777 8.35534)\n\n\nShow the code\nglimpse(dupl_shapeName)\n\n\nRows: 12\nColumns: 3\n$ shapeName           <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ `bdy_nga$shapeName` <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ geometry            <MULTIPOLYGON [°]> MULTIPOLYGON (((6.708541 7...., MULTI…\n\n\n\n\n\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\ndupl_shapeName_coord\nlga_office_coord\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.791971, 7.031827\n7.80932, 6.74853\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n10.08015, 8.782946\n10.11143, 8.71559\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.544311, 5.052235\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.920948, 4.636735\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.169349, 4.926215\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.84861, 4.498797\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n12.00446, 8.578262\n11.5, 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.304034, 7.760272\n8.53477, 7.70153\n\n\nObi\n546\nObarike-Ito\nBenue\nNG.BE.OB\n7.022495, 8.281026\n7.01129, 8.33118\n\n\nObi\n547\nObi\nNasarawa\nNG.NA.OB\n8.35534, 8.734777\n8.37944, 8.78561\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.493217, 3.346919\n6.50048, 3.35488\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.088897, 4.393574\n8.08459, 4.38538"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#data-wrangling",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#data-wrangling",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1 Edit Duplicated Value :: “shapeName”\n\n\n\n\n\n\nTwo (2) Main Steps involved :\n\nCombine “shapeName” with the State name to make each of them unique.\nReplace the “shapeName” value according to each row index.5\n\n5 Ong Z.R.J. (2022). Geospatial Analytics for Social Good - Understanding Nigeria Water functional and non-functional water point rate. https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#checking-of-duplicated-area-name\n\nShow the code\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- \n  c(\"Bassa Kogi\",\n    \"Bassa Plateau\",\n    \"Ifelodun Kwara\",\n    \"Ifelodun Osun\",\n    \"Irepodun Kwara\",\n    \"Irepodun Osun\",\n    \"Nasarawa Kano\",\n    \"Nasarawa Nasarawa\",\n    \"Obi Nasarawa\",\n    \"Obi Benue\",\n    \"Surulere Lagos\",\n    \"Surulere Oyo\")\n\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)]\n\n\n [1] \"Bassa Kogi\"        \"Bassa Plateau\"     \"Ifelodun Kwara\"   \n [4] \"Ifelodun Osun\"     \"Irepodun Kwara\"    \"Irepodun Osun\"    \n [7] \"Nasarawa Kano\"     \"Nasarawa Nasarawa\" \"Obi Nasarawa\"     \n[10] \"Obi Benue\"         \"Surulere Lagos\"    \"Surulere Oyo\"     \n\n\n\n3.4.1.1 validate edited value :: “shapeName”\n\n\nShow the code\ndupl_shapeName_val <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\ndupl_shapeName_val\n\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName         bdy_nga$shapeName geometry         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\n\n\n\n3.4.2 Perform Point-in-Polygon Overlay\n\n\n\n\n\n\nCombine both attribute and boundary of the water points into a simple feature object.\n\n3.4.2.1 join objects :: wp_sf, bdy_nga\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\n\n\nShow the code\nwp_joined <- st_join(x = wp_sf,\n                     y = bdy_nga,\n                     join = st_intersects,\n                     left = TRUE)\n\n\n\n\n-- save and read RDS File :: wp_joined\n\n\nShow the code\nwrite_rds(wp_joined,\"data/geodata/wp_joined.rds\",compress = \"xz\")\n\n\n\nwp_joined <- read_rds(\"data/geodata/wp_joined.rds\")\n\n\n\n3.4.2.2 inspect joined file :: wp_joined\n\n\n-- assess uniqueness of Water Point\n\nwp_joined %>% janitor::get_dupes(shapeName,lat_lon_deg)\n\nNo duplicate combinations found of: shapeName, lat_lon_deg\n\n\nSimple feature collection with 0 features and 25 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n# A tibble: 0 × 26\n# … with 26 variables: shapeName <chr>, lat_lon_deg <chr>, dupe_count <int>,\n#   row_id <dbl>, lat_deg <dbl>, lon_deg <dbl>, New Georeferenced Column <chr>,\n#   water_source <chr>, water_source_clean <chr>, water_source_category <chr>,\n#   water_tech_clean <chr>, water_tech_category <chr>, status_clean <chr>,\n#   status <chr>, status_id <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   water_point_population <dbl>, local_population_1km <dbl>,\n#   crucialness_score <dbl>, pressure_score <dbl>, usage_capacity <dbl>, …\n\n\nRemarks :\nEach water point observation is unique as there are no duplicate combination of “shapeName” together with “lat_lon_deg”.\n\n\n-- determine reference point :: “shapeName” or “clean_adm2”\n\n\nShow the code\nwp_reference <- (wp_joined$shapeName == wp_joined$clean_adm2)\n\nsummary(wp_reference)\n\n\n   Mode   FALSE    TRUE    NA's \nlogical   29856   65123      29 \n\n\nRemarks :\n\nThere are 29,713 “FALSE”, which is more than 30% of LGA names mismatched between “shapeName” and “clean_adm2”.\n\nSince the geoBoundaries data is collected from government-published and reliable internet sources.6\n\nHence, the “shapeName” variable to be used throughout this study.\n\n\nThe 29 NA’s are 29 water points located beyond the LGA boundary, as shown in the plot below.\n\n6 Daniel et. al (2020) geoBoundaries: A global database of political administrative boundaries. PlosOne. https://doi.org/10.1371/journal.pone.0231866\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga) +\n  tm_polygons() +\n  tm_view(set.zoom.limits = c(5.5, 12))+\n  \ntm_shape(filter(wp_joined, \n                is.na(wp_reference))) +\n  tm_dots(size=0.1,\n          col=\"red\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\n3.4.3 Remove Water Point Outside LGA Boundary\n\n\n\n\n\n\n\nwp_joined1 <- wp_joined %>% \n  filter(\n    shapeName == clean_adm2 | shapeName != clean_adm2)\n\n\n\n\n\n\n3.4.4 Combine Unique Value\n\n\n\n\n\n\nThere are 9 unique values for “status_clean”. However, four (4) of them share the same context :\n\n“Non functional due to dry season”\n“Non-Functional due to dry season”\n“Abandoned”\n“Abandoned/Decommissioned”\n\nHence, the same context values need to combine into one unique value.\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Non functional due to dry season\"] <- \"Non-Functional due to dry season\"\n\nwp_joined1$status_clean[wp_joined1$status_clean == \"Abandoned\"] <- \"Abandoned/Decommissioned\"\n\n\n3.4.4.1 review combined output\n\n\nShow the code\nunique(wp_joined1$status_clean)\n\n\n[1] \"Non-Functional\"                   NA                                \n[3] \"Functional\"                       \"Functional but needs repair\"     \n[5] \"Abandoned/Decommissioned\"         \"Functional but not in use\"       \n[7] \"Non-Functional due to dry season\"\n\n\n\n\n3.4.4.2 save and read RDS file :: wp_joined1\nSave the updated values into wp_joined1 RDS file.\n\n\nShow the code\nwrite_rds(wp_joined1,\"data/geodata/wp_joined1.rds\",compress = \"xz\")\n\n\n\nwp_joined1 <- read_rds(\"data/geodata/wp_joined1.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#extract-water-point-by-attribute",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#extract-water-point-by-attribute",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.5 Extract Water Point by Attribute",
    "text": "3.5 Extract Water Point by Attribute\n\n3.5.1 Extract Functional Water Point :: wpt_functional\n\n\n\n\n\n\n\n\nShow the code\nwpt_functional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n\n3.5.1.1 save and read RDS file :: wpt_functional\n\n\nShow the code\nwrite_rds(wpt_functional,\"data/geodata/wpt_functional.rds\",compress = \"xz\")\n\n\n\nwpt_functional <- read_rds(\"data/geodata/wpt_functional.rds\")\n\n\n\n3.5.1.2 compute data table for clustering analysis\n\n\nShow the code\nwp_nga <- bdy_nga %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(bdy_nga, wp_joined1))) %>%\n  \n  mutate(`wp_functional` = lengths(\n    st_intersects(bdy_nga, wpt_functional))) %>%\n  \n  mutate(`pct_functional` = (`wp_functional`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.2 Extract Non-Functional Water Point :: wpt_nonFunctional\n\n\n\n\n\n\n\n\nShow the code\nwpt_nonFunctional <- wp_joined1 %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Non-Functional\",\n             \"Non-Functional due to dry season\"))\n\n\n\n3.5.2.1 save and read RDS file :: wpt_nonFuntional\n\n\nShow the code\nwrite_rds(wpt_nonFunctional,\"data/geodata/wpt_nonFunctional.rds\",compress = \"xz\")\n\n\n\nwpt_nonFunctional <- read_rds(\"data/geodata/wpt_nonFunctional.rds\")\n\n\n\n3.5.2.2 compute additional variables into wp_nga\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_nonFunctional` = lengths(\n    st_intersects(bdy_nga, wpt_nonFunctional))) %>%\n  mutate(`pct_nonFunctional` = (`wp_nonFunctional`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.3 Extract Unknown Water Point\n\n\n\n\n\n\n\n\nShow the code\nwpt_unknown <- wp_joined1 %>%\n  filter(status_clean == \"Unknown\")\n\n\n\n3.5.3.1 save and read RDS file :: wpt_unknown\n\n\nShow the code\nwrite_rds(wpt_unknown,\"data/geodata/wpt_unknown.rds\")\n\n\n\nwpt_unknown <- read_rds(\"data/geodata/wpt_unknown.rds\")\n\n\n\n3.5.3.2 compute additional variables into wp_nga\n\n\nShow the code\nwp_nga <- wp_nga %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(bdy_nga, wpt_unknown))) %>%\n  mutate(`pct_unknown` = (`wp_unknown`/`total_wp`*100))\n\n\n\n\n\n\n\n\n3.5.4 Extract Water Points by “water_tech_category”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$water_tech_category)\n\n\n\n\n\n              var frequency percentage cumulative_perc\n1       Hand Pump     58735      61.84           61.84\n2 Mechanized Pump     25636      26.99           88.83\n3            <NA>     10054      10.59           99.42\n4        Tapstand       553       0.58          100.00\n5 Rope and Bucket         1       0.00          100.00\n\n\nRemarks :\nOnly “Hand Pump”, “Mechanized Pump”, and “Tapstand” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\n\nwtc_hPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Hand Pump\")\n\nwtc_mPump <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Mechanized Pump\")\n\nwtc_tStand <- wp_joined1 %>%\n  filter(water_tech_category %in%\n           \"Tapstand\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_handPump` = lengths(\n    st_intersects(bdy_nga, wtc_hPump)\n  )) %>%\n  mutate(`total_mechPump` = lengths(\n    st_intersects(bdy_nga, wtc_mPump)\n  )) %>%\n    mutate(`total_tapStand` = lengths(\n    st_intersects(bdy_nga, wtc_tStand)\n  )) %>%\n  mutate(`pct_handPump` = (`total_handPump`/`total_wp`*100)) %>%\n  mutate(`pct_mechPump` = (`total_mechPump`/`total_wp`*100)) %>%\n  mutate(`pct_tapStand` = (`total_tapStand`/`total_wp`*100))\n\n\n\n\n\n\n3.5.5 Extract Water Point by “usage_capacity”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined1$usage_capacity)\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1  300     68768      72.40           72.40\n2 1000     25636      26.99           99.39\n3  250       573       0.60           99.99\n4   50         2       0.00          100.00\n\n\nRemarks :\n\nOnly “300”, “1000”, and “250” are to be extracted for further analysis as the rest are either less than 0.5% or “Unknown”.\nBut, “50” will be included in the new variable “total_ucN1000” as part of the none ‘1000’ “usage_capacity” value.\n\n\nuCap_300 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"300\")\n\nuCap_1000 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"1000\")\n\nuCap_250 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"250\")\n\nuCap_50 <- wp_joined1 %>%\n  filter(usage_capacity %in%\n           \"50\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_uc300` = lengths(\n    st_intersects(bdy_nga, uCap_300)\n  )) %>%\n  mutate(`total_uc1000` = lengths(\n    st_intersects(bdy_nga, uCap_1000)\n  )) %>%\n  mutate(`total_uc250` = lengths(\n    st_intersects(bdy_nga, uCap_250)\n  )) %>%\n  mutate(`total_uc50` = lengths(\n    st_intersects(bdy_nga, uCap_50)\n  )) %>%\n  mutate(`total_ucN1000` = ((lengths(\n    st_intersects(\n      bdy_nga, uCap_300))) + (lengths(\n        st_intersects(\n          bdy_nga, uCap_250))) + (lengths(\n            st_intersects(\n              bdy_nga, uCap_50))))\n    )%>%\n           \n  mutate(`pct_ucN1000` = (`total_ucN1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc300` = (`total_uc300`/`total_wp`*100)) %>%\n  mutate(`pct_uc1000` = (`total_uc1000`/`total_wp`*100)) %>%\n  mutate(`pct_uc250` = (`total_uc250`/`total_wp`*100))\n\n\n\n\n\n\n3.5.6 Extract Water Point by “is_urban”\n\n\n\n\n\n\n\nurban_1 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"TRUE\")\n\nurban_0 <- wp_joined1 %>%\n  filter(is_urban %in%\n           \"FALSE\")\n\nwp_nga <- wp_nga %>%\n  mutate(`total_urban1` = lengths(st_intersects\n                                  (bdy_nga, urban_1)\n                                  )) %>%\n  mutate(`total_urban0` = lengths(st_intersects\n                                  (bdy_nga, urban_0)\n                                  )) %>%\n  mutate(`pct_urban1` = (`total_urban1`/`total_wp`*100)) %>%\n  mutate(`pct_urban0` = (`total_urban0`/`total_wp`*100))\n\n\n\n\n\n\n3.5.7 Save and Read RDS File :: wp_nga\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_nga,\"data/geodata/wp_nga.rds\")\n\n\n\nwp_nga <- read_rds(\"data/geodata/wp_nga.rds\")"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#transform-coordinate-system",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#transform-coordinate-system",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.6 Transform Coordinate System",
    "text": "3.6 Transform Coordinate System\n\n\n\n\n\n\nThe EPSG for wp_nga is 4326, which is WGS 84. To compute the proximity distance matrix for clustering analysis, the coordinate reference system for attribute (wp_nga) and boundary (bdy_nga) data frames needs to transform into EPSG: 26391.\n\n3.6.1 Transform Attribute and Boundary\n\n\n\n\n\n\nst_set_crs( ) - sf - to update the coordinate reference system.\n\n\n\n\nwp_ngaTrans <- st_set_crs(wp_nga, 26391)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nbdy_ngaTrans <- st_set_crs(bdy_nga, 26391)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\n\n3.6.2 Review CRS :: wp_ngaTrans\n\n\n\n\n\n\nUsage of the code chunk below :\nst_crs( ) - sf - to inspect the coordinate reference system.\n\n\n\n\n\nShow the code\nst_crs(wp_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\n3.6.3 Review CRS :: bdy_ngaTrans\n\n\nShow the code\nst_crs(bdy_ngaTrans)\n\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#exploratory-data-analysis-eda",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#exploratory-data-analysis-eda",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "3.7 Exploratory Data Analysis (EDA)",
    "text": "3.7 Exploratory Data Analysis (EDA)\n\n3.7.1 Geospatial EDA\n\n\n\n\n\n\nReference of the code chunk below source from Lin S.Y., 20227.7 Lin S.Y.(2022). Regionalisation Using Water Point Availability in Nigeria. https://lins-92-isss624.netlify.app/take-home_ex02/take-home_ex02#exploratory-data-analysis\n\n\nShow the code\nshapeName_na <- function(x){\n  tm_shape(wp_ngaTrans) +\n    tm_fill(col=x,\n            style=\"pretty\") +\n    tm_borders(alpha=0.5) +\n    tm_layout(legend.height = 0.2, \n              legend.width = 0.2)\n}\n\neda_wpNA <- map(names(wp_ngaTrans)\n                [c(3,5,7,13:15,21:24,28)], \n                shapeName_na)\ntmap_arrange(eda_wpNA)\n\n\n\n\n\nRemarks :\nThe LGA that does not have any water points as shown above to be removed from the data frame.\n\n3.7.1.1 filter state without water point\n\n\nShow the code\nwp_ngaTrim <- wp_ngaTrans %>%\n  filter(if_all(\n    starts_with(\"total_wp\"),~. > 0))\n\n\n\n\n3.7.1.2 visualise distribution of functional and non-functional water points\n\n\nShow the code\nfun <- tm_shape (wp_ngaTrim) +\n  tm_fill(\"pct_functional\",\n          style = \"jenks\",\n          n=6,\n          title = \"Functional (%)\") +\n  tm_layout(main.title = \"Distribution of Functional Water Point by LGA\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\nnfun <- tm_shape (wp_ngaTrim) +\n  tm_fill(\"pct_nonFunctional\",\n          style = \"jenks\",\n          n=6,\n          title = \"Non-Functional (%)\") +\n  tm_layout(main.title = \"Distribution of Non Functional Water Point by LGA\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange (fun, nfun, ncol = 2, asp = 1)\n\n\n\n\n\n\n\n3.7.1.3 save and read RDS file\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_ngaTrim,\"data/geodata/wp_ngaTrim.rds\")\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\n\n\n\n\nCreate a data frame with variables for clustering analysis before visualise the distribution.\n\n3.7.2.1 create cluster variable data frame\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban0\")\n\n\n\n\n3.7.2.2 replace row ID with “shapeName”\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\n3.7.2.3 examine distribution of Cluster Variables\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\nReference of the code chunk below source from Lin S.Y., 20228.8 Lin S.Y.(2022). Regionalisation Using Water Point Availability in Nigeria. https://lins-92-isss624.netlify.app/take-home_ex02/take-home_ex02#exploratory-data-analysis\n\n\nShow the code\nplot_num(cluster_vars)\n\n\n\n\n\n\n\n\n\n\n\n3.7.3 Identify Outliers\n\n\n\n\n\n\nBoxplot shows the minimum, maximum, median, first quartile, third quartile and outliers, if any.\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\nRemarks :"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#visualise-correlation-matrix-1",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#visualise-correlation-matrix-1",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.1 Visualise Correlation Matrix",
    "text": "4.1 Visualise Correlation Matrix\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\n\n\n\nThis plot allows to identify the pattern and the relationship in the matrix.\n\n\nShow the code\ncorrplot.mixed((cor(cluster_vars)),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\n\nRemarks :\nFollowing are the pairs with strong correlation :\n\n\n\ncorrelation coefficients\nvariable_1\nvariable_2\n\n\n\n\n1.00\npct_uc1000\npct_ucN1000\n\n\n1.00\npct_mechPump\npct_uc1000\n\n\n-1.00\npct_mechPump\npct_ucN1000\n\n\n-1.00\npct_uc1000\npct_ucN1000\n\n\n0.99\npct_tapStand\npct_uc250\n\n\n0.99\npct_uc300\npct_ucN1000\n\n\n-0.99\npct_mechPump\npct_uc300\n\n\n-0.99\npct_uc300\npct_uc1000\n\n\n\nSince only “usage_capacity” and “water_tech_category” are showing multicollinearity, hence the study will be split into 2 models with water point status by -\n1) “water_tech_category”\n2) “usage_capacity”"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#refine-model-cluster_varstech",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#refine-model-cluster_varstech",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "4.2 Refine Model :: cluster_varsTech",
    "text": "4.2 Refine Model :: cluster_varsTech\n\n\n\n\n\n\n4.2.1 Remove “usage_capacity”\n\n\n\n\n\nShow the code\ncluster_varsTech <- cluster_vars %>%\n  select(-pct_ucN1000, -pct_uc1000, -pct_uc300, -pct_uc250)\n\n\n\n\nShow the code\ncorrplot.mixed((cor(cluster_varsTech)),\n               upper = \"number\",\n               lower = \"ellipse\",\n               tl.col = \"black\",\n               diag = \"l\",\n               tl.pos = \"lt\")\n\n\n\n\n\nRemarks :\n“pct_handPump” and “pct_mechPump” are negatively correlated at -0.82.\nSince hand pump is the instructed main water point technology in the scope of work, “pct_mechPump” will be removed from the model.\n\n\nShow the code\ncluster_varsTech1 <- cluster_varsTech %>%\n  select(-pct_mechPump)\n\n\n\n4.2.2 Build Regression Model\n\n\nShow the code\nmodel_test <- lm(total_wp ~ pct_functional + \n         pct_nonFunctional +\n         pct_handPump +\n         pct_tapStand +\n         pct_urban0,\n         data = cluster_varsTech1)\n\nsummary(model_test)\n\n\n\nCall:\nlm(formula = total_wp ~ pct_functional + pct_nonFunctional + \n    pct_handPump + pct_tapStand + pct_urban0, data = cluster_varsTech1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-215.31  -54.75  -13.98   32.67  704.69 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        69.4043    16.7459   4.145 3.79e-05 ***\npct_functional     -0.2828     0.2070  -1.366 0.172198    \npct_nonFunctional  -0.7306     0.2165  -3.374 0.000779 ***\npct_handPump        1.3936     0.1284  10.852  < 2e-16 ***\npct_tapStand        0.2251     1.1444   0.197 0.844110    \npct_urban0          0.3684     0.1194   3.084 0.002115 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 97.34 on 755 degrees of freedom\nMultiple R-squared:  0.2087,    Adjusted R-squared:  0.2035 \nF-statistic: 39.83 on 5 and 755 DF,  p-value: < 2.2e-16\n\n\n\n\n4.2.3 Detect Multicollinearity\n\n\nShow the code\ncar::vif(model_test)\n\n\n   pct_functional pct_nonFunctional      pct_handPump      pct_tapStand \n         1.899980          1.607224          1.381794          1.018837 \n       pct_urban0 \n         1.133960 \n\n\nRemarks :\n\n\n\n\n\n\nAlert\n\n\n\nWhen encountering the following error :\n” Error in vif.default(model_test) : there are aliased coefficients in the mode “\nIt means two or more predictor variables in the model are perfectly correlated.\n\n\n\n\n\n\n\n\nNote\n\n\n\nVariables with VIF threshold value between 5 to 10 may need to be cautious but VIF greater than 10 can be problematic to the model performance due to serious collinearity problem.99 Chouiry G. (2022). What is an Acceptable Value for VIF? (With References). https://quantifyinghealth.com/vif-threshold/\n“A VIF value of 10 means that the tolerance of the relevant independent variable is 0.10 and that 90% (𝐑𝟐) of the variable is explained by other variables. This is undesirable, as it indicates that the relevant independent variable is unnecessarily included in the model.”1010 ResearchGate. Multicollinearity issues: is a value less than 10 acceptable for VIF? https://www.researchgate.net/post/Multicollinearity_issues_is_a_value_less_than_10_acceptable_for_VIF\nWhen a study involve a large sample size, the VIF threshold value can be set up to 10.\n\n\nBased on the VIF report, there is no multicollinearity in the model."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#tidy-data-frame",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#tidy-data-frame",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.1 Tidy Data Frame",
    "text": "5.1 Tidy Data Frame\n\n\nShow the code\ncluster_varsTech2 <- cluster_varsTech1 %>%\n  select(-total_wp)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#standardise-data",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#standardise-data",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_varsTech2)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 5  Variables      761  Observations\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_varsTech2)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 5  Variables      761  Observations\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_functional`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_functional`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_functional`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_nonFunctional`)) +\n    geom_density(color = \"black\", fill = \"#ff1919FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_nonFunctional`)) +\n      geom_density(color = \"black\", fill = \"#ff1919FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_nonFunctional`)) +\n     geom_density(color = \"black\", fill=\"#ff1919FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_handPump`)) +\n    geom_density(color = \"black\", fill = \"#FFA319FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_handPump`)) +\n      geom_density(color = \"black\", fill = \"#FFA319FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_handPump`)) +\n     geom_density(color = \"black\", fill=\"#FFA319FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_tapStand`)) +\n    geom_density(color = \"black\", fill = \"#ff5619FF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_tapStand`)) +\n      geom_density(color = \"black\", fill = \"#ff5619FF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_tapStand`)) +\n     geom_density(color = \"black\", fill=\"#ff5619FF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)\n\n\n\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_varsTech2, aes(x = `pct_urban0`)) +\n    geom_density(color = \"black\", fill = \"#19beffFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_urban0`)) +\n      geom_density(color = \"black\", fill = \"#19beffFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_urban0`)) +\n     geom_density(color = \"black\", fill=\"#19beffFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#hierarchical-clustering",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#hierarchical-clustering",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.1 Hierarchical Clustering",
    "text": "6.1 Hierarchical Clustering\nThere are four (4) main steps :\n\ncompute proximity matrix and determine clustering algorithm.\ncompute Hierarchical Clustering.\nidentify optimal number of cluster and merge similar clusters.\nupdate the distance matrix.\n\n\n6.1.1 Compute Proximity Matrix and Clustering Algorithm\n\n\n\n\n\n\nFirst determine the clustering algorithm before compute Hierarchical Clustering analysis.\n\n6.1.1.1 determine Hierarchical Clustering algorithm\n\n\n\n\n\n\nUsage of the code chunk below :\nagnes( ) - cluster - to get agglomerative coefficient of 4 clustering structure, namely “average”, “single”, “complete” and “ward”.\n\n\n\n\n\nShow the code\nm <- c(\"average\",\"single\",\"complete\",\"ward\")\n\nnames(m) <- c(\"average\",\"single\",\"complete\",\"ward\")\n\nac <- function(x){agnes(wp_stdMM, method = x)$ac}\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.9287791 0.8321098 0.9529544 0.9918906 \n\n\nRemarks :\n\nValue 1 indicates the strongest clustering structure.\nWard’s method provides the strongest clustering structure. Therefore, Ward’s method is to be used in subsequent analysis.\n\n\n\n6.1.1.2 compute proximity matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndist( ) - stats - to compute the proximity distance matrix. Among euclidean, maximum, manhattan, canberra, binary and minkowski, euclidean is used to compute proxmat_euc.\n\n\n\n\n\nShow the code\nprox_mat_euc <- dist(wp_stdMM, \n                     method = 'euclidean')\n\n\n\n\n\n\n\n\n6.1.2 Compute Hierarchical Clustering\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhclust( ) - stats - to compute cluster with agglomeration method.\nggdendrogram( ) - ggdendro - to plot dendrogram with tools available in ggplot2.\n\n\n\n\n\nShow the code\nhclust_ward <- hclust(prox_mat_euc, \n                      method = 'ward.D')\nggdendrogram(hclust_ward,\n             rotate = TRUE,\n             cex = 0.1,\n             theme_dendro = FALSE)\n\n\n\n\n\nRemarks :\nThis is in spite of adjusting the cex= parameter that scales the resolution of the dendogram to 10%. 1111 Chua Y.T. (2022). Take-home Exercise 2 - Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods. https://isss624-amelia.netlify.app/exercises/take-home_ex2/take-home_ex2#computing-hierarchical-clustering\n\n\n\n\n\n6.1.3 Identify Number of Optimal Cluster\n\n\n\n\n\n\nTo determine the optimal clusters to retain, following commons methods are tested :\n\nGap statistic\nElbow\nAverage Silhouette\n\n\n6.1.3.1 compute Gap Statistic method\n\n\n\n\n\n\nUsage of the code chunk below :\nclusGap( ) - cluster - to compute the gap statistic.\n\n\n\n\n\nShow the code\nset.seed(12345)\n\ngap_stat <- clusGap(wp_stdMM, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 7, \n                    B = 50)\n\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = wp_stdMM, FUNcluster = hcut, K.max = 7, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..7; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 5\n         logW   E.logW       gap      SE.sim\n[1,] 4.923949 5.477941 0.5539917 0.007618469\n[2,] 4.731938 5.364838 0.6329008 0.012434270\n[3,] 4.617999 5.286602 0.6686036 0.010528780\n[4,] 4.497712 5.221510 0.7237980 0.011597296\n[5,] 4.419187 5.168516 0.7493295 0.011180606\n[6,] 4.379879 5.123591 0.7437121 0.010223152\n[7,] 4.336848 5.085791 0.7489429 0.010297232\n\n\nRemarks :\nThe number of clusters recommended by “firstmax” approach of Gap Statistic method is 5.\n\n\n6.1.3.2 visualise gap_stat\n\n\n\n\n\n\nUsage of the code chunk below :\nfviz_nbclust( ) - factoextra - to compute and visualise the Optimal Number of clusters.\n\n\n\n\n\nShow the code\nset.seed(12345)\n\nfviz_nbclust(wp_stdMM,\n             FUNcluster = hcut,\n             nstart = 25,  \n             method = \"gap_stat\", \n             nboot = 50,\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Gap statistic method\")\n\n\n\n\n\n\n\n6.1.3.3 compute and visualise Total Within Sum of Squares (Elbow) method\n\n\nShow the code\nfviz_nbclust(wp_stdMM, \n             kmeans, \n             method = \"wss\",\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\n6.1.3.4 compute and visualise Silhouette method\n\n\nShow the code\nfviz_nbclust(wp_stdMM, \n             kmeans, \n             method = \"silhouette\",\n             linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\nRemarks :\n\n\n\nMethod\nGap stat\nElbow\nSilhouette\n\n\n\n\nOptimal Value for K\n5\n3\n3\n\n\n\nGiven the Elbow method, Silhouette method and Gap Statistic method, the 5-cluster by Silhouette method will be used for the rest of the study.\n\n\n\n\n\n\n6.1.4 Merge Similar Clusters\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nrect.hclust( ) - stats - to draw the dendrogram with a border around the selected clusters.\n\n\n\n\n\nShow the code\nplot(hclust_ward, cex = 0.5)\nrect.hclust(hclust_ward, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n6.1.5 Visually-Driven Hierarchical Clustering Analysis\n\n\n\n\n\n\nThe data is loaded into a data frame, but it has to be a data matrix to plot the heatmap. Hence, the data frame will need to first transform into a matrix.\n\n6.1.5.1 transform data frame into matrix\n\n\n\n\n\n\nUsage of the code chunk below :\ndata.matrix( ) - base - to transform cluster_varsTrim data frame into a data matrix, and named it as nga_clustMat.\n\n\n\n\n\nShow the code\nwp_stdMM_mat <- data.matrix(wp_stdMM)\n\n\n\n\n6.1.5.2 plot interactive cluster heatmap\n\n\n\n\n\n\nUsage of the code chunk below :\nheatmaply( ) - heatmaply - to build an interactive cluster heatmap.\n\n\n\n\n\nShow the code\nheatmaply(normalize(wp_stdMM_mat),\n          Colv = NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 1,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria by Water Points\",\n          xlab = \"Water Points\",\n          ylab = \"Nigeria LGA\"\n          )\n\n\n\n\n\n\nRemarks :\nCluster 4 and 5 have higher percentage of functional water points.\nCluster 1, 2 and 3 have higher percentage of non-functional water points.\nCluster 1, 2, 4 and 5 have higher percentage of hand pump deployed for the water points.\nCluster 2, 3 and 5 have higher percentage of rural communities.\n\n\n6.1.5.3 create 5-cluster model\n\n\n\n\n\n\nUsage of the code chunk below :\ncutree( ) - base - to derive a 5-cluster model, and named the output as groups.\n\n\n\n\n\nShow the code\ngroups <- as.factor(cutree(hclust_ward, k = 5))\n\n\n\n\n6.1.5.4 append groups to wp_ngaTrim\n\n\nShow the code\nnga_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups)) %>%\n  rename(`cluster`=`as.matrix.groups.`)\n\n\n\n\n6.1.5.5 plot choropleth map :: nga_clust.sf\n\n\nShow the code\nclusGeo.map <- tm_shape(nga_clust.sf) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Non-Spatial with \\n Hierarchical Clustering\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo.map\n\n\n\n\n\nRemarks :\nThe choropleth map above shows the fragmented clusters by the used of non-spatial clustering algorithm (hierarchical cluster analysis method)."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#spatially-constrained-clustering-skater-approach",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#spatially-constrained-clustering-skater-approach",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.2 Spatially Constrained Clustering :: SKATER Approach",
    "text": "6.2 Spatially Constrained Clustering :: SKATER Approach\nSKATER function only support sp objects in SpatialPolygonDataFrame. Hence, the wp_ngaTrans has to first transform into SpatialPolygonDataFrame before proceed further.\n\n6.2.1 Convert SF to SP Data Frame\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nas_Spatial( ) - sf - to convert wp_ngaTrans into nga_sp in a SP data frame.\n\n\n\n\n\nShow the code\nnga.sp <- as_Spatial(wp_ngaTrim)\n\n\n\n\n\n\n\n6.2.2 Compute Neighbour List\n\n\n\n\n\n\nFirst compute the neighbour list before plot it.\n\n6.2.2.1 compute neighbour list from polygon list\n\n\n\n\n\n\nUsage of the code chunk below :\npoly2nb( ) - spdep - to compute the neighbours list from polygon list.\n\n\n\n\n\nShow the code\nnga.nb <- poly2nb(nga.sp, queen = TRUE)\n\nsummary(nga.nb)\n\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nRemarks :\nThere is no LGA without link.\n\n6.2.2.2 plot Neighbour List by Centroid Node\nUsage of the code chunk below : plot the boundary first before the neighbour list object to avoid any region from being clipped away.\n\n\nShow the code\nplot(nga.sp, \n     border = grey(.5))\n\nplot(nga.nb, \n     coordinates(nga.sp), \n     col = \"blue\", \n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n6.2.3 Compute Minimum Spanning Tree (MST)\n\n\n\n\n\n\nTo find a minimum path connecting all nodes in a graph, a minimum spanning tree with minimum weight than all other spanning trees to be used in subsequent steps.\n\n6.2.3.1 calculate edge costs\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the cost of each edge which is the distance between nodes.\n\n\n\n\n\nShow the code\nedge_cost <- nbcosts(nga.nb, wp_stdMM)\n\n\n\n\n6.2.3.2 specify spatial weight\n\n\n\n\n\n\nnb2listw( ) - spdep - to specify edge_cost as the spatial weights. Set the “style” to “B” to ensure the cost values are not row-standardised.\n\n\n\n\n\nShow the code\nnga.w <- nb2listw(nga.nb,\n                  edge_cost,\n                  style = \"B\")\nsummary(nga.w)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1       S2\nB 761 579121 1902.565 2276.999 23657.73\n\n\n\n\n6.2.3.3 compute MST\n\n\n\n\n\n\nUsage of the code chunk below :\nnbcosts( ) - spdep - to compute the minimum spanning tree.\n\n\n\n\n\nShow the code\nnga_minSpanT <- mstree(nga.w)\n\n\n\n\n6.2.3.4 review class and dimension of the computed MST\n\n\nShow the code\nclass(nga_minSpanT)\n\n\n[1] \"mst\"    \"matrix\"\n\n\n\n\nShow the code\ndim(nga_minSpanT)\n\n\n[1] 760   3\n\n\n\n\nShow the code\nhead(nga_minSpanT)\n\n\n     [,1] [,2]       [,3]\n[1,]  109  517 0.11534401\n[2,]  517  685 0.12322370\n[3,]  685  678 0.10131893\n[4,]  685   46 0.13142212\n[5,]  517  229 0.15873997\n[6,]  229  260 0.08560336\n\n\n\n\n6.2.3.5 plot MST Neighbour List\n\n\nShow the code\nplot(nga.sp, border = gray(.5))\n\nplot.mst(nga_minSpanT,\n         coordinates(nga.sp), \n         col = \"blue\", \n         cex.lab = 0.7, \n         cex.circles = 0.005, \n         add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n6.2.4 Compute Spatially Constrained Cluster\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nskater( ) - spdep - to compute the spatially constrained cluster.\nnote: ncuts = number of clusters - 1\n\n\n\n\n\nShow the code\nclust5 <- spdep::skater(edges = nga_minSpanT[,1:2],\n                        data = cluster_varsTech2,\n                        method = \"euclidean\",\n                        ncuts = 4)\nstr(clust5)\n\n\nList of 8\n $ groups      : num [1:761] 5 5 2 5 2 4 4 2 3 3 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:256] 87 668 49 683 695 229 517 109 164 32 ...\n  .. ..$ edge: num [1:255, 1:3] 651 639 761 735 660 429 482 679 146 112 ...\n  .. ..$ ssw : num 10261\n  ..$ :List of 3\n  .. ..$ node: num [1:288] 324 209 208 556 197 408 458 62 88 752 ...\n  .. ..$ edge: num [1:287, 1:3] 209 208 197 430 92 30 428 3 508 729 ...\n  .. ..$ ssw : num 12090\n  ..$ :List of 3\n  .. ..$ node: num [1:80] 332 362 715 101 605 566 22 524 187 288 ...\n  .. ..$ edge: num [1:79, 1:3] 551 25 589 590 549 10 42 287 155 187 ...\n  .. ..$ ssw : num 3447\n  ..$ :List of 3\n  .. ..$ node: num [1:77] 363 81 14 567 27 171 346 28 174 212 ...\n  .. ..$ edge: num [1:76, 1:3] 567 14 81 346 50 174 48 212 531 363 ...\n  .. ..$ ssw : num 3356\n  ..$ :List of 3\n  .. ..$ node: num [1:60] 102 546 33 282 325 369 538 201 720 525 ...\n  .. ..$ edge: num [1:59, 1:3] 611 574 358 600 620 358 359 2 135 538 ...\n  .. ..$ ssw : num 1933\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 39075\n $ ssw         : num [1:5] 39075 34440 33199 31933 31088\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:761] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\n6.2.4.1 tabulate cluster assignment\n\n\nShow the code\nccs5 <- clust5$groups\ntable(ccs5)\n\n\nccs5\n  1   2   3   4   5 \n256 288  80  77  60 \n\n\n\n\n6.2.4.2 plot the pruned tree\n\n\nShow the code\nplot(nga.sp, border = gray(.5))\nplot(clust5, \n     coordinates(nga.sp), \n     cex.lab = .7,\n     groups.colors = c(\"red\",\"green\",\"blue\", \"brown\"),\n     cex.circles = 0.005, \n     add = TRUE)\n\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n6.2.5 Visualise SKATER Clusters in Choropleth Map\n\n\n\n\n\n\n\n\nShow the code\ngroups_mat <- as.matrix(clust5$groups)\n\nnga_spClust.sf <- cbind(nga_clust.sf, \n                        as.factor(groups_mat)) %>%\n  rename(`sp_cluster`=`as.factor.groups_mat.`)\n\n\nTo compare the output of hierarchical clustering and spatially constrained hierarchical clustering :\n\n\nShow the code\nclusGeo_SKAT.map <- tm_shape(nga_spClust.sf) +\n  tm_fill(col = \"sp_cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with SKATER Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_SKAT.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#clustgeo-method",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#clustgeo-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.3 ClustGeo Method",
    "text": "6.3 ClustGeo Method\nThis section consists of two (2) parts i.e. spatially and non-spatially Constrained Cluster analysis.\n\n6.3.1 Non-Spatially Constrained Hierarchical Cluster Analysis\n\n\n\n\n\n\nDissimilarity matrix must be an object of class dist.\n\n6.3.1.1 create Class dist Object\n\n\nShow the code\nproxmat_ngc <- dist(wp_stdMM, method = 'euclidean')\n\n\n\n\n6.3.1.2 compute Non-Spatially Constrained Hierarchical Clustering\n\n\n\n\n\n\nUsage of the code chunk below :\nhclustgeo( ) - ClustGeo - to perform a typical Ward-like hierarchical clustering.\n\n\n\n\n\nShow the code\nnonGeo_clust <- hclustgeo(proxmat_ngc)\nplot(nonGeo_clust, \n     cex = 0.5)\nrect.hclust(nonGeo_clust, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\n\n\n6.3.1.3 derive 5-cluster model\n\n\nShow the code\ngroups_ngc <- as.factor(cutree(nonGeo_clust, \n                               k = 5))\n\n\n\n\n6.3.1.4 combine groups_ngc with wp_ngaTrim\n\n\nShow the code\nnga_ngeo_clust.sf <- cbind(wp_ngaTrim, as.matrix(groups_ngc)) %>%\n  rename(`cluster` = `as.matrix.groups_ngc.`)\n\n\n\n\n6.3.1.5 visualise Non-Spatially Constrained Hierarchical Cluster\n\n\nShow the code\nclusGeo_nSp.map <- tm_shape(nga_ngeo_clust.sf) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Non-Spatially Constrained \\n with ClustGeo Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_nSp.map\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Spatially Constrained Hierarchical Cluster Analysis\n\n\n\n\n\n\n6.3.2.1 determine Spatial Distance Matrix\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nst_distance( ) - sf - to derive the spatial distance matrix before perform spatially constrained hierarchical clustering.\nas.dist( ) - stats - to convert the data frame into matrix.\n\n\n\n\ndist <- st_distance(wp_ngaTrim, wp_ngaTrim)\ndist_mat <- as.dist(dist)\n\n\n6.3.2.2 determine Alpha value\n\n\n\n\n\n\nchoicealpha( ) - psych - to determine a suitable value for the mixing parameter alpha.\n\n\n\n\ncr <- choicealpha(\n  proxmat_ngc, \n  dist_mat, \n  range.alpha = seq(0, 1, 0.1), \n  K = 5, \n  graph = TRUE)\n\n\n\n\n\n\n\nRemarks :\nWith reference to the plot above, alpha = 0.5 to be used to perform spatially constrained hierarchical clustering.\n\n\n6.3.2.3 compute Spatially Constrained Hierarchical Clustering\n\n\nShow the code\nclustG <- hclustgeo(proxmat_ngc, \n                    dist_mat, \n                    alpha = 0.5)\n\n\n\n\n6.3.2.4 derive “cluster” Object\n\n\nShow the code\ngroups_cg <- as.factor(cutree(clustG, k = 5))\n\n\n\n\n6.3.2.5 combine groups_cg with wp_ngaTrim\n\n\nShow the code\nwp_nga_clustG <- cbind(wp_ngaTrim, as.matrix(groups_cg)) %>%\n  rename(`cluster` = `as.matrix.groups_cg.`)\n\n\n\n\n6.3.2.6 Visualise Spatially Constrained Hierarchical Clustering\n\n\nShow the code\nclusGeo_sp.map <- tm_shape(wp_nga_clustG) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with ClustGeo Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nclusGeo_sp.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#spatially-constrained-clustering-redcap-method",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#spatially-constrained-clustering-redcap-method",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "6.4 Spatially Constrained Clustering :: RedCap Method",
    "text": "6.4 Spatially Constrained Clustering :: RedCap Method\n\n6.4.1 Derive Queen Contiguity Spatial Weights\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nqueen_weights( ) - rgeoda - to create a Queen contiguity weights.\n\n\n\n\n\nShow the code\nnga_queenW <- queen_weights(wp_ngaTrim)\n\nnga_queenW\n\n\nReference class object of class \"Weight\"\nField \"gda_w\":\nAn object of class \"p_GeoDaWeight\"\nSlot \"pointer\":\n<pointer: 0x000002212e7e9130>\n\nField \"is_symmetric\":\n[1] TRUE\nField \"sparsity\":\n[1] 0.00750793\nField \"min_neighbors\":\n[1] 1\nField \"max_neighbors\":\n[1] 14\nField \"num_obs\":\n[1] 761\nField \"mean_neighbors\":\n[1] 5.713535\nField \"median_neighbors\":\n[1] 6\nField \"has_isolates\":\n[1] FALSE\n\n\n\n\n\n\n\n6.4.2 Compute Spatially Constrained Cluster\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nredcap( ) - rgeoda - to compute spatially constrained cluster based on three (3) mandatory arguments:-\n\nk, the number of clusters to form\nw, an instance of Weight class\ndf, data frame with cluster variables\n\n\n\n\n\n\nShow the code\nset.seed(12345)\n\nclust_rCap <- redcap(5, \n                     nga_queenW, \n                     wp_stdMM, \n       method = \"fullorder-singlelinkage\",\n       scale_method = 'raw',\n       distance_method = \"euclidean\",\n       random_seed = 12345)\n\nstr(clust_rCap)\n\n\nList of 5\n $ Clusters                                    : int [1:761] 2 2 2 2 2 1 1 2 3 2 ...\n $ Total sum of squares                        : num 3800\n $ Within-cluster sum of squares               : num [1:5] 500 640 397 734 648\n $ Total within-cluster sum of squares         : num 880\n $ The ratio of between to total sum of squares: num 0.232\n\n\n\n\n\n\n\n6.4.3 Reveal Cluster Assignment\n\n\nShow the code\nredCap_cluster <- clust_rCap$Cluster\n\ntable(redCap_cluster)\n\n\nredCap_cluster\n  1   2   3   4   5 \n342 339  50  20  10 \n\n\n\n\n6.4.4 Visualise Spatially Constrained Cluster\n\n\nShow the code\nredCap_mat <- as.matrix(redCap_cluster)\n\nwp_nga_redCap <- cbind(wp_ngaTrim, as.factor(redCap_mat)) %>%\n  rename(`cluster`=`as.factor.redCap_mat.`)\n\n\n\n\nShow the code\nredCap_sp.map <- tm_shape(wp_nga_redCap) +\n  tm_fill(col = \"cluster\",\n          title = \"Cluster\") +\n  tm_borders(alpha = 0.3) +\n  tm_layout(main.title = \"Spatially Constrained \\n with RedCap Method\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0)\n\nredCap_sp.map"
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#visualise-individual-clustering-variable",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#visualise-individual-clustering-variable",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "7.1 Visualise Individual Clustering Variable",
    "text": "7.1 Visualise Individual Clustering Variable\n\n7.1.1 Plot Boxplot\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = nga_ngeo_clust.sf,\n       aes(x = cluster, y = pct_nonFunctional)) +\n  geom_boxplot()\n\n\n\n\n\nRemarks :\nThe boxplot reveals Cluster 3 displays the highest mean of non-functional water points. This is followed by Cluster 2.\n\n\n\n\n\n7.1.2 Visualise Multivariate\n\n\n\n\n\n\nCreate a separate data frame to ensure key variables are included.\n\n7.1.2.1 prepare data frame\n\nnga_ngeo_clust.sf1 <- nga_ngeo_clust.sf %>%\n  select(\"shapeName\", \n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\", \n         \"pct_tapStand\",\n         \"pct_urban0\",\n         \"cluster\")\n         \nhead(nga_ngeo_clust.sf1,3)\n\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6.778522 ymin: 5.052192 xmax: 7.402708 ymax: 9.232154\nProjected CRS: Minna / Nigeria West Belt\n  shapeName pct_functional pct_nonFunctional pct_handPump pct_tapStand\n1 Aba North       41.17647          52.94118    11.764706            0\n2 Aba South       40.84507          49.29577     9.859155            0\n3     Abaji       40.35088          59.64912    40.350877            0\n  pct_urban0 cluster                       geometry\n1   0.000000       1 MULTIPOLYGON (((7.401109 5....\n2   5.633803       1 MULTIPOLYGON (((7.334479 5....\n3  84.210526       2 MULTIPOLYGON (((7.045872 9....\n\n\n\n\n7.1.2.2 plot parallel coordinate plot\n\n\n\n\n\n\nUsage of the code chunk below :\nggparcoord( ) - GGally - to plot static parallel coordinate plots to reveal distribution of variables by cluster.\n\nscale is a character string with the following options -\n\nstd : univariately, subtract mean & divide by standard deviation.\nrobust : univariately, subtract median & divide by median absolute deviation.\nuniminmax : univariately, scale the minimum to 0, the maximum to 1.\nglobalminmax : no scaling; the range of the graphs is defined by the global minimum and the global maximum.\ncenter : use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs : use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\n\n\n\n\n\nggparcoord(data = nga_ngeo_clust.sf1[\n  nga_ngeo_clust.sf1$cluster %in% c(2:6),],\n           columns = c(2:6),\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE,\n           groupColumn = 3) +\n  labs(title = \"Visual Clustering for ClustGeo Method Spatially Constrained Clustering\",\n       subtitle = \"Multiple Parallel Coordinates Plot\") +\n  scale_color_viridis(discrete = FALSE) +\n  facet_grid(~ cluster,) +\n  theme(axis.text.x = element_text(angle = 90),\n        text = element_text(size = 12))\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\nRemarks :\nBased on the parallel coordinate plot above, insights for the stakeholder or decision makers from :\n\nthe Federal Ministry of Agriculture & Rural Development (FMARD) -\n\nCluster 2 LGA has the highest percentage of non-functional water points, followed by Cluster 1 LGA.\nCluster 2 also has the highest percentage of rural communities.\n\n\n!!!!! 1 cluster is missing. Evaluation may be misled."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#compare-clustering-method-visually",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#compare-clustering-method-visually",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "7.2 Compare Clustering Method Visually",
    "text": "7.2 Compare Clustering Method Visually\n\n\n\n\n\n\n\n\nShow the code\ntmap_arrange(clusGeo.map, \n             clusGeo_SKAT.map, \n             clusGeo_nSp.map, \n             clusGeo_sp.map, \n             redCap_sp.map,\n             ncol = 2)\n\n\n\n\n\nRemarks :\nThe output by both Hierarchical Clustering and Hierarchical Clustering by ClustGeo method are relatively similar.\nHowever, for spatially constrained clustering, ClustGeo method produce a desirable output compare to SKATER and RedCap methods."
  },
  {
    "objectID": "class_project/project_2/Regionalisation_scca_v2.html#conclude-with-summary-statistics",
    "href": "class_project/project_2/Regionalisation_scca_v2.html#conclude-with-summary-statistics",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "8.1 Conclude with Summary Statistics",
    "text": "8.1 Conclude with Summary Statistics\n\n\n\n\n\n\n\nnga_ngeo_clust.sf1 %>% \n  st_set_geometry(NULL) %>%\n  group_by(cluster) %>%\n  summarise(mean_pct_functional = mean(pct_functional),\n            mean_pct_nonFunctional = mean(pct_nonFunctional),\n            mean_pct_handPump = mean(pct_handPump), \n            mean_pct_tapStand = mean(pct_tapStand), \n            mean_pct_urban0 = mean(pct_urban0))\n\n# A tibble: 5 × 6\n  cluster mean_pct_functional mean_pct_nonFunctional mean_pct_…¹ mean_…² mean_…³\n  <chr>                 <dbl>                  <dbl>       <dbl>   <dbl>   <dbl>\n1 1                      38.8                   30.1        7.50  0.274     57.3\n2 2                      43.6                   42.7       62.1   1.33      88.8\n3 3                      33.3                   62.3       22.2   0.0885    94.4\n4 4                      53.7                   29.6       45.2   0.582     16.4\n5 5                      79.9                   19.7       83.7   0.0567    88.9\n# … with abbreviated variable names ¹​mean_pct_handPump, ²​mean_pct_tapStand,\n#   ³​mean_pct_urban0\n\n\nRemarks :\nNon-Functional Water Point\n\nMore than 90% of the water points in Cluster 3 are within non-urban communities, and approximately 62% of these water points are non-functional.\nAlthough Cluster 2 and Cluster 5 have similar percentage of approximately 88% water points falls within non-urban communities, the non-functional water points in Cluster 2 is more than twice the amount in Cluster 5 LGA.\n\nResources may required to attain more information regarding the stakeholder who task to maintain the water points that identified as non-functional but having status indicated otherwise.\n!!!! Analysis need to include parameter such as “status” to support the statement above.\n\nCluster 1, however, may require more resources to update the water point data. Unlike Cluster 2, 3, and 5 where more than 85% of water points are updated with data, only two-third of Cluster 1’s water points status and various attributes are known."
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html",
    "href": "exploration/exploration_1/rehabilitated_wpt.html",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "",
    "text": "Explore non-functional water points by attributes\n\n\n\n\n\n\nExplore the relationship between non-functional water points and other attributes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater points in Federal Republic of Nigeria\n\n\n\n\n\nAlpha-3 Code : NGA\nPopulation : 225 million (1st in Africa, 6th globally)\nLocal Government Areas (LGA) : 774\nWater Point Observations : 95,008\nEnvironmental Aspects :\n\nGeography :\n\nSouthwest - “rugged” highland.\nSoutheast - hills and mountains, which form the Mambilla Plateau, the highest plateau in Nigeria.\n\nHydrology :\n\nTwo (2) main catchment areas - Chad Basin & Niger catchment area.\nSurface area of lake Chad is shrinking recent decades due to irrigation activities.1\nUntreated wastes dump in places resulted in waterways and groundwater pollution.2\n\nVegetation Coverage :\n\nLost nearly 80% of primary forest by 2012.3\nStates with dense forests concentrated : Bayelsa, Cross River, Edo, Ekiti, Ondo, Osun, Rivers, and Taraba.\n\n\n1 Wikipedia. Nigeria. https://en.wikipedia.org/wiki/Nigeria2 Ogbonna, D.N., Ekweozor, I.K.E., Igwe, F.U. (2002). “Waste Management: A Tool for Environmental Protection in Nigeria”. Ambio: A Journal of the Human Environment. 31 (1): 55–57. doi:10.1639/0044-7447(2002)031[0055:wmatfe]2.0.co;2.3 https://rainforests.mongabay.com/20nigeria.htm\n\n\n\n\n\n\n\n\n\n\n\nSpecific tasks required for this study :\n\n\n\n\n\n\nExplore the non-functional water points that recently rehabilitated."
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#load-r-packages",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#load-r-packages",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.\n\n\nShow the code\npacman::p_load(sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda)"
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#acquire-data-source",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#acquire-data-source",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nAspatial Data\n\nDownload the Nigeria data set in shapefile format via Access WPdx+ Global Data Repository from WPdx Global Data Repositories.\nRename the title of the data set to “geo_export”.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe file size of the downloaded data is about 422 MB due to water points data from multiple countries.\n\nSuch file size may require extra effort and time to manage the code chunks and files in the R environment before pushing them to GitHub.\n\nHence, to avoid any error in pushing files larger than 100 MB to Git, filtered Nigeria water points and removed unnecessary variables before uploading into the R environment.\nTherewith, the CSV file size should be lesser than 100 MB.\n\n\n\nGeospatial Data\n\nDownload the Nigeria geoBoundaries data set at ADM2 level4 from geoBoundaries.org or the Humanitarian Data Exchange portal.\nRename the title of the data set to “nga_admbnda_adm2_osgof_20190417”\n\n\n4 Runfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866"
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#import-attribute-data",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#import-attribute-data",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "3.2 Import Attribute Data",
    "text": "3.2 Import Attribute Data\nFour (4) data frames to be created for different context, i.e.\n\nwp_coord = coordinated related variables.\nwp_cond = status and conditions related variables.\nwp_adm = administrative and measurements related variables.\nwp = master file that combine all three (3) data frames above.\n\n\n3.2.1 Import Coordinate-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_coord3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\",\n                       col_select = c(`row_id`,\n                                      `#lat_deg`,\n                                      `#lon_deg`,\n                                      `New Georeferenced Column`,\n                                      `lat_lon_deg`)) %>%\n  rename(lat_deg = \"#lat_deg\", \n         lon_deg = \"#lon_deg\")\n\nproblems(wp_coord3)\n\n\n\n\n\n\n3.2.1.1 save and read RDS file :: wp_coord\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_coord3,\"data/geodata/wp_coord3.rds\")\n\n\n\nwp_coord3 <- read_rds(\"data/geodata/wp_coord3.rds\")\n\n\n\n\n\n\n3.2.1.2 review data frame :: wp_coord\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_coord3)\n\n\n\nData summary\n\n\nName\nwp_coord3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNew Georeferenced Column\n0\n1\n23\n45\n0\n14\n0\n\n\nlat_lon_deg\n0\n1\n20\n42\n0\n14\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.07\n160075.61\n160655.00\n599593.25\n602012.00\n602021.50\n602058.00\n▁▁▁▁▇\n\n\nlat_deg\n0\n1\n7.46\n1.85\n6.31\n6.76\n6.78\n6.80\n11.83\n▇▁▁▁▁\n\n\nlon_deg\n0\n1\n8.29\n2.06\n6.95\n7.60\n7.61\n7.66\n13.15\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Import Status and Condition-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_cond3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\", \n                     col_select = c(`row_id`,\n                                    `#water_source`,\n                                    `#water_source_clean`,\n                                    `#water_source_category`,\n                                    `#water_tech_clean`,\n                                    `#water_tech_category`,\n                                    `#status_clean`,\n                                    `#status`,\n                                    `#status_id`)) %>%\n  rename(water_source = `#water_source`,\n         water_source_clean = `#water_source_clean`, \n         water_source_category = `#water_source_category`, \n         water_tech_clean = `#water_tech_clean`, \n         water_tech_category = `#water_tech_category`,\n         status_clean = `#status_clean`,\n         status = `#status`,\n         status_id = `#status_id`)\n\nproblems(wp_cond3)\n\n\n\n\n\n\n3.2.2.1 save and read RDS file :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_cond3,\"data/geodata/wp_cond3.rds\")\n\n\n\nwp_cond3 <- read_rds(\"data/geodata/wp_cond3.rds\")\n\n\n\n\n\n\n3.2.2.2 review data frame :: wp_cond\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_cond3)\n\n\n\nData summary\n\n\nName\nwp_cond3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nwater_source\n0\n1.00\n20\n29\n0\n3\n0\n\n\nwater_source_clean\n0\n1.00\n8\n8\n0\n1\n0\n\n\nwater_source_category\n0\n1.00\n4\n4\n0\n1\n0\n\n\nwater_tech_clean\n1\n0.93\n9\n26\n0\n6\n0\n\n\nwater_tech_category\n1\n0.93\n9\n15\n0\n2\n0\n\n\nstatus_clean\n10\n0.29\n14\n14\n0\n1\n0\n\n\nstatus\n10\n0.29\n34\n34\n0\n1\n0\n\n\nstatus_id\n0\n1.00\n3\n3\n0\n1\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.1\n160075.6\n160655\n599593.2\n602012\n602021.5\n602058\n▁▁▁▁▇\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Import Admistrative and Measure-related Variable\n\n\n\n\n\n\n\n\nShow the code\nwp_adm3 <- read_csv(\"data/aspatial/WPdx_NGAv1.3.csv\", \n                    col_select = c(`row_id`,\n                                   `#clean_adm1`,\n                                   `#clean_adm2`,\n                                   `water_point_population`,\n                                   `local_population_1km`,\n                                   `crucialness_score`,\n                                   `pressure_score`,\n                                   `usage_capacity`,\n                                   `staleness_score`,\n                                   `rehab_priority`,\n                                   `is_urban`\n                                   )) %>%\n  rename(clean_adm1 = `#clean_adm1`,\n         clean_adm2 = `#clean_adm2`)\n\nproblems(wp_adm3)\n\n\n\n\n\n\n3.2.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(wp_adm3,\"data/geodata/wp_adm3.rds\")\n\n\n\nwp_adm3 <- read_rds(\"data/geodata/wp_adm3.rds\")\n\n\n\n\n\n\n3.2.3.2 review data frame :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nskim(wp_adm3)\n\n\n\nData summary\n\n\nName\nwp_adm3\n\n\nNumber of rows\n14\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nlogical\n2\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nclean_adm1\n0\n1\n5\n5\n0\n2\n0\n\n\nclean_adm2\n0\n1\n3\n9\n0\n6\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nrehab_priority\n14\n0\nNaN\n:\n\n\nis_urban\n0\n1\n0.14\nFAL: 12, TRU: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1\n538489.07\n160075.61\n160655.00\n599593.25\n602012.00\n602021.50\n602058.00\n▁▁▁▁▇\n\n\nwater_point_population\n0\n1\n1866.29\n2025.16\n32.00\n414.75\n591.50\n3421.50\n6693.00\n▇▂▃▁▁\n\n\nlocal_population_1km\n0\n1\n5542.86\n9470.86\n74.00\n1582.00\n2759.00\n5025.50\n37211.00\n▇▂▁▁▁\n\n\ncrucialness_score\n0\n1\n0.47\n0.26\n0.08\n0.35\n0.46\n0.50\n1.00\n▃▇▇▁▃\n\n\npressure_score\n0\n1\n5.04\n4.99\n0.11\n1.22\n1.97\n8.37\n12.82\n▇▁▁▂▃\n\n\nusage_capacity\n0\n1\n400.00\n254.20\n300.00\n300.00\n300.00\n300.00\n1000.00\n▇▁▁▁▁\n\n\nstaleness_score\n0\n1\n82.95\n6.78\n80.07\n80.07\n80.07\n81.03\n98.93\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\n\n\n3.2.4 Create Master File\n\n\n\n\n\n\n\n\nShow the code\nwp3 <- left_join(\n  (left_join\n   (wp_coord3,wp_cond3,\n     by = c(\"row_id\")\n     )),\n  wp_adm3, \n  by = c(\"row_id\"))\n\n\n\n\n\n\n\n3.2.5 Convert Well Known Text (WKT) Data to SF Data Frame\n\nThe “New Georeferenced Column” in wp_rds contains spatial data in a WKT format.\nTwo (2) steps to convert the WKT data format into an sf data frame.\n\n\n3.2.5.1 derive new field :: “geometry”\n\n\n\n\n\n\n\n\nShow the code\nwp3$geometry = st_as_sfc(wp3$`New Georeferenced Column`)\n\n\n\n\n\n\n\n3.2.5.2 convert to SF Data Frame\n\n\n\n\n\n\n\n\nShow the code\nwp3_sf<- st_sf(wp3, crs = 4326)\nst_crs(wp3_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#import-boundary-data",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#import-boundary-data",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "3.3 Import Boundary Data",
    "text": "3.3 Import Boundary Data\n\n\n\n\n\n\n\n\nShow the code\nbdy_nga <- st_read(dsn = \"data/geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nproblems(bdy_nga)\n\n\n\n\n\n\n3.3.1 save and read RDS file :: wp_adm\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(bdy_nga,\"data/geodata/bdy_nga.rds\",compress = \"xz\")\n\n\n\nbdy_nga <- read_rds(\"data/geodata/bdy_nga.rds\")\n\n\n\n\n\n\n3.3.2 Review Imported File\n\n3.3.2.1 check for missing and duplicated data\n\n\n\n\n\n\n\n\nShow the code\nskim(bdy_nga)\n\n\nWarning: Couldn't find skimmers for class: sfc_MULTIPOLYGON, sfc; No\nuser-defined `sfl` provided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nbdy_nga\n\n\nNumber of rows\n774\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nshapeName\n0\n1\n3\n18\n0\n768\n0\n\n\ngeometry\n0\n1\n878\n33370\n0\n774\n0\n\n\n\n\n\nRemarks :\n\nThere is no missing data.\nUnder “n_unique”, there is 774 unique “geometry” but only 768 unique “shapeName”.\n\nThat’s mean there are 6 values of “shapeName” duplicated among the identified unique shapeNames.\n\n\n\n\n\n\n\n3.3.2.2 list the unique “shapeName” associated with duplication\n\n\n\n\n\n\n\n\nShow the code\ndupl_shapeName <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\nfreq(dupl_shapeName$shapeName)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n       var frequency percentage cumulative_perc\n1    Bassa         2      16.67           16.67\n2 Ifelodun         2      16.67           33.34\n3 Irepodun         2      16.67           50.01\n4 Nasarawa         2      16.67           66.68\n5      Obi         2      16.67           83.35\n6 Surulere         2      16.67          100.00\n\n\n\n\n\n\n\n3.3.2.3 verify findings in section 3.3.1.2\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(bdy_nga)+\n  tm_polygons()+\n  tm_view(set.zoom.limits = c(6,8))+\n\ntm_shape(dupl_shapeName)+\n  tm_fill(\"shapeName\",\n          n = 6,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"albatross\")+\n  tm_layout(main.title = \"Distribution of Duplicated ShapeName\",\n            main.title.size = 1.3,\n            main.title.position = \"center\")\n\n\ntmap style set to \"albatross\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nRemarks :\nThe plot above indicates those duplicated water points are not within the same location.\n\n\n\n\n\n3.3.2.4 acquire State info for duplicated value\n\n\n\n\n\n\nThe State info to be combined with the duplicated “shapeName”. This will make all the shapeName unique.\n\n\nShow the code\ndupl_shapeName %>%\n  mutate(st_centroid(\n    dupl_shapeName$geometry, of_largest_polygon = FALSE))\n\n\nSimple feature collection with 12 features and 2 fields\nActive geometry column: geometry\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeName bdy_nga$shapeName                       geometry\n1      Bassa             Bassa MULTIPOLYGON (((6.708541 7....\n2      Bassa             Bassa MULTIPOLYGON (((8.823522 10...\n3   Ifelodun          Ifelodun MULTIPOLYGON (((4.664107 8....\n4   Ifelodun          Ifelodun MULTIPOLYGON (((4.721977 7....\n5   Irepodun          Irepodun MULTIPOLYGON (((5.05493 8.0...\n6   Irepodun          Irepodun MULTIPOLYGON (((4.543349 7....\n7   Nasarawa          Nasarawa MULTIPOLYGON (((8.554589 11...\n8   Nasarawa          Nasarawa MULTIPOLYGON (((7.493228 8....\n9        Obi               Obi MULTIPOLYGON (((8.191919 6....\n10       Obi               Obi MULTIPOLYGON (((9.008576 8....\n   st_centroid(dupl_shapeName$geometry, of_largest_polygon = FALSE)\n1                                         POINT (7.031827 7.791971)\n2                                         POINT (8.782946 10.08015)\n3                                         POINT (5.052235 8.544311)\n4                                         POINT (4.636735 7.920948)\n5                                         POINT (4.926215 8.169349)\n6                                          POINT (4.498797 7.84861)\n7                                         POINT (8.578262 12.00446)\n8                                         POINT (7.760272 8.304034)\n9                                         POINT (8.281026 7.022495)\n10                                         POINT (8.734777 8.35534)\n\n\nShow the code\nglimpse(dupl_shapeName)\n\n\nRows: 12\nColumns: 3\n$ shapeName           <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ `bdy_nga$shapeName` <chr> \"Bassa\", \"Bassa\", \"Ifelodun\", \"Ifelodun\", \"Irepodu…\n$ geometry            <MULTIPOLYGON [°]> MULTIPOLYGON (((6.708541 7...., MULTI…\n\n\n\n\n\n\n\n\nlga\nrow_id\nheadquarter\nstate\niso3166code\ndupl_shapeName_coord\nlga_office_coord\n\n\n\n\nBassa\n94\nOguma\nKogi\nNG.KO.BA\n7.791971, 7.031827\n7.80932, 6.74853\n\n\nBassa\n95\nBassa\nPlateau\nNG.PL.BA\n10.08015, 8.782946\n10.11143, 8.71559\n\n\nIfelodun\n304\nShare\nKwara\nNG.KW.IF\n8.544311, 5.052235\n8.5 5.0\n\n\nIfelodun\n305\nIkirun\nOsun\nNG.OS.ID\n7.920948, 4.636735\n7.5 4.5\n\n\nIrepodun\n355\nOmu Aran\nKwara\nNG.KW.IR\n8.169349, 4.926215\n8.5 5.0\n\n\nIrepodun\n356\nIlobu\nOsun\nNG.OS.IP\n7.84861, 4.498797\n7.5 4.5\n\n\nNasarawa\n519\nBompai\nKano\nNG.KN.NA\n12.00446, 8.578262\n11.5, 8.5\n\n\nNasarawa\n520\nNasarawa\nNasarawa\nNG.NA.NA\n8.304034, 7.760272\n8.53477, 7.70153\n\n\nObi\n546\nObarike-Ito\nBenue\nNG.BE.OB\n7.022495, 8.281026\n7.01129, 8.33118\n\n\nObi\n547\nObi\nNasarawa\nNG.NA.OB\n8.35534, 8.734777\n8.37944, 8.78561\n\n\nSurelere\n693\nSurelere\nLagos\nNG.LA.SU\n6.493217, 3.346919\n6.50048, 3.35488\n\n\nSurelere\n694\nIresa-Adu\nOyo\nNG.OY.SU\n8.088897, 4.393574\n8.08459, 4.38538"
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#data-wrangling",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#data-wrangling",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "3.4 Data Wrangling",
    "text": "3.4 Data Wrangling\n\n3.4.1 Edit Duplicated Value :: “shapeName”\n\n\n\n\n\n\nTwo (2) Main Steps involved :\n\nCombine “shapeName” with the State name to make each of them unique.\nReplace the “shapeName” value according to each row index.5\n\n5 Ong Z.R.J. (2022). Geospatial Analytics for Social Good - Understanding Nigeria Water functional and non-functional water point rate. https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#checking-of-duplicated-area-name\n\nShow the code\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- \n  c(\"Bassa Kogi\",\n    \"Bassa Plateau\",\n    \"Ifelodun Kwara\",\n    \"Ifelodun Osun\",\n    \"Irepodun Kwara\",\n    \"Irepodun Osun\",\n    \"Nasarawa Kano\",\n    \"Nasarawa Nasarawa\",\n    \"Obi Nasarawa\",\n    \"Obi Benue\",\n    \"Surulere Lagos\",\n    \"Surulere Oyo\")\n\nbdy_nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)]\n\n\n [1] \"Bassa Kogi\"        \"Bassa Plateau\"     \"Ifelodun Kwara\"   \n [4] \"Ifelodun Osun\"     \"Irepodun Kwara\"    \"Irepodun Osun\"    \n [7] \"Nasarawa Kano\"     \"Nasarawa Nasarawa\" \"Obi Nasarawa\"     \n[10] \"Obi Benue\"         \"Surulere Lagos\"    \"Surulere Oyo\"     \n\n\n\n3.4.1.1 validate edited value :: “shapeName”\n\n\nShow the code\ndupl_shapeName_val <- bdy_nga %>%\n  add_count(bdy_nga$shapeName) %>%\n  filter(n!=1) %>%\n  select(-n)\n\ndupl_shapeName_val\n\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName         bdy_nga$shapeName geometry         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\n\n\n\n3.4.2 Perform Point-in-Polygon Overlay\n\n\n\n\n\n\nCombine both attribute and boundary of the water points into a simple feature object.\n\n3.4.2.1 join objects :: wp_sf, bdy_nga\n\n\n\n\n\n\nUsage of the code chunk below :\nst_join( ) - sf - to join sf-class objects based on geometry, namely, wp_sf and bdy_nga.\n\n\n\n\n\nShow the code\nwp_joined3 <- st_join(x = wp3_sf,\n                     y = bdy_nga,\n                     join = st_intersects,\n                     left = TRUE)\n\nskim(wp_joined3)\n\n\nRemarks :\nThere are only 14 Nigeria water points that are fully rehabilitated.\n\n\n-- save and read RDS File :: wp_joined\n\n\nShow the code\nwrite_rds(wp_joined3,\"data/geodata/wp_joined3.rds\")\n\n\n\nwp_joined3 <- read_rds(\"data/geodata/wp_joined3.rds\") %>%\n  mutate(status = replace_na(status, \"Unknown\")) %>%\n  mutate(water_tech_clean = replace_na(water_tech_clean, \"Unknown\")) %>%\n  mutate(water_tech_category = replace_na(water_tech_category, \"Unknown\"))\n\n\n\n3.4.2.2 inspect joined file :: wp_joined\n\n\n-- assess uniqueness of Water Point\n\nwp_joined3 %>% janitor::get_dupes(shapeName,lat_lon_deg)\n\nNo duplicate combinations found of: shapeName, lat_lon_deg\n\n\nSimple feature collection with 0 features and 25 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n# A tibble: 0 × 26\n# … with 26 variables: shapeName <chr>, lat_lon_deg <chr>, dupe_count <int>,\n#   row_id <dbl>, lat_deg <dbl>, lon_deg <dbl>, New Georeferenced Column <chr>,\n#   water_source <chr>, water_source_clean <chr>, water_source_category <chr>,\n#   water_tech_clean <chr>, water_tech_category <chr>, status_clean <chr>,\n#   status <chr>, status_id <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   water_point_population <dbl>, local_population_1km <dbl>,\n#   crucialness_score <dbl>, pressure_score <dbl>, usage_capacity <dbl>, …\n\n\nRemarks :\nEach water point observation is unique as there are no duplicate combination of “shapeName” together with “lat_lon_deg”.\n\n\n-- determine reference point :: “shapeName” or “clean_adm2”\n\n\nShow the code\nwp_reference <- (wp_joined3$shapeName == wp_joined3$clean_adm2)\n\nsummary(wp_reference)\n\n\n   Mode   FALSE    TRUE \nlogical       4      10 \n\n\nRemarks :\n\nThere are 4 “FALSE”, which is approximately 28% of LGA names mismatched between “shapeName” and “clean_adm2”.\n\nSince the geoBoundaries data is collected from government-published and reliable internet sources.6\n\nHence, the “shapeName” variable to be used throughout this study.\n\n\n\n6 Daniel et. al (2020) geoBoundaries: A global database of political administrative boundaries. PlosOne. https://doi.org/10.1371/journal.pone.0231866\n\n-- review “status”\n\n\nShow the code\nunique(wp_joined3$status)\n\n\n[1] \"Unknown\"                            \"Non-functional Technical breakdown\"\n\n\n\n\n3.4.2.3 save and read RDS file :: wp_joined3\nSave the updated values into wp_joined1 RDS file.\n\n\nShow the code\nwrite_rds(wp_joined3,\"data/geodata/wp_joined3.rds\")\n\n\n\nwp_joined3 <- read_rds(\"data/geodata/wp_joined3.rds\")"
  },
  {
    "objectID": "exploration/exploration_1/rehabilitated_wpt.html#extract-water-point-by-attribute",
    "href": "exploration/exploration_1/rehabilitated_wpt.html#extract-water-point-by-attribute",
    "title": "Explore Rehabilated Non-Functional Water Points in Nigeria",
    "section": "3.5 Extract Water Point by Attribute",
    "text": "3.5 Extract Water Point by Attribute\n\n3.5.1 Extract Non-Functional Water Point :: wpt_nonFunctional3\n\n\n\n\n\n\n\n\nShow the code\nwpt_nonFunctional3 <- wp_joined3 %>%\n  filter(status %in% \"Non-functional Technical breakdown\")\n\n\n\n3.5.1.1 save and read RDS file :: wpt_functional\n\n\nShow the code\nwrite_rds(wpt_nonFunctional3,\"data/geodata/wpt_nonFunctional3.rds\")\n\n\n\nwpt_nonFunctional3 <- read_rds(\"data/geodata/wpt_nonFunctional3.rds\")\n\n\n\n3.5.1.2 compute data table for clustering analysis\n\n\nShow the code\nwp_nga3 <- bdy_nga %>%\n  mutate(`total_nonFunctional` = lengths(\n    st_intersects(bdy_nga, wpt_nonFunctional3)))\n\n\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$is_urban)\n\n\n      n   % val%\nFALSE 4 100  100\n\n\nRemarks :\nThese four (4) water points fall within non-urban communities.\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$status_id)\n\n\n    n   % val%\nYes 4 100  100\n\n\nRemarks :\nWater is available in all these non-functional water points.\n\n\nShow the code\nquestionr::freq(wpt_nonFunctional3$pressure_score)\n\n\n          n  % val%\n1.906667  1 25   25\n8.296667  1 25   25\n12.41     1 25   25\n12.713333 1 25   25\n\n\nRemarks :\nAll water points are over its usage capacity.\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\nnfunc.map3 <- tm_shape(wpt_nonFunctional3) + \n  tm_view(set.zoom.limits = c(11,13)) +\n  tm_dots(col = \"pressure_score\",\n          title = \"Non-Functional\",\n          breaks = c(0,3,6,9,12,15),\n          palette = \"Blues\") +\n  tm_layout(main.title = \"Pressure Score for \\n non-Functional Water Points\",\n            main.title.size = 1.2,\n            main.title.position = \"center\",\n            legend.height = 0.4,\n            legend.width = 0.2, \n            legend.title.size = 2,\n            legend.text.size = 2,\n            frame = TRUE,\n            asp = 0) +\n  tmap_style(\"bw\")\n\n\ntmap style set to \"bw\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"classic\", \"watercolor\" \n\n\nShow the code\nnfunc.map3\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\n3.5.3 Extract Water Points by “water_tech_category”\n\n\n\n\n\n\n\n\nShow the code\nfreq(wp_joined3$water_tech_clean)\n\n\n\n\n\n                         var frequency percentage cumulative_perc\n1  Hand Pump - India Mark II         5      35.71           35.71\n2 Hand Pump - India Mark III         4      28.57           64.28\n3                  Hand Pump         1       7.14           71.42\n4        Hand Pump - Afridev         1       7.14           78.56\n5            Mechanized Pump         1       7.14           85.70\n6    Mechanized Pump - Solar         1       7.14           92.84\n7                    Unknown         1       7.14          100.00\n\n\nShow the code\nfreq(wp_joined3$water_tech_clean[wp_joined3$status == \"Non-functional Technical breakdown\"])\n\n\n\n\n\n                         var frequency percentage cumulative_perc\n1  Hand Pump - India Mark II         3         75              75\n2 Hand Pump - India Mark III         1         25             100\n\n\nRemarks :\nAmong the six (6) known water tech deployed to these 14 water points, two of these tech contributed to all these rehabilitated but non-functional due to technical breakdown.\n\n\nShow the code\nwtc_hPump3 <- wp_joined3 %>%\n  filter(water_tech_clean %in%\n           c(\"Hand Pump - India Mark II\",\n             \"Hand Pump - India Mark III\",\n             \"Hand Pump - India Mark III\",\n             \"Hand Pump\",\n             \"Hand Pump - Afridev\"\n             ))\n\n\n\nwtc_iMii <- wtc_hPump3 %>%\n  filter(water_tech_clean %in%\n           \"Hand Pump - India Mark II\")\n\nwtc_iMiii <- wp_joined3 %>%\n  filter(water_tech_clean %in%\n           \"Hand Pump - India Mark III\")\n\nwp_nga3 <- wp_nga3 %>%\n  mutate(`total_hPump` = lengths(\n    st_intersects(bdy_nga, wtc_hPump3)\n    )) %>%\n  mutate(`total_iMii` = lengths(\n    st_intersects(bdy_nga, wtc_iMii)\n    )) %>%\n  mutate(`total_iMiii` = lengths(\n    st_intersects(bdy_nga, wtc_iMiii)\n    )) %>%      \n  mutate(`pct_iMii` = (`total_iMii`/`total_hPump`*100)) %>%\n  mutate(`pct_iMiii` = (`total_iMiii`/`total_hPump`*100))"
  }
]