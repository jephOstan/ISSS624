---
title: "Extra In-Class4"
subtitle: "IS415 Geospatial Analytics & Applications : Lesson 5"
editor: visual
date:  30 Jan 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
website: 
    google-analytics: "G-VVFCV6MNHG"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

Find out more about Leaflet (light weight) map.

# 2. R PACKAGE REQUIRED

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
```{r}
pacman::p_load(maptools, sf, raster, tmap, spatstat)
```
:::

# 3 GEOSPATIAL DATA

## 3.1 Acquire Data

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## 3.2 Import Data

### 3.2.1 Import Geospatial Data

::: {.callout-warning appearance="simple" icon="false"}
```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```
:::

```{r}
sg_sf <- st_read(dsn = "data", 
                 layer="CostalOutline")
```

```{r}
st_transform(sg_sf, crs = 3414)
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Visualising sf Layers

Visualise with tm_dots( )

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots(alpha = 0.5,
          size = 0.01) +
  tm_view(set.zoom.limits = c(11, 15),
          set.bounds = TRUE)

```

Remarks :

OpenStreetMap discloses some info, such as "bicycle path" and others not available in Google Maps.

tm_bubles( ) usually used to show proportion.

```{r}
tmap_mode('plot')
```

Visualise with tm_bubbles( )

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_bubbles(alpha = 0.5,
             size = 0.01) +
  tm_view(set.zoom.limits = c(11, 15),
          set.bounds = TRUE)
```

```{r}
tmap_mode('plot')
```

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

```{r}
any(duplicated(childcare_ppp))
```

```{r}
multiplicity(childcare_ppp)
```

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha = 0.4, 
          size = 0.05)
```

```{r}
tmap_mode('plot')
```

Handling Duplicated Point Events

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry= TRUE, 
                             nsim = 1, 
                             drop = TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

```{r}
sg_owin <- as(sg_sp, "owin")
```

Remarks : Owin layer is created to set the boundary to prevent newly derived points from plotted within non-study area.

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

Extracting Study Area

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

kernel density map scale is easier to comprehend.

https://r4gdsa.netlify.app/chap04.html#working-with-different-automatic-badwidth-methods
