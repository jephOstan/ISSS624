---
title: "GWLR - Osun Water Points"
editor: visual
date: 17 Dec 2022
reference-location: margin
citation-location: margin
code-copy: true
website: 
    google-analytics: "G-VVFCV6MNHG"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

case study : ***Modelling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression (GWLR).***

# 1. OVERVIEW

This study focuses on GWLR analysis based on Nigeria's water points attributes.

## 1.1 Objectives

To build an explanatory model to discover factor affecting water point status in Osun State, Nigeria :

## 1.2 Study Area

Osun State, Nigeria

<br>

# 2. R PACKAGE REQUIRED

## 2.1 Load R Packages into R Environment

[Usage of the code chunk below :]{style="color:#5e5c5c"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages. This function will attempt to install the package from CRAN or pacman repository list if its found not installed.

```{r}
pacman::p_load(sf, tidyverse, funModeling, blorr, corrplot, ggpubr, spdep, GWmodel, tmap, skimr, caret, questionr, berryFunctions)
```

<br>

# 3. GEOSPATIAL DATA

## 3.1 Acquire Data Source

-   **Aspatial Data**

    -   **Osun_wp_sf.rds**, contained water points within Osun state.

        -   It is in sf point data frame.

-   **Geospatial Data**

    -   **Osun.rds**, contains LGAs boundaries of Osun State.

        -   It is in sf polygon data frame

## 3.2 Import Data

### 3.2.1 Import Boundary RDS File

```{r}
bdy_osun <- read_rds("data/geodata/Osun.rds")
```

#### 3.2.1.1 review imported data

```{r}
skim(bdy_osun)
```

### 3.2.2 Import Attribute RDS

```{r}
wp_osun <- read_rds("data/geodata/Osun_wp_sf.rds")
```

#### 3.2.2.1 review imported data

```{r}
skim(wp_osun)
```

## 3.3 Exploratory Data Analysis (EDA)

### 3.3.1 Plot Bar Chart

#### 3.3.1.1 visualise "status"

```{r}
#| eval: false
wp_osun %>% freq(input = "status")
```

#### **3.3.1.2 visualise "status" by "water_tech_category"**

```{r}
cross_plot(data = wp_osun, input = "water_tech_category", target = "status")
```

**3.3.1.3 visualise "status" by "usage_capacity"**

```{r}
cross_plot(data = wp_osun, input = "usage_capacity", target = "status")
```

### 3.3.2 Visualise Distribution of "status" Variable

```{r}
tmap_mode("view")

tm_shape(bdy_osun) +
  tm_polygons(alpha = 0.4) +
  
tm_shape(wp_osun) +
  tm_dots(col = "status",
          alpha = 0.6) +
  tm_view(set.zoom.limits = c(8.5,12))

tmap_mode("plot")
```

## 3.4 Data Wrangling

### 3.4.1. Edit Key Variables

```{r}
wp_osun.sf <- wp_osun %>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.)))%>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

Remarks :

Convert "usage_capacity" from numeric to categorical variable via as.factor( ) function.

### 3.4.2 Get Column Index

```{r}
match(c("distance_to_primary_road",
        "distance_to_secondary_road",
        "distance_to_tertiary_road",
        "distance_to_city",
        "distance_to_town",
        "water_point_population",
        "local_population_1km",
        "usage_capacity",
        "is_urban",
        "water_source_clean",
        "status",
        "geometry"),
      names(wp_osun.sf))
```

### 3.4.3 **Create Correlation Analysis Data Table**

```{r}
wp_osun.sf_clean <- wp_osun.sf %>%
  select(c(7, 35:39, 42:43, 46:47, 57)) %>%
  st_set_geometry(NULL)
```

# 4. CORRELATION ANALYSIS

### 4.1 Visualise Correlation Matrix

```{r}
cluster_vars.cor = cor(wp_osun.sf_clean[,2:7])

corrplot.mixed(cluster_vars.cor,
              lower = "ellipse",
              upper = "number",
              tl.pos = "lt",
              diag = "l",
              tl.col = "black")
```

Remarks :

The correlation matrix above indicated there is no highly correlated variable pairs.

# **5. LOGISTIC REGRESSION MODEL**

## 5.1 Build Logistic Regression Model

```{r}
model <- glm(status ~
               distance_to_primary_road +
               distance_to_secondary_road +
               distance_to_tertiary_road +
               distance_to_city +
               distance_to_town +
               is_urban +
               usage_capacity +
               water_source_clean +
               water_point_population +
               local_population_1km,
             data = wp_osun.sf,
             family = binomial(link = 'logit'))
```

### 5.1.1 Create Model Overview

```{r}
blr_regress(model)
```

### 5.1.2 Generate Confusion Matrix :: *model*

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

Remarks :

For a logistic regression model, the specificity rate is only 0.6154.

# **6. GEOGRAPHICALLY WEIGHTED LOGISTIC REGRESSION (GWLR) MODEL**

## 6.1 Convert Simple Feature to SpatialPointDataFrame

```{r}
wp_osun.sp <- wp_osun.sf %>%
  select(c(status,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           is_urban,
           usage_capacity,
           water_source_clean,
           water_point_population,
           local_population_1km)) %>%
  as_Spatial()

wp_osun.sp
```

## 6.2 Fixed Bandwidth GWR Model

### 6.2.1 Compute Fixed Bandwidth

```{r}
#| eval: false
bw.fixed <- bw.ggwr(status ~ distance_to_primary_road +
                      distance_to_secondary_road +
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      is_urban +
                      usage_capacity +
                      water_source_clean +
                      water_point_population +
                      local_population_1km,
                    data = wp_osun.sp,
                    family = "binomial",
                    approach = "AIC",
                    kernel = "gaussian",
                    adaptive = FALSE,
                    longlat = FALSE)
```

```{r}
#| eval: false
bw.fixed
```

Remarks :

Recommended bandwidth is 2,599.672 metres.

### 6.2.2 Perform Fixed Bandwidth GWR Model

```{r}
gwr.fixed <- ggwr.basic(status ~
                           distance_to_primary_road + 
                           distance_to_secondary_road +
                           distance_to_tertiary_road +
                           distance_to_city +
                           distance_to_town +
                           is_urban +
                           usage_capacity +
                           water_source_clean +
                           water_point_population +
                           local_population_1km,
                    data = wp_osun.sp,
                    bw = 2599.672,
                    family = "binomial",
                    kernel = "gaussian",
                    adaptive = FALSE,
                    longlat = FALSE)
```

```{r}
gwr.fixed
```

```{r}
gwr.fixed <- as.data.frame(gwr.fixed$SDF)
```

### 6.2.3 Set Threshold Value

-   Set this exercise's threshold value, otherwise known as "yhat" to 0.5.

-   The value will be assigned to 1 when greater than 0.5, else 0, and saved under the "most" variable.

```{r}
gwr.fixed <- gwr.fixed %>% 
  mutate(most = ifelse(gwr.fixed$yhat >= 0.5, T, F))
```

#### 6.2.3.1 Visualise "most"

```{r}
freq(gwr.fixed$most)
```

### 6.2.4 Generate Confusion Matrix

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)
CM
```

### 6.2.5 Visualise GWLR

#### 6.2.5.1 extract administrative variables

```{r}
wp_osun.sf_selected <- wp_osun.sf %>% 
  select(c(ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE, status))
```

#### 6.2.5.2 combine *wp_osun.sf_selected* and *gwr.fixed*

```{r}
gwr_sf.fixed <- cbind(wp_osun.sf_selected, gwr.fixed)
```

#### 6.2.5.3 visualise Coefficient Estimates

Create interactive point symbol map.

```{r}
tmap_mode("view")

prob_T <- tm_shape(bdy_osun) +
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed) +
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8.5,14))
prob_T

tmap_mode("plot")
```

# 7. MODEL CALIBRATION

## 7.1 Calibrate Logistic Regression Model

Remove the insignificant variables \"distance_to_primary_road\" and \"distance_to_secondary_road\" that identified under section 5.2.

```{r}
model_calibr <- glm(status ~  distance_to_tertiary_road +
                 distance_to_city +
                 distance_to_town +
                 water_point_population +
                 local_population_1km +
                 usage_capacity +
                 is_urban +
                 water_source_clean,
             data = wp_osun.sf,
             family = binomial(link = "logit"))
```

## 7.2 **Create Model Overview :: *model_calibr***

```{r}
blr_regress(model_calibr)
```

## 7.3 Generate Confusion Matrix :: *model_calibr*

```{r}
blr_confusion_matrix(model_calibr, cutoff = 0.5)
```

Remarks :

The specificity rate, 0.6149 is slightly lower than the original logistic regression model, which is 0.6154.

```{r}
wp_osun.sp2 <- wp_osun.sf %>%
  select(c(status,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           usage_capacity,
           is_urban,
           water_source_clean)) %>%
  as_Spatial()

wp_osun.sp2
```

## **7.4 Fixed Bandwidth GWR Model :: *model_calibr***

```{r}
#| eval: false
bw.fixed_calibr <- bw.ggwr(status ~ distance_to_tertiary_road+
                 distance_to_city+
                 distance_to_town+
                 water_point_population+
                 local_population_1km+
                 usage_capacity+
                 is_urban+
                 water_source_clean,
             data = wp_osun.sp2,
             family = 'binomial',
             approach = 'AIC',
             kernel = 'gaussian',
             adaptive = FALSE,
             longlat = FALSE)
```

```{r}
#| eval: false
bw.fixed_calibr
```

Remark :

The recommended bandwidth is 2,377.371 metres.

### 7.4.1 Compute Fixed Bandwidth

```{r}
gwlr.fixed_calibr <- ggwr.basic(status ~ distance_to_tertiary_road +
                                  distance_to_city +
                                  distance_to_town +
                                  water_point_population +
                                  local_population_1km +
                                  usage_capacity +
                                  is_urban +
                                  water_source_clean,
                                data = wp_osun.sp2,
                                bw = 2377.371,
                                family = 'binomial',
                                kernel = 'gaussian',
                                adaptive = FALSE,
                                longlat = FALSE)
```

```{r}
gwlr.fixed_calibr
```

### 7.4.2 Convert Data Frame

```{r}
gwr.fixed_calibr <- as.data.frame(gwlr.fixed_calibr$SDF)
```

### 7.4.3 Set Threshold Value

```{r}
gwr.fixed_calibr <- gwr.fixed_calibr %>%
  mutate(most = ifelse(
    gwr.fixed_calibr$yhat >= 0.5, T, F))
```

### 7.4.4 Generate Confusion Matrix

```{r}
gwr.fixed_calibr$y <- as.factor(gwr.fixed_calibr$y)
gwr.fixed_calibr$most <- as.factor(gwr.fixed_calibr$most)
CM <- confusionMatrix(data = gwr.fixed_calibr$most, 
                      reference = gwr.fixed_calibr$y)
CM
```

## 7.5 Visualise GWLR

```{r}
wp_osun.sf_selected_calibr <- wp_osun.sf %>%
  select(c(ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE, status))
```

```{r}
gwr_sf.fixed_calibr <- cbind(wp_osun.sf_selected_calibr, gwr.fixed_calibr)
```

## 7.6 Visualise Functional & Non-Functional Water Point

```{r}
tmap_mode("view")

prob_TCalibr <- tm_shape(bdy_osun) + 
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed_calibr) + 
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(9,14))

prob_TCalibr
```

# 8. REFERENCES

Chua A. (2022). In-class Ex5: Modelling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression. https://isss624-amelia.netlify.app/exercises/in-class_ex5/in-class_ex5
