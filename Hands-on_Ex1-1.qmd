---
title: "Geospatial Data Wrangling with R [1]"
editor: visual
date: 18 Nov 2022
date-modified: "`r Sys.Date()`"
reference-location: margin
citation-location: margin
code-copy: true
website: 
    google-analytics: "G-VVFCV6MNHG"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

## 1.1 OVERVIEW

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Expected learning outcome**]{style="color:#93c54b"}

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

-   importing geospatial data by using appropriate functions of **sf** package,

-   importing aspatial data by using appropriate function of **readr** package,

-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,

-   assigning or transforming coordinate systems by using using appropriate *sf* functions,

-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

-   performing geoprocessing tasks by using appropriate functions of **sf** package,

-   performing data wrangling tasks by using appropriate functions of **dplyr** package and

-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.
:::

## 1.2 R PACKAGE REQUIRED

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Following are the packages require for this exercise :**]{style="color:#93c54b"}

-   **sf** for importing, managing, and processing geospatial data.

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

    -   **readr** for importing csv data

    -   **readxl** for importing Excel worksheet

    -   **tidyr** for manipulating data

    -   **dplyr** for transforming data

    -   **ggplot2** for visualising data
:::

### 1.2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.
:::

```{r}
pacman::p_load(sf, tidyverse, readr, readxl, ggplot2, dplyr, tidyr, units)
```

[Remarks :]{style="color:#d69c3c"}

[sf, sp, (rgdal, rgeos both are retiring by year 2023), tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}

[Alternate code chunk -]{style="color:#d69c3c"}

```{r}
#| code-fold: false
#| eval: false
packages = c('tidyverse', 'sf', 'readr', 'readxl','ggplot2','dplyr','tidyr')
for(p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p, character.only = T)
}
```
:::

## 1.3 GEOSPATIAL DATA

### 1.3.1 Acquire Data

-   [Data.gov.sg](https://data.gov.sg/)

    -   Download Master Plan 2014 Subzone Boundary (web)

    -   Download Pre-School Location

-   [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

    -   Download Cycling Path

-   [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

    -   Download the latest version of Singapore Airbnb data.

### 1.3.2 Import Geospatial Data

::: {.callout-warning appearance="simple" icon="false"}
This section focus on importing dataset in shapefile format.

#### 1.3.2.1 import Singapore boundary data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_read( )*** - sf -]{style="color:#d46e15"} to read simple features for "MP14_SUBZONE_WEB_PL" and name as "mpsz".

-   [***dsn( )*** -]{style="color:#d46e15"}to define the data path. DSN = data source name.

-   [***layer( )*** -]{style="color:#d46e15"}to provide shapefile name.
:::

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

[Remarks :]{style="color:#d69c3c"}

[Observations : 323 in multipolygon]{style="color:#d69c3c"}

[CRS : Projected CRS i.e. SVY21]{style="color:#d69c3c"}

#### 1.3.2.2 import polyline data for cyclingpath

```{r}
cyclingpath = st_read(dsn = "data/geospatial",                 
                      layer = "CyclingPath")
```

[Remarks :]{style="color:#d69c3c"}

[Observations : 2,248 in multilinestring]{style="color:#d69c3c"}

[CRS : Projected CRS i.e. SVY21]{style="color:#d69c3c"}

#### 1.3.2.3 import GIS data in kml format for preschool

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

[Remarks :]{style="color:#d69c3c"}

[Observations : 1,925 in point]{style="color:#d69c3c"}

[CRS : Geodetic CRS i.e. SVY21]{style="color:#d69c3c"}
:::

### 1.3.3 Import Aspatial Data

::: {.callout-warning appearance="simple" icon="false"}
Two (2) key functions i.e. Import and Inspect.

#### 1.3.3.1 import aspatial data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - qtl2 -]{style="color:#d46e15"} to read a csv file.
:::

```{r}
listings <- read_csv("/jephOstan/ISSS624/data/aspatial/listings.csv")
```

[Remarks :]{style="color:#d69c3c"}

[Consists of 4,161 observations over 18 variables]{style="color:#d69c3c"}

[Assume CRS as WGS84]{style="color:#d69c3c"}

### 1.3.3.2 review dataframe with list( ) function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***list( )*** - base -]{style="color:#d46e15"} to list data.
:::

```{r}
#| eval: false
list(listings)
```
:::

### 1.3.4 Create sf Data Frame

::: {.callout-warning appearance="simple" icon="false"}
Two (2) key functions i.e. Convert and Inspect.

#### 1.3.4.1 convert data frame

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_as_sf( )*** - sf -]{style="color:#d46e15"} to convert aspatial object to an sf object.

-   *coords* - provide x-coordinates first before y-coordinates.

-   *crs* - define the coordinates reference system with 4326.

-   *%\>%* - to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected CRS.
:::

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs = 4326) %>%
  st_transform(crs = 3414)
```

[Remarks :]{style="color:#d69c3c"}

["geometry" is creaed while "longitude" and "latitude" are removed.]{style="color:#d69c3c"}

#### 1.3.4.2 inspect output

```{r}
glimpse(listings_sf)
```
:::

### 1.3.5 Retrieve Geometry List-column

::: {.callout-warning appearance="simple" icon="false"}
There are 3 methods to do so :

1.  mpsz\$geom
2.  mpsz\[\[1\]\]
3.  st_geometry()

```{r}
st_geometry(mpsz)
```

```{r}
mpsz$geom
```
:::

### 1.3.6 Reveal Variables & Data Types

::: {.callout-warning appearance="simple" icon="false"}
Two common methods used i.e. glimpse( ) and head( ).

#### 1.3.6.1 reveal with glimpse( ) function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***glimpse( )*** - dplyr -]{style="color:#d46e15"} to reveals the data type of each field / variable.
:::

```{r}
glimpse(mpsz, 60)
```

#### 1.3.6.2 reveal with head( ) function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***head( )*** - utils -]{style="color:#d46e15"} to return the first 3 rows of an object i.e. *mpsz*.

-   n = number of rows / observations to display.
:::

```{r}
head(mpsz, n = 3) 
```
:::

## 1.4 GEODATA PROCESSING

### 1.4.1 Transform CRS

::: {.callout-warning appearance="simple" icon="false"}
Ensure all dataframes are in the same projected CRS.

#### 1.4.1.1 transform with st_set_crs( ) function

Generally, there are two main steps involved.

#### -- retrieve CRS information

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_crs( )*** - sf -]{style="color:#d46e15"} to retrieve coordinate reference system for mpsz.
:::

```{r}
st_crs(mpsz)
```

#### -- transform CRS

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_set_crs( )*** - sf -]{style="color:#d46e15"} to replace the coordinate reference system for mpsz.
:::

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

#### -- verify CRS

```{r}
st_crs(mpsz3414)
```

#### 1.4.1.2 transform with st_transform( ) function

#### -- transform wgs84 to svy21

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_transform( )*** - sf -]{style="color:#d46e15"} to reproject x from one coordinate system wgs84 to svy21 mathematically, which is not capable by *st_set_crs()*.
:::

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

#### -- inspect output

```{r}
st_geometry(preschool3414)
```
:::

### 1.4.2 Set Up Buffering

::: {.callout-warning appearance="simple" icon="false"}
To upgrade the existing cycling path, the authority needs to acquire 5 metres of reserved land on both sides of the current cycling path.

Task : determine the extent of the land acquired and its total area.

solution :

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_buffer( )*** - sf -]{style="color:#d46e15"} to set geometric unary operation. - dist = to set buffer distance for cyclingpath. - nQuadSegs = to set number of segments per quadrant. !!!!! dnt understand.
:::

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                            dist = 5, 
                            nQuadSegs = 30)
```

::: {.callout-alert appearance="simple" icon="false"}
[***st_area( )*** - sf -]{style="color:#d46e15"} to compute area for buffer_cycling and assigned to new variable "area"
:::

```{r}
buffer_cycling$area <- st_area(buffer_cycling)
```

::: {.callout-alert appearance="simple" icon="false"}
[***sum( )*** - base -]{style="color:#d46e15"} to compute sum of "area" under buffer_cycling.
:::

```{r}
sum(buffer_cycling$area)
```
:::

### 1.4.3 Perform Point-in-Polygon Count

::: {.callout-warning appearance="simple" icon="false"}
scenario : A preschool service group wants to determine the number of preschools in each Planning Subzone.

solution :

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_intersect( )*** - sf -]{style="color:#d46e15"} to identify pre-schools located inside each Planning Subzone.

[***lengths( )*** - base -]{style="color:#d46e15"} to calculate the number of pre-schools within each planning subzone.
:::

```{r}
mpsz3414$preSch_count <- lengths(
  st_intersects(mpsz3414, 
                preschool3414))

summary(mpsz3414$preSch_count)
```

#### 1.4.3.1 list planning subzone with the most number of pre-school

```{r}
top_n(mpsz3414, 1, preSch_count)
```

#### 1.4.3.2 **calculate the density of pre-school by planning subzone.**

step 1 - use \[*st_area()*\] to derive the area of each planning subzone

```{r}
mpsz3414$area <- mpsz3414 %>%
  st_area()
```

step 2 -

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(preSch_density = preSch_count/area * 1000000)
```
:::

## 1.5 EXPLORATORY DATA ANALYSIS (EDA)

### 1.5.1 Plot Histogram

#### 1.5.1.1 plot with Graphics Function

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***hist( )*** - graphics -]{style="color:#d46e15"} to reveal the distribution of "preSch_density". Too basic for further customisation.
:::

```{r}
hist(mpsz3414$preSch_density)
```

### 1.5.1.2 plot with ggplot2 function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_histogram( )*** - ggplot2 -]{style="color:#d46e15"} to reveal the distribution of "preSch_density".
:::

```{r}
ggplot(data = mpsz3414, 
       aes(x = as.numeric(preSch_density))) +
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle = "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```
:::

### 1.5.2 Plot Scatter Plot

::: {.callout-warning appearance="simple" icon="false"}
To plot a scatter plot showing the relationship between Pre-school Density and Pre-school Count.

#### 1.5.2.1 plot with ggplot2 function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_point( )*** - ggplot2 -]{style="color:#d46e15"} to reveal the relationship between "preSch_density" and "preSch_count".
:::

#### \-- display Row ID of Each Observation

```{r}
ggplot(mpsz3414, 
       aes(x = preSch_density, 
           y = preSch_count)) +
  geom_point() + 
  geom_text(label = rownames(mpsz3414)) 
```

#### \-- change line type and colour

```{r}
ggplot(mpsz3414, 
       aes(x = preSch_density, 
           y = preSch_count)) + 
  geom_point(shape = 18, 
             color = "blue") + 
  geom_smooth(method = lm, 
              se = FALSE, 
              linetype = "dashed", 
              color = "darkred")
```

#### \-- change colour for the Confidence Interval

```{r}
ggplot(mpsz3414,
       aes(x = preSch_density, 
           y = preSch_count)) + 
  geom_point(shape = 18, 
             color = "blue") + 
  geom_smooth(method = lm, 
              linetype = "dashed", 
              color = "darkred", 
              fill = "blue")
```

#### \-- add title and subtitle

```{r}
ggplot(mpsz3414,
       aes(x = as.numeric(preSch_density), 
           y = (preSch_count))) + 
  geom_point() +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle = "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Count")
```
:::

## 1.6 GEOSPATIAL VISUALISATION

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***plot( )*** - graphics -]{style="color:#d46e15"} to plot map for each field / variable in mpsz.
:::

```{r}
plot(mpsz,
     max.plot = 15,
     asp = 1)
```
:::

### 1.6.1 Plot Boundary

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***st_geometry( )*** - sf -]{style="color:#d46e15"} to get the map boundary for the plot( ) function.
:::

```{r}
plot(st_geometry(mpsz))
```
:::

### 1.6.2 Plot Specific Attribute

::: {.callout-warning appearance="simple" icon="false"}
```{r}
plot(mpsz["PLN_AREA_N"])
```
:::

## 1.7 References

-   r4gdsa.netlify.app. https://r4gdsa.netlify.app/chap02.html#data-preparation

-   STHDA (Statistical tools for high-throughput data analysis), (N.A.), ggplot2 scatter plots : Quick start guide - R software and data visualization. http://www.sthda.com/english/wiki/ggplot2-scatter-plots-quick-start-guide-r-software-and-data-visualization
